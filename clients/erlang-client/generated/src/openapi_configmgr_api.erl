-module(openapi_configmgr_api).

-export([adaptive_form_and_interactive_communication_web_channel_configuration/1, adaptive_form_and_interactive_communication_web_channel_configuration/2,
         adaptive_form_and_interactive_communication_web_channel_theme_configur/1, adaptive_form_and_interactive_communication_web_channel_theme_configur/2,
         analytics_component_query_cache_service/1, analytics_component_query_cache_service/2,
         apache_sling_health_check_result_html_serializer/1, apache_sling_health_check_result_html_serializer/2,
         com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration/1, com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration/2,
         com_adobe_aem_transaction_core_impl_transaction_recorder/1, com_adobe_aem_transaction_core_impl_transaction_recorder/2,
         com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc/1, com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc/2,
         com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc/1, com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc/2,
         com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl/1, com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl/2,
         com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl/1, com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl/2,
         com_adobe_cq_account_api_account_management_service/1, com_adobe_cq_account_api_account_management_service/2,
         com_adobe_cq_account_impl_account_management_servlet/1, com_adobe_cq_account_impl_account_management_servlet/2,
         com_adobe_cq_address_impl_location_location_list_servlet/1, com_adobe_cq_address_impl_location_location_list_servlet/2,
         com_adobe_cq_audit_purge_dam/1, com_adobe_cq_audit_purge_dam/2,
         com_adobe_cq_audit_purge_pages/1, com_adobe_cq_audit_purge_pages/2,
         com_adobe_cq_audit_purge_replication/1, com_adobe_cq_audit_purge_replication/2,
         com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter/1, com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter/2,
         com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl/1, com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl/2,
         com_adobe_cq_cdn_rewriter_impl_cdn_rewriter/1, com_adobe_cq_cdn_rewriter_impl_cdn_rewriter/2,
         com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle/1, com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle/2,
         com_adobe_cq_commerce_impl_asset_dynamic_image_handler/1, com_adobe_cq_commerce_impl_asset_dynamic_image_handler/2,
         com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl/1, com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl/2,
         com_adobe_cq_commerce_impl_asset_static_image_handler/1, com_adobe_cq_commerce_impl_asset_static_image_handler/2,
         com_adobe_cq_commerce_impl_asset_video_handler/1, com_adobe_cq_commerce_impl_asset_video_handler/2,
         com_adobe_cq_commerce_impl_promotion_promotion_manager_impl/1, com_adobe_cq_commerce_impl_promotion_promotion_manager_impl/2,
         com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl/1, com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl/2,
         com_adobe_cq_commerce_pim_impl_page_event_listener/1, com_adobe_cq_commerce_pim_impl_page_event_listener/2,
         com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl/1, com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl/2,
         com_adobe_cq_contentinsight_impl_reporting_services_settings_provider/1, com_adobe_cq_contentinsight_impl_reporting_services_settings_provider/2,
         com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet/1, com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet/2,
         com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle/1, com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle/2,
         com_adobe_cq_dam_cfm_impl_component_component_config_impl/1, com_adobe_cq_dam_cfm_impl_component_component_config_impl/2,
         com_adobe_cq_dam_cfm_impl_conf_feature_config_impl/1, com_adobe_cq_dam_cfm_impl_conf_feature_config_impl/2,
         com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor/1, com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor/2,
         com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter/1, com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter/2,
         com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter/1, com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter/2,
         com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl/1, com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl/2,
         com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker/1, com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker/2,
         com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl/1, com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl/2,
         com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl/1, com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl/2,
         com_adobe_cq_dam_processor_nui_impl_nui_asset_processor/1, com_adobe_cq_dam_processor_nui_impl_nui_asset_processor/2,
         com_adobe_cq_dam_s7imaging_impl_is_image_server_component/1, com_adobe_cq_dam_s7imaging_impl_is_image_server_component/2,
         com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet/1, com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet/2,
         com_adobe_cq_dam_webdav_impl_io_asset_io_handler/1, com_adobe_cq_dam_webdav_impl_io_asset_io_handler/2,
         com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job/1, com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job/2,
         com_adobe_cq_dam_webdav_impl_io_special_files_handler/1, com_adobe_cq_dam_webdav_impl_io_special_files_handler/2,
         com_adobe_cq_deserfw_impl_deserialization_firewall_impl/1, com_adobe_cq_deserfw_impl_deserialization_firewall_impl/2,
         com_adobe_cq_dtm_impl_service_dtm_web_service_impl/1, com_adobe_cq_dtm_impl_service_dtm_web_service_impl/2,
         com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet/1, com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet/2,
         com_adobe_cq_dtm_reactor_impl_service_web_service_impl/1, com_adobe_cq_dtm_reactor_impl_service_web_service_impl/2,
         com_adobe_cq_experiencelog_impl_experience_log_config_servlet/1, com_adobe_cq_experiencelog_impl_experience_log_config_servlet/2,
         com_adobe_cq_hc_content_packages_health_check/1, com_adobe_cq_hc_content_packages_health_check/2,
         com_adobe_cq_history_impl_history_request_filter/1, com_adobe_cq_history_impl_history_request_filter/2,
         com_adobe_cq_history_impl_history_service_impl/1, com_adobe_cq_history_impl_history_service_impl/2,
         com_adobe_cq_inbox_impl_typeprovider_item_type_provider/1, com_adobe_cq_inbox_impl_typeprovider_item_type_provider/2,
         com_adobe_cq_projects_impl_servlet_project_image_servlet/1, com_adobe_cq_projects_impl_servlet_project_image_servlet/2,
         com_adobe_cq_projects_purge_scheduler/1, com_adobe_cq_projects_purge_scheduler/2,
         com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl/1, com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl/2,
         com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl/1, com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl/2,
         com_adobe_cq_screens_device_impl_device_service/1, com_adobe_cq_screens_device_impl_device_service/2,
         com_adobe_cq_screens_device_registration_impl_registration_service_impl/1, com_adobe_cq_screens_device_registration_impl_registration_service_impl/2,
         com_adobe_cq_screens_impl_handler_channels_update_handler/1, com_adobe_cq_screens_impl_handler_channels_update_handler/2,
         com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job/1, com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job/2,
         com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl/1, com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl/2,
         com_adobe_cq_screens_impl_screens_channel_post_processor/1, com_adobe_cq_screens_impl_screens_channel_post_processor/2,
         com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl/1, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl/2,
         com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider/1, com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider/2,
         com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl/1, com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl/2,
         com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl/1, com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl/2,
         com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag/1, com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag/2,
         com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch/1, com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch/2,
         com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check/1, com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check/2,
         com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check/1, com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check/2,
         com_adobe_cq_security_hc_packages_impl_example_content_health_check/1, com_adobe_cq_security_hc_packages_impl_example_content_health_check/2,
         com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check/1, com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check/2,
         com_adobe_cq_social_accountverification_impl_account_management_config_im/1, com_adobe_cq_social_accountverification_impl_account_management_config_im/2,
         com_adobe_cq_social_activitystreams_client_impl_social_activity_componen/1, com_adobe_cq_social_activitystreams_client_impl_social_activity_componen/2,
         com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co/1, com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co/2,
         com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler/1, com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler/2,
         com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten/1, com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten/2,
         com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s/1, com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s/2,
         com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre/1, com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre/2,
         com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i/1, com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i/2,
         com_adobe_cq_social_calendar_client_operationextensions_event_attachmen/1, com_adobe_cq_social_calendar_client_operationextensions_event_attachmen/2,
         com_adobe_cq_social_calendar_servlets_time_zone_servlet/1, com_adobe_cq_social_calendar_servlets_time_zone_servlet/2,
         com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event/1, com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event/2,
         com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se/1, com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se/2,
         com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati/1, com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati/2,
         com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c/1, com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c/2,
         com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos/1, com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos/2,
         com_adobe_cq_social_commons_cors_cors_authentication_filter/1, com_adobe_cq_social_commons_cors_cors_authentication_filter/2,
         com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider/1, com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider/2,
         com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl/1, com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl/2,
         com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener/1, com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener/2,
         com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider/1, com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider/2,
         com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp/1, com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp/2,
         com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp/1, com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp/2,
         com_adobe_cq_social_commons_emailreply_impl_email_reply_importer/1, com_adobe_cq_social_commons_emailreply_impl_email_reply_importer/2,
         com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider/1, com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider/2,
         com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider/1, com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider/2,
         com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider/1, com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider/2,
         com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider/1, com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider/2,
         com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider/1, com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider/2,
         com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider/1, com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider/2,
         com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload/1, com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload/2,
         com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl/1, com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl/2,
         com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit/1, com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit/2,
         com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl/1, com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl/2,
         com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle/1, com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle/2,
         com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper/1, com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper/2,
         com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl/1, com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl/2,
         com_adobe_cq_social_content_fragments_services_impl_communities_fragmen/1, com_adobe_cq_social_content_fragments_services_impl_communities_fragmen/2,
         com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory/1, com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory/2,
         com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory/1, com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory/2,
         com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor/1, com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor/2,
         com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f/1, com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f/2,
         com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto/1, com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto/2,
         com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l/1, com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l/2,
         com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou/1, com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou/2,
         com_adobe_cq_social_enablement_services_impl_author_marker_impl/1, com_adobe_cq_social_enablement_services_impl_author_marker_impl/2,
         com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge/1, com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge/2,
         com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera/1, com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera/2,
         com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service/1, com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service/2,
         com_adobe_cq_social_forum_dispatcher_impl_flush_operations/1, com_adobe_cq_social_forum_dispatcher_impl_flush_operations/2,
         com_adobe_cq_social_group_client_impl_community_group_collection_componen/1, com_adobe_cq_social_group_client_impl_community_group_collection_componen/2,
         com_adobe_cq_social_group_impl_group_service_impl/1, com_adobe_cq_social_group_impl_group_service_impl/2,
         com_adobe_cq_social_handlebars_guava_template_cache_impl/1, com_adobe_cq_social_handlebars_guava_template_cache_impl/2,
         com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s/1, com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s/2,
         com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser/1, com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser/2,
         com_adobe_cq_social_members_endpoints_impl_community_member_group_profile/1, com_adobe_cq_social_members_endpoints_impl_community_member_group_profile/2,
         com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o/1, com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o/2,
         com_adobe_cq_social_members_impl_community_member_group_profile_component_f/1, com_adobe_cq_social_members_impl_community_member_group_profile_component_f/2,
         com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation/1, com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation/2,
         com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen/1, com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen/2,
         com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social/1, com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social/2,
         com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen/1, com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen/2,
         com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci/1, com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci/2,
         com_adobe_cq_social_notifications_impl_mentions_router/1, com_adobe_cq_social_notifications_impl_mentions_router/2,
         com_adobe_cq_social_notifications_impl_notification_manager_impl/1, com_adobe_cq_social_notifications_impl_notification_manager_impl/2,
         com_adobe_cq_social_notifications_impl_notifications_router/1, com_adobe_cq_social_notifications_impl_notifications_router/2,
         com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic/1, com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic/2,
         com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i/1, com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i/2,
         com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m/1, com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m/2,
         com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s/1, com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s/2,
         com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi/1, com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi/2,
         com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet/1, com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet/2,
         com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet/1, com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet/2,
         com_adobe_cq_social_scoring_impl_scoring_event_listener/1, com_adobe_cq_social_scoring_impl_scoring_event_listener/2,
         com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl/1, com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl/2,
         com_adobe_cq_social_site_endpoints_impl_site_operation_service/1, com_adobe_cq_social_site_endpoints_impl_site_operation_service/2,
         com_adobe_cq_social_site_impl_analytics_component_configuration_service_im/1, com_adobe_cq_social_site_impl_analytics_component_configuration_service_im/2,
         com_adobe_cq_social_site_impl_site_configurator_impl/1, com_adobe_cq_social_site_impl_site_configurator_impl/2,
         com_adobe_cq_social_srp_impl_social_solr_connector/1, com_adobe_cq_social_srp_impl_social_solr_connector/2,
         com_adobe_cq_social_sync_impl_diff_changes_observer/1, com_adobe_cq_social_sync_impl_diff_changes_observer/2,
         com_adobe_cq_social_sync_impl_group_sync_listener_impl/1, com_adobe_cq_social_sync_impl_group_sync_listener_impl/2,
         com_adobe_cq_social_sync_impl_publisher_sync_service_impl/1, com_adobe_cq_social_sync_impl_publisher_sync_service_impl/2,
         com_adobe_cq_social_sync_impl_user_sync_listener_impl/1, com_adobe_cq_social_sync_impl_user_sync_listener_impl/2,
         com_adobe_cq_social_translation_impl_translation_service_config_manager/1, com_adobe_cq_social_translation_impl_translation_service_config_manager/2,
         com_adobe_cq_social_translation_impl_ugc_language_detector/1, com_adobe_cq_social_translation_impl_ugc_language_detector/2,
         com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl/1, com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl/2,
         com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl/1, com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl/2,
         com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl/1, com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl/2,
         com_adobe_cq_social_ugcbase_impl_social_utils_impl/1, com_adobe_cq_social_ugcbase_impl_social_utils_impl/2,
         com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl/1, com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl/2,
         com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process/1, com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process/2,
         com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli/1, com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli/2,
         com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl/1, com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl/2,
         com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet/1, com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet/2,
         com_adobe_cq_social_user_impl_transport_http_to_publisher/1, com_adobe_cq_social_user_impl_transport_http_to_publisher/2,
         com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact/1, com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact/2,
         com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup/1, com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup/2,
         com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup/1, com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup/2,
         com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service/1, com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service/2,
         com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task/1, com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task/2,
         com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service/1, com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service/2,
         com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service/1, com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service/2,
         com_adobe_cq_wcm_launches_impl_launches_event_handler/1, com_adobe_cq_wcm_launches_impl_launches_event_handler/2,
         com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator/1, com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator/2,
         com_adobe_cq_wcm_style_internal_component_style_info_cache_impl/1, com_adobe_cq_wcm_style_internal_component_style_info_cache_impl/2,
         com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl/1, com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl/2,
         com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service/1, com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service/2,
         com_adobe_fd_fp_config_forms_portal_scheduler_service/1, com_adobe_fd_fp_config_forms_portal_scheduler_service/2,
         com_adobe_forms_common_service_impl_default_data_provider/1, com_adobe_forms_common_service_impl_default_data_provider/2,
         com_adobe_forms_common_service_impl_forms_common_configuration_service_imp/1, com_adobe_forms_common_service_impl_forms_common_configuration_service_imp/2,
         com_adobe_forms_common_servlet_temp_clean_up_task/1, com_adobe_forms_common_servlet_temp_clean_up_task/2,
         com_adobe_granite_acp_platform_platform_servlet/1, com_adobe_granite_acp_platform_platform_servlet/2,
         com_adobe_granite_activitystreams_impl_activity_manager_impl/1, com_adobe_granite_activitystreams_impl_activity_manager_impl/2,
         com_adobe_granite_analyzer_base_system_status_servlet/1, com_adobe_granite_analyzer_base_system_status_servlet/2,
         com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet/1, com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet/2,
         com_adobe_granite_apicontroller_filter_resolver_hook_factory/1, com_adobe_granite_apicontroller_filter_resolver_hook_factory/2,
         com_adobe_granite_auth_cert_impl_client_cert_auth_handler/1, com_adobe_granite_auth_cert_impl_client_cert_auth_handler/2,
         com_adobe_granite_auth_ims/1, com_adobe_granite_auth_ims/2,
         com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension/1, com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension/2,
         com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl/1, com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl/2,
         com_adobe_granite_auth_ims_impl_ims_config_provider_impl/1, com_adobe_granite_auth_ims_impl_ims_config_provider_impl/2,
         com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator/1, com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator/2,
         com_adobe_granite_auth_ims_impl_ims_provider_impl/1, com_adobe_granite_auth_ims_impl_ims_provider_impl/2,
         com_adobe_granite_auth_oauth_accesstoken_provider/1, com_adobe_granite_auth_oauth_accesstoken_provider/2,
         com_adobe_granite_auth_oauth_impl_bearer_authentication_handler/1, com_adobe_granite_auth_oauth_impl_bearer_authentication_handler/2,
         com_adobe_granite_auth_oauth_impl_default_token_validator_impl/1, com_adobe_granite_auth_oauth_impl_default_token_validator_impl/2,
         com_adobe_granite_auth_oauth_impl_facebook_provider_impl/1, com_adobe_granite_auth_oauth_impl_facebook_provider_impl/2,
         com_adobe_granite_auth_oauth_impl_github_provider_impl/1, com_adobe_granite_auth_oauth_impl_github_provider_impl/2,
         com_adobe_granite_auth_oauth_impl_granite_provider/1, com_adobe_granite_auth_oauth_impl_granite_provider/2,
         com_adobe_granite_auth_oauth_impl_helper_provider_config_manager/1, com_adobe_granite_auth_oauth_impl_helper_provider_config_manager/2,
         com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal/1, com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal/2,
         com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler/1, com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler/2,
         com_adobe_granite_auth_oauth_impl_twitter_provider_impl/1, com_adobe_granite_auth_oauth_impl_twitter_provider_impl/2,
         com_adobe_granite_auth_oauth_provider/1, com_adobe_granite_auth_oauth_provider/2,
         com_adobe_granite_auth_requirement_impl_default_requirement_handler/1, com_adobe_granite_auth_requirement_impl_default_requirement_handler/2,
         com_adobe_granite_auth_saml_saml_authentication_handler/1, com_adobe_granite_auth_saml_saml_authentication_handler/2,
         com_adobe_granite_auth_sso_impl_sso_authentication_handler/1, com_adobe_granite_auth_sso_impl_sso_authentication_handler/2,
         com_adobe_granite_bundles_hc_impl_code_cache_health_check/1, com_adobe_granite_bundles_hc_impl_code_cache_health_check/2,
         com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check/1, com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check/2,
         com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check/1, com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check/2,
         com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check/1, com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check/2,
         com_adobe_granite_bundles_hc_impl_jobs_health_check/1, com_adobe_granite_bundles_hc_impl_jobs_health_check/2,
         com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check/1, com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check/2,
         com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check/1, com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check/2,
         com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check/1, com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check/2,
         com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check/1, com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check/2,
         com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check/1, com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check/2,
         com_adobe_granite_comments_internal_comment_replication_content_filter_fac/1, com_adobe_granite_comments_internal_comment_replication_content_filter_fac/2,
         com_adobe_granite_compatrouter_impl_compat_switching_service_impl/1, com_adobe_granite_compatrouter_impl_compat_switching_service_impl/2,
         com_adobe_granite_compatrouter_impl_routing_config/1, com_adobe_granite_compatrouter_impl_routing_config/2,
         com_adobe_granite_compatrouter_impl_switch_mapping_config/1, com_adobe_granite_compatrouter_impl_switch_mapping_config/2,
         com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving/1, com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving/2,
         com_adobe_granite_contexthub_impl_context_hub_impl/1, com_adobe_granite_contexthub_impl_context_hub_impl/2,
         com_adobe_granite_cors_impl_cors_policy_impl/1, com_adobe_granite_cors_impl_cors_policy_impl/2,
         com_adobe_granite_csrf_impl_csrf_filter/1, com_adobe_granite_csrf_impl_csrf_filter/2,
         com_adobe_granite_csrf_impl_csrf_servlet/1, com_adobe_granite_csrf_impl_csrf_servlet/2,
         com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se/1, com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se/2,
         com_adobe_granite_distribution_core_impl_diff_diff_changes_observer/1, com_adobe_granite_distribution_core_impl_diff_diff_changes_observer/2,
         com_adobe_granite_distribution_core_impl_diff_diff_event_listener/1, com_adobe_granite_distribution_core_impl_diff_diff_event_listener/2,
         com_adobe_granite_distribution_core_impl_distribution_to_replication_even/1, com_adobe_granite_distribution_core_impl_distribution_to_replication_even/2,
         com_adobe_granite_distribution_core_impl_replication_adapters_replicat/1, com_adobe_granite_distribution_core_impl_replication_adapters_replicat/2,
         com_adobe_granite_distribution_core_impl_replication_distribution_trans/1, com_adobe_granite_distribution_core_impl_replication_distribution_trans/2,
         com_adobe_granite_distribution_core_impl_transport_access_token_distribu/1, com_adobe_granite_distribution_core_impl_transport_access_token_distribu/2,
         com_adobe_granite_frags_impl_check_http_header_flag/1, com_adobe_granite_frags_impl_check_http_header_flag/2,
         com_adobe_granite_frags_impl_random_feature/1, com_adobe_granite_frags_impl_random_feature/2,
         com_adobe_granite_httpcache_file_file_cache_store/1, com_adobe_granite_httpcache_file_file_cache_store/2,
         com_adobe_granite_httpcache_impl_outer_cache_filter/1, com_adobe_granite_httpcache_impl_outer_cache_filter/2,
         com_adobe_granite_i18n_impl_bundle_pseudo_translations/1, com_adobe_granite_i18n_impl_bundle_pseudo_translations/2,
         com_adobe_granite_i18n_impl_preferences_locale_resolver_service/1, com_adobe_granite_i18n_impl_preferences_locale_resolver_service/2,
         com_adobe_granite_infocollector_info_collector/1, com_adobe_granite_infocollector_info_collector/2,
         com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory/1, com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory/2,
         com_adobe_granite_license_impl_license_check_filter/1, com_adobe_granite_license_impl_license_check_filter/2,
         com_adobe_granite_logging_impl_log_analyser_impl/1, com_adobe_granite_logging_impl_log_analyser_impl/2,
         com_adobe_granite_logging_impl_log_error_health_check/1, com_adobe_granite_logging_impl_log_error_health_check/2,
         com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task/1, com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task/2,
         com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task/1, com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task/2,
         com_adobe_granite_maintenance_crx_impl_revision_cleanup_task/1, com_adobe_granite_maintenance_crx_impl_revision_cleanup_task/2,
         com_adobe_granite_monitoring_impl_script_config_impl/1, com_adobe_granite_monitoring_impl_script_config_impl/2,
         com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han/1, com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han/2,
         com_adobe_granite_oauth_server_impl_access_token_cleanup_task/1, com_adobe_granite_oauth_server_impl_access_token_cleanup_task/2,
         com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet/1, com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet/2,
         com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet/1, com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet/2,
         com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet/1, com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet/2,
         com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet/1, com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet/2,
         com_adobe_granite_offloading_impl_offloading_configurator/1, com_adobe_granite_offloading_impl_offloading_configurator/2,
         com_adobe_granite_offloading_impl_offloading_job_cloner/1, com_adobe_granite_offloading_impl_offloading_job_cloner/2,
         com_adobe_granite_offloading_impl_offloading_job_offloader/1, com_adobe_granite_offloading_impl_offloading_job_offloader/2,
         com_adobe_granite_offloading_impl_transporter_offloading_agent_manager/1, com_adobe_granite_offloading_impl_transporter_offloading_agent_manager/2,
         com_adobe_granite_offloading_impl_transporter_offloading_default_transpo/1, com_adobe_granite_offloading_impl_transporter_offloading_default_transpo/2,
         com_adobe_granite_omnisearch_impl_core_omni_search_service_impl/1, com_adobe_granite_omnisearch_impl_core_omni_search_service_impl/2,
         com_adobe_granite_optout_impl_opt_out_service_impl/1, com_adobe_granite_optout_impl_opt_out_service_impl/2,
         com_adobe_granite_queries_impl_hc_async_index_health_check/1, com_adobe_granite_queries_impl_hc_async_index_health_check/2,
         com_adobe_granite_queries_impl_hc_large_index_health_check/1, com_adobe_granite_queries_impl_hc_large_index_health_check/2,
         com_adobe_granite_queries_impl_hc_queries_status_health_check/1, com_adobe_granite_queries_impl_hc_queries_status_health_check/2,
         com_adobe_granite_queries_impl_hc_query_health_check_metrics/1, com_adobe_granite_queries_impl_hc_query_health_check_metrics/2,
         com_adobe_granite_queries_impl_hc_query_limits_health_check/1, com_adobe_granite_queries_impl_hc_query_limits_health_check/2,
         com_adobe_granite_replication_hc_impl_replication_queue_health_check/1, com_adobe_granite_replication_hc_impl_replication_queue_health_check/2,
         com_adobe_granite_replication_hc_impl_replication_transport_users_health_c/1, com_adobe_granite_replication_hc_impl_replication_transport_users_health_c/2,
         com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check/1, com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check/2,
         com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c/1, com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c/2,
         com_adobe_granite_repository_hc_impl_continuous_rgc_health_check/1, com_adobe_granite_repository_hc_impl_continuous_rgc_health_check/2,
         com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che/1, com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che/2,
         com_adobe_granite_repository_hc_impl_default_logins_health_check/1, com_adobe_granite_repository_hc_impl_default_logins_health_check/2,
         com_adobe_granite_repository_hc_impl_disk_space_health_check/1, com_adobe_granite_repository_hc_impl_disk_space_health_check/2,
         com_adobe_granite_repository_hc_impl_observation_queue_length_health_check/1, com_adobe_granite_repository_hc_impl_observation_queue_length_health_check/2,
         com_adobe_granite_repository_impl_commit_stats_config/1, com_adobe_granite_repository_impl_commit_stats_config/2,
         com_adobe_granite_repository_service_user_configuration/1, com_adobe_granite_repository_service_user_configuration/2,
         com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im/1, com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im/2,
         com_adobe_granite_resourcestatus_impl_composite_status_type/1, com_adobe_granite_resourcestatus_impl_composite_status_type/2,
         com_adobe_granite_resourcestatus_impl_status_resource_provider_impl/1, com_adobe_granite_resourcestatus_impl_status_resource_provider_impl/2,
         com_adobe_granite_rest_assets_impl_asset_content_disposition_filter/1, com_adobe_granite_rest_assets_impl_asset_content_disposition_filter/2,
         com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl/1, com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl/2,
         com_adobe_granite_rest_impl_servlet_default_get_servlet/1, com_adobe_granite_rest_impl_servlet_default_get_servlet/2,
         com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s/1, com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s/2,
         com_adobe_granite_security_user_user_properties_service/1, com_adobe_granite_security_user_user_properties_service/2,
         com_adobe_granite_socialgraph_impl_social_graph_factory_impl/1, com_adobe_granite_socialgraph_impl_social_graph_factory_impl/2,
         com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl/1, com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl/2,
         com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory/1, com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory/2,
         com_adobe_granite_taskmanagement_impl_jcr_task_archive_service/1, com_adobe_granite_taskmanagement_impl_jcr_task_archive_service/2,
         com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task/1, com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task/2,
         com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor/1, com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor/2,
         com_adobe_granite_threaddump_thread_dump_collector/1, com_adobe_granite_threaddump_thread_dump_collector/2,
         com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl/1, com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl/2,
         com_adobe_granite_translation_core_impl_translation_manager_impl/1, com_adobe_granite_translation_core_impl_translation_manager_impl/2,
         com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl/1, com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl/2,
         com_adobe_granite_workflow_console_frags_workflow_withdraw_feature/1, com_adobe_granite_workflow_console_frags_workflow_withdraw_feature/2,
         com_adobe_granite_workflow_console_publish_workflow_publish_event_service/1, com_adobe_granite_workflow_console_publish_workflow_publish_event_service/2,
         com_adobe_granite_workflow_core_jcr_workflow_bucket_manager/1, com_adobe_granite_workflow_core_jcr_workflow_bucket_manager/2,
         com_adobe_granite_workflow_core_job_external_process_job_handler/1, com_adobe_granite_workflow_core_job_external_process_job_handler/2,
         com_adobe_granite_workflow_core_job_job_handler/1, com_adobe_granite_workflow_core_job_job_handler/2,
         com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum/1, com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum/2,
         com_adobe_granite_workflow_core_payload_map_cache/1, com_adobe_granite_workflow_core_payload_map_cache/2,
         com_adobe_granite_workflow_core_payloadmap_payload_move_listener/1, com_adobe_granite_workflow_core_payloadmap_payload_move_listener/2,
         com_adobe_granite_workflow_core_workflow_config/1, com_adobe_granite_workflow_core_workflow_config/2,
         com_adobe_granite_workflow_core_workflow_session_factory/1, com_adobe_granite_workflow_core_workflow_session_factory/2,
         com_adobe_granite_workflow_purge_scheduler/1, com_adobe_granite_workflow_purge_scheduler/2,
         com_adobe_octopus_ncomm_bootstrap/1, com_adobe_octopus_ncomm_bootstrap/2,
         com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s/1, com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s/2,
         com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm/1, com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm/2,
         com_day_commons_datasource_jdbcpool_jdbc_pool_service/1, com_day_commons_datasource_jdbcpool_jdbc_pool_service/2,
         com_day_commons_httpclient/1, com_day_commons_httpclient/2,
         com_day_cq_analytics_impl_store_properties_change_listener/1, com_day_cq_analytics_impl_store_properties_change_listener/2,
         com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte/1, com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte/2,
         com_day_cq_analytics_sitecatalyst_impl_importer_report_importer/1, com_day_cq_analytics_sitecatalyst_impl_importer_report_importer/2,
         com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory/1, com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory/2,
         com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl/1, com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl/2,
         com_day_cq_analytics_testandtarget_impl_account_options_updater/1, com_day_cq_analytics_testandtarget_impl_account_options_updater/2,
         com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener/1, com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener/2,
         com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener/1, com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener/2,
         com_day_cq_analytics_testandtarget_impl_segment_importer/1, com_day_cq_analytics_testandtarget_impl_segment_importer/2,
         com_day_cq_analytics_testandtarget_impl_service_web_service_impl/1, com_day_cq_analytics_testandtarget_impl_service_web_service_impl/2,
         com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet/1, com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet/2,
         com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl/1, com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl/2,
         com_day_cq_auth_impl_cug_cug_support_impl/1, com_day_cq_auth_impl_cug_cug_support_impl/2,
         com_day_cq_auth_impl_login_selector_handler/1, com_day_cq_auth_impl_login_selector_handler/2,
         com_day_cq_commons_impl_externalizer_impl/1, com_day_cq_commons_impl_externalizer_impl/2,
         com_day_cq_commons_servlets_root_mapping_servlet/1, com_day_cq_commons_servlets_root_mapping_servlet/2,
         com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke/1, com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke/2,
         com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list/1, com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list/2,
         com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist/1, com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist/2,
         com_day_cq_contentsync_impl_content_sync_manager_impl/1, com_day_cq_contentsync_impl_content_sync_manager_impl/2,
         com_day_cq_dam_commons_handler_standard_image_handler/1, com_day_cq_dam_commons_handler_standard_image_handler/2,
         com_day_cq_dam_commons_metadata_xmp_filter_black_white/1, com_day_cq_dam_commons_metadata_xmp_filter_black_white/2,
         com_day_cq_dam_commons_util_impl_asset_cache_impl/1, com_day_cq_dam_commons_util_impl_asset_cache_impl/2,
         com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config/1, com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config/2,
         com_day_cq_dam_core_impl_asset_move_listener/1, com_day_cq_dam_core_impl_asset_move_listener/2,
         com_day_cq_dam_core_impl_assethome_asset_home_page_configuration/1, com_day_cq_dam_core_impl_assethome_asset_home_page_configuration/2,
         com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet/1, com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet/2,
         com_day_cq_dam_core_impl_cache_cq_buffered_image_cache/1, com_day_cq_dam_core_impl_cache_cq_buffered_image_cache/2,
         com_day_cq_dam_core_impl_dam_change_event_listener/1, com_day_cq_dam_core_impl_dam_change_event_listener/2,
         com_day_cq_dam_core_impl_dam_event_purge_service/1, com_day_cq_dam_core_impl_dam_event_purge_service/2,
         com_day_cq_dam_core_impl_dam_event_recorder_impl/1, com_day_cq_dam_core_impl_dam_event_recorder_impl/2,
         com_day_cq_dam_core_impl_event_dam_event_audit_listener/1, com_day_cq_dam_core_impl_event_dam_event_audit_listener/2,
         com_day_cq_dam_core_impl_expiry_notification_job_impl/1, com_day_cq_dam_core_impl_expiry_notification_job_impl/2,
         com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat/1, com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat/2,
         com_day_cq_dam_core_impl_gfx_commons_gfx_renderer/1, com_day_cq_dam_core_impl_gfx_commons_gfx_renderer/2,
         com_day_cq_dam_core_impl_handler_eps_format_handler/1, com_day_cq_dam_core_impl_handler_eps_format_handler/2,
         com_day_cq_dam_core_impl_handler_indesign_format_handler/1, com_day_cq_dam_core_impl_handler_indesign_format_handler/2,
         com_day_cq_dam_core_impl_handler_jpeg_handler/1, com_day_cq_dam_core_impl_handler_jpeg_handler/2,
         com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler/1, com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler/2,
         com_day_cq_dam_core_impl_jmx_asset_index_update_monitor/1, com_day_cq_dam_core_impl_jmx_asset_index_update_monitor/2,
         com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl/1, com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl/2,
         com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl/1, com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl/2,
         com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config/1, com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config/2,
         com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config/1, com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config/2,
         com_day_cq_dam_core_impl_lightbox_lightbox_servlet/1, com_day_cq_dam_core_impl_lightbox_lightbox_servlet/2,
         com_day_cq_dam_core_impl_metadata_editor_select_component_handler/1, com_day_cq_dam_core_impl_metadata_editor_select_component_handler/2,
         com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper/1, com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper/2,
         com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl/1, com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl/2,
         com_day_cq_dam_core_impl_missing_metadata_notification_job/1, com_day_cq_dam_core_impl_missing_metadata_notification_job/2,
         com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr/1, com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr/2,
         com_day_cq_dam_core_impl_process_text_extraction_process/1, com_day_cq_dam_core_impl_process_text_extraction_process/2,
         com_day_cq_dam_core_impl_rendition_maker_impl/1, com_day_cq_dam_core_impl_rendition_maker_impl/2,
         com_day_cq_dam_core_impl_reports_report_export_service/1, com_day_cq_dam_core_impl_reports_report_export_service/2,
         com_day_cq_dam_core_impl_reports_report_purge_service/1, com_day_cq_dam_core_impl_reports_report_purge_service/2,
         com_day_cq_dam_core_impl_servlet_asset_download_servlet/1, com_day_cq_dam_core_impl_servlet_asset_download_servlet/2,
         com_day_cq_dam_core_impl_servlet_asset_status_servlet/1, com_day_cq_dam_core_impl_servlet_asset_status_servlet/2,
         com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet/1, com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet/2,
         com_day_cq_dam_core_impl_servlet_batch_metadata_servlet/1, com_day_cq_dam_core_impl_servlet_batch_metadata_servlet/2,
         com_day_cq_dam_core_impl_servlet_binary_provider_servlet/1, com_day_cq_dam_core_impl_servlet_binary_provider_servlet/2,
         com_day_cq_dam_core_impl_servlet_collection_servlet/1, com_day_cq_dam_core_impl_servlet_collection_servlet/2,
         com_day_cq_dam_core_impl_servlet_collections_servlet/1, com_day_cq_dam_core_impl_servlet_collections_servlet/2,
         com_day_cq_dam_core_impl_servlet_companion_servlet/1, com_day_cq_dam_core_impl_servlet_companion_servlet/2,
         com_day_cq_dam_core_impl_servlet_create_asset_servlet/1, com_day_cq_dam_core_impl_servlet_create_asset_servlet/2,
         com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter/1, com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter/2,
         com_day_cq_dam_core_impl_servlet_guid_lookup_filter/1, com_day_cq_dam_core_impl_servlet_guid_lookup_filter/2,
         com_day_cq_dam_core_impl_servlet_health_check_servlet/1, com_day_cq_dam_core_impl_servlet_health_check_servlet/2,
         com_day_cq_dam_core_impl_servlet_metadata_get_servlet/1, com_day_cq_dam_core_impl_servlet_metadata_get_servlet/2,
         com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet/1, com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet/2,
         com_day_cq_dam_core_impl_servlet_resource_collection_servlet/1, com_day_cq_dam_core_impl_servlet_resource_collection_servlet/2,
         com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl/1, com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl/2,
         com_day_cq_dam_core_impl_unzip_unzip_config/1, com_day_cq_dam_core_impl_unzip_unzip_config/2,
         com_day_cq_dam_core_process_exif_tool_extract_metadata_process/1, com_day_cq_dam_core_process_exif_tool_extract_metadata_process/2,
         com_day_cq_dam_core_process_extract_metadata_process/1, com_day_cq_dam_core_process_extract_metadata_process/2,
         com_day_cq_dam_core_process_metadata_processor_process/1, com_day_cq_dam_core_process_metadata_processor_process/2,
         com_day_cq_dam_handler_ffmpeg_locator_impl/1, com_day_cq_dam_handler_ffmpeg_locator_impl/2,
         com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl/1, com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl/2,
         com_day_cq_dam_handler_standard_pdf_pdf_handler/1, com_day_cq_dam_handler_standard_pdf_pdf_handler/2,
         com_day_cq_dam_handler_standard_ps_post_script_handler/1, com_day_cq_dam_handler_standard_ps_post_script_handler/2,
         com_day_cq_dam_handler_standard_psd_psd_handler/1, com_day_cq_dam_handler_standard_psd_psd_handler/2,
         com_day_cq_dam_ids_impl_ids_job_processor/1, com_day_cq_dam_ids_impl_ids_job_processor/2,
         com_day_cq_dam_ids_impl_ids_pool_manager_impl/1, com_day_cq_dam_ids_impl_ids_pool_manager_impl/2,
         com_day_cq_dam_indd_impl_handler_indesign_xmp_handler/1, com_day_cq_dam_indd_impl_handler_indesign_xmp_handler/2,
         com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet/1, com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet/2,
         com_day_cq_dam_indd_process_indd_media_extract_process/1, com_day_cq_dam_indd_process_indd_media_extract_process/2,
         com_day_cq_dam_performance_internal_asset_performance_data_handler_impl/1, com_day_cq_dam_performance_internal_asset_performance_data_handler_impl/2,
         com_day_cq_dam_performance_internal_asset_performance_report_sync_job/1, com_day_cq_dam_performance_internal_asset_performance_report_sync_job/2,
         com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro/1, com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro/2,
         com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even/1, com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even/2,
         com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner/1, com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner/2,
         com_day_cq_dam_s7dam_common_post_servlets_set_create_handler/1, com_day_cq_dam_s7dam_common_post_servlets_set_create_handler/2,
         com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler/1, com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler/2,
         com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process/1, com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process/2,
         com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener/1, com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener/2,
         com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet/1, com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet/2,
         com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl/1, com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl/2,
         com_day_cq_dam_scene7_impl_scene7_api_client_impl/1, com_day_cq_dam_scene7_impl_scene7_api_client_impl/2,
         com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl/1, com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl/2,
         com_day_cq_dam_scene7_impl_scene7_configuration_event_listener/1, com_day_cq_dam_scene7_impl_scene7_configuration_event_listener/2,
         com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener/1, com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener/2,
         com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl/1, com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl/2,
         com_day_cq_dam_scene7_impl_scene7_upload_service_impl/1, com_day_cq_dam_scene7_impl_scene7_upload_service_impl/2,
         com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser/1, com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser/2,
         com_day_cq_dam_stock_integration_impl_configuration_stock_configuration/1, com_day_cq_dam_stock_integration_impl_configuration_stock_configuration/2,
         com_day_cq_dam_video_impl_servlet_video_test_servlet/1, com_day_cq_dam_video_impl_servlet_video_test_servlet/2,
         com_day_cq_extwidget_servlets_image_sprite_servlet/1, com_day_cq_extwidget_servlets_image_sprite_servlet/2,
         com_day_cq_image_internal_font_font_helper/1, com_day_cq_image_internal_font_font_helper/2,
         com_day_cq_jcrclustersupport_cluster_start_level_controller/1, com_day_cq_jcrclustersupport_cluster_start_level_controller/2,
         com_day_cq_mailer_default_mail_service/1, com_day_cq_mailer_default_mail_service/2,
         com_day_cq_mailer_impl_cq_mailing_service/1, com_day_cq_mailer_impl_cq_mailing_service/2,
         com_day_cq_mailer_impl_email_cq_email_template_factory/1, com_day_cq_mailer_impl_email_cq_email_template_factory/2,
         com_day_cq_mailer_impl_email_cq_retriever_template_factory/1, com_day_cq_mailer_impl_email_cq_retriever_template_factory/2,
         com_day_cq_mcm_campaign_impl_integration_config_impl/1, com_day_cq_mcm_campaign_impl_integration_config_impl/2,
         com_day_cq_mcm_campaign_importer_personalized_text_handler_factory/1, com_day_cq_mcm_campaign_importer_personalized_text_handler_factory/2,
         com_day_cq_mcm_core_newsletter_newsletter_email_service_impl/1, com_day_cq_mcm_core_newsletter_newsletter_email_service_impl/2,
         com_day_cq_mcm_impl_mcm_configuration/1, com_day_cq_mcm_impl_mcm_configuration/2,
         com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen/1, com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen/2,
         com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug/1, com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug/2,
         com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component/1, com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component/2,
         com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha/1, com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha/2,
         com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h/1, com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h/2,
         com_day_cq_notification_impl_notification_service_impl/1, com_day_cq_notification_impl_notification_service_impl/2,
         com_day_cq_personalization_impl_servlets_targeting_configuration_servlet/1, com_day_cq_personalization_impl_servlets_targeting_configuration_servlet/2,
         com_day_cq_polling_importer_impl_managed_poll_config_impl/1, com_day_cq_polling_importer_impl_managed_poll_config_impl/2,
         com_day_cq_polling_importer_impl_managed_polling_importer_impl/1, com_day_cq_polling_importer_impl_managed_polling_importer_impl/2,
         com_day_cq_polling_importer_impl_polling_importer_impl/1, com_day_cq_polling_importer_impl_polling_importer_impl/2,
         com_day_cq_replication_audit_replication_event_listener/1, com_day_cq_replication_audit_replication_event_listener/2,
         com_day_cq_replication_content_static_content_builder/1, com_day_cq_replication_content_static_content_builder/2,
         com_day_cq_replication_impl_agent_manager_impl/1, com_day_cq_replication_impl_agent_manager_impl/2,
         com_day_cq_replication_impl_content_durbo_binary_less_content_builder/1, com_day_cq_replication_impl_content_durbo_binary_less_content_builder/2,
         com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov/1, com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov/2,
         com_day_cq_replication_impl_replication_content_factory_provider_impl/1, com_day_cq_replication_impl_replication_content_factory_provider_impl/2,
         com_day_cq_replication_impl_replication_receiver_impl/1, com_day_cq_replication_impl_replication_receiver_impl/2,
         com_day_cq_replication_impl_replicator_impl/1, com_day_cq_replication_impl_replicator_impl/2,
         com_day_cq_replication_impl_reverse_replicator/1, com_day_cq_replication_impl_reverse_replicator/2,
         com_day_cq_replication_impl_transport_binary_less_transport_handler/1, com_day_cq_replication_impl_transport_binary_less_transport_handler/2,
         com_day_cq_replication_impl_transport_http/1, com_day_cq_replication_impl_transport_http/2,
         com_day_cq_reporting_impl_cache_cache_impl/1, com_day_cq_reporting_impl_cache_cache_impl/2,
         com_day_cq_reporting_impl_config_service_impl/1, com_day_cq_reporting_impl_config_service_impl/2,
         com_day_cq_reporting_impl_r_log_analyzer/1, com_day_cq_reporting_impl_r_log_analyzer/2,
         com_day_cq_rewriter_linkchecker_impl_link_checker_impl/1, com_day_cq_rewriter_linkchecker_impl_link_checker_impl/2,
         com_day_cq_rewriter_linkchecker_impl_link_checker_task/1, com_day_cq_rewriter_linkchecker_impl_link_checker_task/2,
         com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory/1, com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory/2,
         com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl/1, com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl/2,
         com_day_cq_rewriter_processor_impl_html_parser_factory/1, com_day_cq_rewriter_processor_impl_html_parser_factory/2,
         com_day_cq_search_impl_builder_query_builder_impl/1, com_day_cq_search_impl_builder_query_builder_impl/2,
         com_day_cq_search_suggest_impl_suggestion_index_manager_impl/1, com_day_cq_search_suggest_impl_suggestion_index_manager_impl/2,
         com_day_cq_searchpromote_impl_publish_search_promote_config_handler/1, com_day_cq_searchpromote_impl_publish_search_promote_config_handler/2,
         com_day_cq_searchpromote_impl_search_promote_service_impl/1, com_day_cq_searchpromote_impl_search_promote_service_impl/2,
         com_day_cq_security_acl_setup/1, com_day_cq_security_acl_setup/2,
         com_day_cq_statistics_impl_statistics_service_impl/1, com_day_cq_statistics_impl_statistics_service_impl/2,
         com_day_cq_tagging_impl_jcr_tag_manager_factory_impl/1, com_day_cq_tagging_impl_jcr_tag_manager_factory_impl/2,
         com_day_cq_tagging_impl_search_tag_predicate_evaluator/1, com_day_cq_tagging_impl_search_tag_predicate_evaluator/2,
         com_day_cq_tagging_impl_tag_garbage_collector/1, com_day_cq_tagging_impl_tag_garbage_collector/2,
         com_day_cq_wcm_contentsync_impl_handler_pages_update_handler/1, com_day_cq_wcm_contentsync_impl_handler_pages_update_handler/2,
         com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor/1, com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor/2,
         com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl/1, com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl/2,
         com_day_cq_wcm_core_impl_commands_wcm_command_servlet/1, com_day_cq_wcm_core_impl_commands_wcm_command_servlet/2,
         com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl/1, com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl/2,
         com_day_cq_wcm_core_impl_event_page_event_audit_listener/1, com_day_cq_wcm_core_impl_event_page_event_audit_listener/2,
         com_day_cq_wcm_core_impl_event_page_post_processor/1, com_day_cq_wcm_core_impl_event_page_post_processor/2,
         com_day_cq_wcm_core_impl_event_repository_change_event_listener/1, com_day_cq_wcm_core_impl_event_repository_change_event_listener/2,
         com_day_cq_wcm_core_impl_event_template_post_processor/1, com_day_cq_wcm_core_impl_event_template_post_processor/2,
         com_day_cq_wcm_core_impl_language_manager_impl/1, com_day_cq_wcm_core_impl_language_manager_impl/2,
         com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl/1, com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl/2,
         com_day_cq_wcm_core_impl_page_page_info_aggregator_impl/1, com_day_cq_wcm_core_impl_page_page_info_aggregator_impl/2,
         com_day_cq_wcm_core_impl_page_page_manager_factory_impl/1, com_day_cq_wcm_core_impl_page_page_manager_factory_impl/2,
         com_day_cq_wcm_core_impl_references_content_content_reference_config/1, com_day_cq_wcm_core_impl_references_content_content_reference_config/2,
         com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler/1, com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler/2,
         com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie/1, com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie/2,
         com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler/1, com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler/2,
         com_day_cq_wcm_core_impl_servlets_find_replace_servlet/1, com_day_cq_wcm_core_impl_servlets_find_replace_servlet/2,
         com_day_cq_wcm_core_impl_servlets_reference_search_servlet/1, com_day_cq_wcm_core_impl_servlets_reference_search_servlet/2,
         com_day_cq_wcm_core_impl_servlets_thumbnail_servlet/1, com_day_cq_wcm_core_impl_servlets_thumbnail_servlet/2,
         com_day_cq_wcm_core_impl_utils_default_page_name_validator/1, com_day_cq_wcm_core_impl_utils_default_page_name_validator/2,
         com_day_cq_wcm_core_impl_variants_page_variants_provider_impl/1, com_day_cq_wcm_core_impl_variants_page_variants_provider_impl/2,
         com_day_cq_wcm_core_impl_version_manager_impl/1, com_day_cq_wcm_core_impl_version_manager_impl/2,
         com_day_cq_wcm_core_impl_version_purge_task/1, com_day_cq_wcm_core_impl_version_purge_task/2,
         com_day_cq_wcm_core_impl_warp_time_warp_filter/1, com_day_cq_wcm_core_impl_warp_time_warp_filter/2,
         com_day_cq_wcm_core_impl_wcm_debug_filter/1, com_day_cq_wcm_core_impl_wcm_debug_filter/2,
         com_day_cq_wcm_core_impl_wcm_developer_mode_filter/1, com_day_cq_wcm_core_impl_wcm_developer_mode_filter/2,
         com_day_cq_wcm_core_mvt_mvt_statistics_impl/1, com_day_cq_wcm_core_mvt_mvt_statistics_impl/2,
         com_day_cq_wcm_core_stats_page_view_statistics_impl/1, com_day_cq_wcm_core_stats_page_view_statistics_impl/2,
         com_day_cq_wcm_core_wcm_request_filter/1, com_day_cq_wcm_core_wcm_request_filter/2,
         com_day_cq_wcm_designimporter_design_package_importer/1, com_day_cq_wcm_designimporter_design_package_importer/2,
         com_day_cq_wcm_designimporter_impl_canvas_builder_impl/1, com_day_cq_wcm_designimporter_impl_canvas_builder_impl/2,
         com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler/1, com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler/2,
         com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl/1, com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl/2,
         com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl/1, com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl/2,
         com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone/1, com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone/2,
         com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon/1, com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon/2,
         com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han/1, com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han/2,
         com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle/1, com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle/2,
         com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand/1, com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand/2,
         com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen/1, com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen/2,
         com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler/1, com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler/2,
         com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t/1, com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t/2,
         com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle/1, com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle/2,
         com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle/1, com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle/2,
         com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h/1, com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h/2,
         com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone/1, com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone/2,
         com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand/1, com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand/2,
         com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl/1, com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl/2,
         com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component/1, com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component/2,
         com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen/1, com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen/2,
         com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl/1, com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl/2,
         com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet/1, com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet/2,
         com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor/1, com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor/2,
         com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet/1, com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet/2,
         com_day_cq_wcm_foundation_forms_impl_mail_servlet/1, com_day_cq_wcm_foundation_forms_impl_mail_servlet/2,
         com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet/1, com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet/2,
         com_day_cq_wcm_foundation_impl_http_auth_handler/1, com_day_cq_wcm_foundation_impl_http_auth_handler/2,
         com_day_cq_wcm_foundation_impl_page_impressions_tracker/1, com_day_cq_wcm_foundation_impl_page_impressions_tracker/2,
         com_day_cq_wcm_foundation_impl_page_redirect_servlet/1, com_day_cq_wcm_foundation_impl_page_redirect_servlet/2,
         com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist/1, com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist/2,
         com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl/1, com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl/2,
         com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory/1, com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory/2,
         com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter/1, com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter/2,
         com_day_cq_wcm_msm_impl_actions_content_copy_action_factory/1, com_day_cq_wcm_msm_impl_actions_content_copy_action_factory/2,
         com_day_cq_wcm_msm_impl_actions_content_delete_action_factory/1, com_day_cq_wcm_msm_impl_actions_content_delete_action_factory/2,
         com_day_cq_wcm_msm_impl_actions_content_update_action_factory/1, com_day_cq_wcm_msm_impl_actions_content_update_action_factory/2,
         com_day_cq_wcm_msm_impl_actions_order_children_action_factory/1, com_day_cq_wcm_msm_impl_actions_order_children_action_factory/2,
         com_day_cq_wcm_msm_impl_actions_page_move_action_factory/1, com_day_cq_wcm_msm_impl_actions_page_move_action_factory/2,
         com_day_cq_wcm_msm_impl_actions_references_update_action_factory/1, com_day_cq_wcm_msm_impl_actions_references_update_action_factory/2,
         com_day_cq_wcm_msm_impl_actions_version_copy_action_factory/1, com_day_cq_wcm_msm_impl_actions_version_copy_action_factory/2,
         com_day_cq_wcm_msm_impl_live_relationship_manager_impl/1, com_day_cq_wcm_msm_impl_live_relationship_manager_impl/2,
         com_day_cq_wcm_msm_impl_rollout_manager_impl/1, com_day_cq_wcm_msm_impl_rollout_manager_impl/2,
         com_day_cq_wcm_msm_impl_servlets_audit_log_servlet/1, com_day_cq_wcm_msm_impl_servlets_audit_log_servlet/2,
         com_day_cq_wcm_notification_email_impl_email_channel/1, com_day_cq_wcm_notification_email_impl_email_channel/2,
         com_day_cq_wcm_notification_impl_notification_manager_impl/1, com_day_cq_wcm_notification_impl_notification_manager_impl/2,
         com_day_cq_wcm_scripting_impl_bvp_manager/1, com_day_cq_wcm_scripting_impl_bvp_manager/2,
         com_day_cq_wcm_undo_undo_config/1, com_day_cq_wcm_undo_undo_config/2,
         com_day_cq_wcm_webservicesupport_impl_replication_event_listener/1, com_day_cq_wcm_webservicesupport_impl_replication_event_listener/2,
         com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl/1, com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl/2,
         com_day_cq_wcm_workflow_impl_workflow_package_info_provider/1, com_day_cq_wcm_workflow_impl_workflow_package_info_provider/2,
         com_day_cq_widget_impl_html_library_manager_impl/1, com_day_cq_widget_impl_html_library_manager_impl/2,
         com_day_cq_widget_impl_widget_extension_provider_impl/1, com_day_cq_widget_impl_widget_extension_provider_impl/2,
         com_day_cq_workflow_impl_email_e_mail_notification_service/1, com_day_cq_workflow_impl_email_e_mail_notification_service/2,
         com_day_cq_workflow_impl_email_task_e_mail_notification_service/1, com_day_cq_workflow_impl_email_task_e_mail_notification_service/2,
         com_day_crx_security_token_impl_impl_token_authentication_handler/1, com_day_crx_security_token_impl_impl_token_authentication_handler/2,
         com_day_crx_security_token_impl_token_cleanup_task/1, com_day_crx_security_token_impl_token_cleanup_task/2,
         guide_localization_service/1, guide_localization_service/2,
         messaging_user_component_factory/1, messaging_user_component_factory/2,
         org_apache_aries_jmx_framework_state_config/1, org_apache_aries_jmx_framework_state_config/2,
         org_apache_felix_eventadmin_impl_event_admin/1, org_apache_felix_eventadmin_impl_event_admin/2,
         org_apache_felix_http/1, org_apache_felix_http/2,
         org_apache_felix_http_sslfilter_ssl_filter/1, org_apache_felix_http_sslfilter_ssl_filter/2,
         org_apache_felix_jaas_configuration_factory/1, org_apache_felix_jaas_configuration_factory/2,
         org_apache_felix_jaas_configuration_spi/1, org_apache_felix_jaas_configuration_spi/2,
         org_apache_felix_scr_scr_service/1, org_apache_felix_scr_scr_service/2,
         org_apache_felix_systemready_impl_components_check/1, org_apache_felix_systemready_impl_components_check/2,
         org_apache_felix_systemready_impl_framework_start_check/1, org_apache_felix_systemready_impl_framework_start_check/2,
         org_apache_felix_systemready_impl_services_check/1, org_apache_felix_systemready_impl_services_check/2,
         org_apache_felix_systemready_impl_servlet_system_alive_servlet/1, org_apache_felix_systemready_impl_servlet_system_alive_servlet/2,
         org_apache_felix_systemready_impl_servlet_system_ready_servlet/1, org_apache_felix_systemready_impl_servlet_system_ready_servlet/2,
         org_apache_felix_systemready_system_ready_monitor/1, org_apache_felix_systemready_system_ready_monitor/2,
         org_apache_felix_webconsole_internal_servlet_osgi_manager/1, org_apache_felix_webconsole_internal_servlet_osgi_manager/2,
         org_apache_felix_webconsole_plugins_event_internal_plugin_servlet/1, org_apache_felix_webconsole_plugins_event_internal_plugin_servlet/2,
         org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co/1, org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co/2,
         org_apache_http_proxyconfigurator/1, org_apache_http_proxyconfigurator/2,
         org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider/1, org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider/2,
         org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store/1, org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store/2,
         org_apache_jackrabbit_oak_plugins_document_document_node_store_service/1, org_apache_jackrabbit_oak_plugins_document_document_node_store_service/2,
         org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre/1, org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre/2,
         org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac/1, org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac/2,
         org_apache_jackrabbit_oak_plugins_index_async_indexer_service/1, org_apache_jackrabbit_oak_plugins_index_async_indexer_service/2,
         org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv/1, org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv/2,
         org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co/1, org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co/2,
         org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers/1, org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers/2,
         org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration/1, org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration/2,
         org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf/1, org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf/2,
         org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid/1, org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid/2,
         org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se/1, org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se/2,
         org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory/1, org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory/2,
         org_apache_jackrabbit_oak_plugins_observation_change_collector_provider/1, org_apache_jackrabbit_oak_plugins_observation_change_collector_provider/2,
         org_apache_jackrabbit_oak_query_query_engine_settings_service/1, org_apache_jackrabbit_oak_query_query_engine_settings_service/2,
         org_apache_jackrabbit_oak_security_authentication_authentication_config/1, org_apache_jackrabbit_oak_security_authentication_authentication_config/2,
         org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi/1, org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi/2,
         org_apache_jackrabbit_oak_security_authentication_token_token_configura/1, org_apache_jackrabbit_oak_security_authentication_token_token_configura/2,
         org_apache_jackrabbit_oak_security_authorization_authorization_configur/1, org_apache_jackrabbit_oak_security_authorization_authorization_configur/2,
         org_apache_jackrabbit_oak_security_internal_security_provider_registrati/1, org_apache_jackrabbit_oak_security_internal_security_provider_registrati/2,
         org_apache_jackrabbit_oak_security_user_random_authorizable_node_name/1, org_apache_jackrabbit_oak_security_user_random_authorizable_node_name/2,
         org_apache_jackrabbit_oak_security_user_user_configuration_impl/1, org_apache_jackrabbit_oak_security_user_user_configuration_impl/2,
         org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service/1, org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service/2,
         org_apache_jackrabbit_oak_segment_segment_node_store_factory/1, org_apache_jackrabbit_oak_segment_segment_node_store_factory/2,
         org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service/1, org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service/2,
         org_apache_jackrabbit_oak_segment_segment_node_store_service/1, org_apache_jackrabbit_oak_segment_segment_node_store_service/2,
         org_apache_jackrabbit_oak_segment_standby_store_standby_store_service/1, org_apache_jackrabbit_oak_segment_standby_store_standby_store_service/2,
         org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de/1, org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de/2,
         org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex/1, org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex/2,
         org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr/1, org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr/2,
         org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi/1, org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi/2,
         org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu/1, org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu/2,
         org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable/1, org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable/2,
         org_apache_jackrabbit_vault_packaging_impl_packaging_impl/1, org_apache_jackrabbit_vault_packaging_impl_packaging_impl/2,
         org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry/1, org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry/2,
         org_apache_sling_auth_core_impl_logout_servlet/1, org_apache_sling_auth_core_impl_logout_servlet/2,
         org_apache_sling_caconfig_impl_configuration_bindings_value_provider/1, org_apache_sling_caconfig_impl_configuration_bindings_value_provider/2,
         org_apache_sling_caconfig_impl_configuration_resolver_impl/1, org_apache_sling_caconfig_impl_configuration_resolver_impl/2,
         org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra/1, org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra/2,
         org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra/1, org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra/2,
         org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi/1, org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi/2,
         org_apache_sling_caconfig_impl_override_system_property_configuration_ove/1, org_apache_sling_caconfig_impl_override_system_property_configuration_ove/2,
         org_apache_sling_caconfig_management_impl_configuration_management_setti/1, org_apache_sling_caconfig_management_impl_configuration_management_setti/2,
         org_apache_sling_caconfig_resource_impl_def_default_configuration_resour/1, org_apache_sling_caconfig_resource_impl_def_default_configuration_resour/2,
         org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy/1, org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy/2,
         org_apache_sling_commons_html_internal_tagsoup_html_parser/1, org_apache_sling_commons_html_internal_tagsoup_html_parser/2,
         org_apache_sling_commons_log_log_manager/1, org_apache_sling_commons_log_log_manager/2,
         org_apache_sling_commons_log_log_manager_factory_config/1, org_apache_sling_commons_log_log_manager_factory_config/2,
         org_apache_sling_commons_log_log_manager_factory_writer/1, org_apache_sling_commons_log_log_manager_factory_writer/2,
         org_apache_sling_commons_metrics_internal_log_reporter/1, org_apache_sling_commons_metrics_internal_log_reporter/2,
         org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter/1, org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter/2,
         org_apache_sling_commons_mime_internal_mime_type_service_impl/1, org_apache_sling_commons_mime_internal_mime_type_service_impl/2,
         org_apache_sling_commons_scheduler_impl_quartz_scheduler/1, org_apache_sling_commons_scheduler_impl_quartz_scheduler/2,
         org_apache_sling_commons_scheduler_impl_scheduler_health_check/1, org_apache_sling_commons_scheduler_impl_scheduler_health_check/2,
         org_apache_sling_commons_threads_impl_default_thread_pool_factory/1, org_apache_sling_commons_threads_impl_default_thread_pool_factory/2,
         org_apache_sling_datasource_data_source_factory/1, org_apache_sling_datasource_data_source_factory/2,
         org_apache_sling_datasource_jndi_data_source_factory/1, org_apache_sling_datasource_jndi_data_source_factory/2,
         org_apache_sling_discovery_oak_config/1, org_apache_sling_discovery_oak_config/2,
         org_apache_sling_discovery_oak_synchronized_clocks_health_check/1, org_apache_sling_discovery_oak_synchronized_clocks_health_check/2,
         org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto/1, org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto/2,
         org_apache_sling_distribution_agent_impl_privilege_distribution_request_a/1, org_apache_sling_distribution_agent_impl_privilege_distribution_request_a/2,
         org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory/1, org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory/2,
         org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto/1, org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto/2,
         org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor/1, org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor/2,
         org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory/1, org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory/2,
         org_apache_sling_distribution_monitor_distribution_queue_health_check/1, org_apache_sling_distribution_monitor_distribution_queue_health_check/2,
         org_apache_sling_distribution_packaging_impl_exporter_agent_distributio/1, org_apache_sling_distribution_packaging_impl_exporter_agent_distributio/2,
         org_apache_sling_distribution_packaging_impl_exporter_local_distributio/1, org_apache_sling_distribution_packaging_impl_exporter_local_distributio/2,
         org_apache_sling_distribution_packaging_impl_exporter_remote_distributi/1, org_apache_sling_distribution_packaging_impl_exporter_remote_distributi/2,
         org_apache_sling_distribution_packaging_impl_importer_local_distributio/1, org_apache_sling_distribution_packaging_impl_importer_local_distributio/2,
         org_apache_sling_distribution_packaging_impl_importer_remote_distributi/1, org_apache_sling_distribution_packaging_impl_importer_remote_distributi/2,
         org_apache_sling_distribution_packaging_impl_importer_repository_distri/1, org_apache_sling_distribution_packaging_impl_importer_repository_distri/2,
         org_apache_sling_distribution_resources_impl_distribution_configuration/1, org_apache_sling_distribution_resources_impl_distribution_configuration/2,
         org_apache_sling_distribution_resources_impl_distribution_service_resour/1, org_apache_sling_distribution_resources_impl_distribution_service_resour/2,
         org_apache_sling_distribution_serialization_impl_distribution_package_bu/1, org_apache_sling_distribution_serialization_impl_distribution_package_bu/2,
         org_apache_sling_distribution_serialization_impl_vlt_vault_distribution/1, org_apache_sling_distribution_serialization_impl_vlt_vault_distribution/2,
         org_apache_sling_distribution_transport_impl_user_credentials_distributi/1, org_apache_sling_distribution_transport_impl_user_credentials_distributi/2,
         org_apache_sling_distribution_trigger_impl_distribution_event_distribute/1, org_apache_sling_distribution_trigger_impl_distribution_event_distribute/2,
         org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger/1, org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger/2,
         org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi/1, org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi/2,
         org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig/1, org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig/2,
         org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr/1, org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr/2,
         org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge/1, org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge/2,
         org_apache_sling_engine_impl_auth_sling_authenticator/1, org_apache_sling_engine_impl_auth_sling_authenticator/2,
         org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter/1, org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter/2,
         org_apache_sling_engine_impl_log_request_logger/1, org_apache_sling_engine_impl_log_request_logger/2,
         org_apache_sling_engine_impl_log_request_logger_service/1, org_apache_sling_engine_impl_log_request_logger_service/2,
         org_apache_sling_engine_impl_sling_main_servlet/1, org_apache_sling_engine_impl_sling_main_servlet/2,
         org_apache_sling_engine_parameters/1, org_apache_sling_engine_parameters/2,
         org_apache_sling_event_impl_eventing_thread_pool/1, org_apache_sling_event_impl_eventing_thread_pool/2,
         org_apache_sling_event_impl_jobs_default_job_manager/1, org_apache_sling_event_impl_jobs_default_job_manager/2,
         org_apache_sling_event_impl_jobs_jcr_persistence_handler/1, org_apache_sling_event_impl_jobs_jcr_persistence_handler/2,
         org_apache_sling_event_impl_jobs_job_consumer_manager/1, org_apache_sling_event_impl_jobs_job_consumer_manager/2,
         org_apache_sling_event_jobs_queue_configuration/1, org_apache_sling_event_jobs_queue_configuration/2,
         org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w/1, org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w/2,
         org_apache_sling_featureflags_feature/1, org_apache_sling_featureflags_feature/2,
         org_apache_sling_featureflags_impl_configured_feature/1, org_apache_sling_featureflags_impl_configured_feature/2,
         org_apache_sling_hapi_impl_h_api_util_impl/1, org_apache_sling_hapi_impl_h_api_util_impl/2,
         org_apache_sling_hc_core_impl_composite_health_check/1, org_apache_sling_hc_core_impl_composite_health_check/2,
         org_apache_sling_hc_core_impl_executor_health_check_executor_impl/1, org_apache_sling_hc_core_impl_executor_health_check_executor_impl/2,
         org_apache_sling_hc_core_impl_jmx_attribute_health_check/1, org_apache_sling_hc_core_impl_jmx_attribute_health_check/2,
         org_apache_sling_hc_core_impl_scriptable_health_check/1, org_apache_sling_hc_core_impl_scriptable_health_check/2,
         org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet/1, org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet/2,
         org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer/1, org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer/2,
         org_apache_sling_i18n_impl_i18_n_filter/1, org_apache_sling_i18n_impl_i18_n_filter/2,
         org_apache_sling_i18n_impl_jcr_resource_bundle_provider/1, org_apache_sling_i18n_impl_jcr_resource_bundle_provider/2,
         org_apache_sling_installer_provider_jcr_impl_jcr_installer/1, org_apache_sling_installer_provider_jcr_impl_jcr_installer/2,
         org_apache_sling_jcr_base_internal_login_admin_whitelist/1, org_apache_sling_jcr_base_internal_login_admin_whitelist/2,
         org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment/1, org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment/2,
         org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet/1, org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet/2,
         org_apache_sling_jcr_jackrabbit_server_jndi_registration_support/1, org_apache_sling_jcr_jackrabbit_server_jndi_registration_support/2,
         org_apache_sling_jcr_jackrabbit_server_rmi_registration_support/1, org_apache_sling_jcr_jackrabbit_server_rmi_registration_support/2,
         org_apache_sling_jcr_repoinit_impl_repository_initializer/1, org_apache_sling_jcr_repoinit_impl_repository_initializer/2,
         org_apache_sling_jcr_repoinit_repository_initializer/1, org_apache_sling_jcr_repoinit_repository_initializer/2,
         org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl/1, org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl/2,
         org_apache_sling_jcr_resource_internal_jcr_system_user_validator/1, org_apache_sling_jcr_resource_internal_jcr_system_user_validator/2,
         org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory/1, org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory/2,
         org_apache_sling_jcr_webdav_impl_handler_default_handler_service/1, org_apache_sling_jcr_webdav_impl_handler_default_handler_service/2,
         org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic/1, org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic/2,
         org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet/1, org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet/2,
         org_apache_sling_jmx_provider_impl_jmx_resource_provider/1, org_apache_sling_jmx_provider_impl_jmx_resource_provider/2,
         org_apache_sling_models_impl_model_adapter_factory/1, org_apache_sling_models_impl_model_adapter_factory/2,
         org_apache_sling_models_jacksonexporter_impl_resource_module_provider/1, org_apache_sling_models_jacksonexporter_impl_resource_module_provider/2,
         org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto/1, org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto/2,
         org_apache_sling_resourcemerger_impl_merged_resource_provider_factory/1, org_apache_sling_resourcemerger_impl_merged_resource_provider_factory/2,
         org_apache_sling_resourcemerger_picker_overriding/1, org_apache_sling_resourcemerger_picker_overriding/2,
         org_apache_sling_scripting_core_impl_script_cache_impl/1, org_apache_sling_scripting_core_impl_script_cache_impl/2,
         org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider/1, org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider/2,
         org_apache_sling_scripting_java_impl_java_script_engine_factory/1, org_apache_sling_scripting_java_impl_java_script_engine_factory/2,
         org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa/1, org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa/2,
         org_apache_sling_scripting_jsp_jsp_script_engine_factory/1, org_apache_sling_scripting_jsp_jsp_script_engine_factory/2,
         org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov/1, org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov/2,
         org_apache_sling_security_impl_content_disposition_filter/1, org_apache_sling_security_impl_content_disposition_filter/2,
         org_apache_sling_security_impl_referrer_filter/1, org_apache_sling_security_impl_referrer_filter/2,
         org_apache_sling_serviceusermapping_impl_service_user_mapper_impl/1, org_apache_sling_serviceusermapping_impl_service_user_mapper_impl/2,
         org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended/1, org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended/2,
         org_apache_sling_servlets_get_default_get_servlet/1, org_apache_sling_servlets_get_default_get_servlet/2,
         org_apache_sling_servlets_get_impl_version_version_info_servlet/1, org_apache_sling_servlets_get_impl_version_version_info_servlet/2,
         org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task/1, org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task/2,
         org_apache_sling_servlets_post_impl_sling_post_servlet/1, org_apache_sling_servlets_post_impl_sling_post_servlet/2,
         org_apache_sling_servlets_resolver_sling_servlet_resolver/1, org_apache_sling_servlets_resolver_sling_servlet_resolver/2,
         org_apache_sling_settings_impl_sling_settings_service_impl/1, org_apache_sling_settings_impl_sling_settings_service_impl/2,
         org_apache_sling_startupfilter_impl_startup_filter_impl/1, org_apache_sling_startupfilter_impl_startup_filter_impl/2,
         org_apache_sling_tenant_internal_tenant_provider_impl/1, org_apache_sling_tenant_internal_tenant_provider_impl/2,
         org_apache_sling_tracer_internal_log_tracer/1, org_apache_sling_tracer_internal_log_tracer/2,
         org_apache_sling_xss_impl_xss_filter_impl/1, org_apache_sling_xss_impl_xss_filter_impl/2]).

-define(BASE_URL, "/").

%% @doc 
%% 
-spec adaptive_form_and_interactive_communication_web_channel_configuration(ctx:ctx()) -> {ok, openapi_adaptive_form_and_interactive_communication_web_channel_configuration_info:openapi_adaptive_form_and_interactive_communication_web_channel_configuration_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
adaptive_form_and_interactive_communication_web_channel_configuration(Ctx) ->
    adaptive_form_and_interactive_communication_web_channel_configuration(Ctx, #{}).

-spec adaptive_form_and_interactive_communication_web_channel_configuration(ctx:ctx(), maps:map()) -> {ok, openapi_adaptive_form_and_interactive_communication_web_channel_configuration_info:openapi_adaptive_form_and_interactive_communication_web_channel_configuration_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
adaptive_form_and_interactive_communication_web_channel_configuration(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'showPlaceholder', 'maximumCacheEntries', 'af.scripting.compatversion', 'makeFileNameUnique', 'generatingCompliantData'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec adaptive_form_and_interactive_communication_web_channel_theme_configur(ctx:ctx()) -> {ok, openapi_adaptive_form_and_interactive_communication_web_channel_theme_configur_info:openapi_adaptive_form_and_interactive_communication_web_channel_theme_configur_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
adaptive_form_and_interactive_communication_web_channel_theme_configur(Ctx) ->
    adaptive_form_and_interactive_communication_web_channel_theme_configur(Ctx, #{}).

-spec adaptive_form_and_interactive_communication_web_channel_theme_configur(ctx:ctx(), maps:map()) -> {ok, openapi_adaptive_form_and_interactive_communication_web_channel_theme_configur_info:openapi_adaptive_form_and_interactive_communication_web_channel_theme_configur_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
adaptive_form_and_interactive_communication_web_channel_theme_configur(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'fontList'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec analytics_component_query_cache_service(ctx:ctx()) -> {ok, openapi_analytics_component_query_cache_service_info:openapi_analytics_component_query_cache_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
analytics_component_query_cache_service(Ctx) ->
    analytics_component_query_cache_service(Ctx, #{}).

-spec analytics_component_query_cache_service(ctx:ctx(), maps:map()) -> {ok, openapi_analytics_component_query_cache_service_info:openapi_analytics_component_query_cache_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
analytics_component_query_cache_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/Analytics Component Query Cache Service"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.analytics.component.query.cache.size'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec apache_sling_health_check_result_html_serializer(ctx:ctx()) -> {ok, openapi_apache_sling_health_check_result_html_serializer_info:openapi_apache_sling_health_check_result_html_serializer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
apache_sling_health_check_result_html_serializer(Ctx) ->
    apache_sling_health_check_result_html_serializer(Ctx, #{}).

-spec apache_sling_health_check_result_html_serializer(ctx:ctx(), maps:map()) -> {ok, openapi_apache_sling_health_check_result_html_serializer_info:openapi_apache_sling_health_check_result_html_serializer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
apache_sling_health_check_result_html_serializer(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/Apache Sling Health Check Result HTML Serializer"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'styleString'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration(ctx:ctx()) -> {ok, openapi_com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration_info:openapi_com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration(Ctx) ->
    com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration(Ctx, #{}).

-spec com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration_info:openapi_com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'formsManagerConfig.includeOOTBTemplates', 'formsManagerConfig.includeDeprecatedTemplates'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_aem_transaction_core_impl_transaction_recorder(ctx:ctx()) -> {ok, openapi_com_adobe_aem_transaction_core_impl_transaction_recorder_info:openapi_com_adobe_aem_transaction_core_impl_transaction_recorder_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_aem_transaction_core_impl_transaction_recorder(Ctx) ->
    com_adobe_aem_transaction_core_impl_transaction_recorder(Ctx, #{}).

-spec com_adobe_aem_transaction_core_impl_transaction_recorder(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_aem_transaction_core_impl_transaction_recorder_info:openapi_com_adobe_aem_transaction_core_impl_transaction_recorder_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_aem_transaction_core_impl_transaction_recorder(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'isTransactionRecordingEnabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc(ctx:ctx()) -> {ok, openapi_com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc_info:openapi_com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc(Ctx) ->
    com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc(Ctx, #{}).

-spec com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc_info:openapi_com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.name', 'hc.tags', 'hc.mbean.name'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc(ctx:ctx()) -> {ok, openapi_com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc_info:openapi_com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc(Ctx) ->
    com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc(Ctx, #{}).

-spec com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc_info:openapi_com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.name', 'hc.tags', 'hc.mbean.name'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl(ctx:ctx()) -> {ok, openapi_com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl_info:openapi_com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl(Ctx) ->
    com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl(Ctx, #{}).

-spec com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl_info:openapi_com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'pre-upgrade.maintenance.tasks', 'pre-upgrade.hc.tags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl(ctx:ctx()) -> {ok, openapi_com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl_info:openapi_com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl(Ctx) ->
    com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl(Ctx, #{}).

-spec com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl_info:openapi_com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'root.path', 'fix.inconsistencies'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_account_api_account_management_service(ctx:ctx()) -> {ok, openapi_com_adobe_cq_account_api_account_management_service_info:openapi_com_adobe_cq_account_api_account_management_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_account_api_account_management_service(Ctx) ->
    com_adobe_cq_account_api_account_management_service(Ctx, #{}).

-spec com_adobe_cq_account_api_account_management_service(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_account_api_account_management_service_info:openapi_com_adobe_cq_account_api_account_management_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_account_api_account_management_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.account.api.AccountManagementService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.accountmanager.token.validity.period', 'cq.accountmanager.config.requestnewaccount.mail', 'cq.accountmanager.config.requestnewpwd.mail'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_account_impl_account_management_servlet(ctx:ctx()) -> {ok, openapi_com_adobe_cq_account_impl_account_management_servlet_info:openapi_com_adobe_cq_account_impl_account_management_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_account_impl_account_management_servlet(Ctx) ->
    com_adobe_cq_account_impl_account_management_servlet(Ctx, #{}).

-spec com_adobe_cq_account_impl_account_management_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_account_impl_account_management_servlet_info:openapi_com_adobe_cq_account_impl_account_management_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_account_impl_account_management_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.accountmanager.config.informnewaccount.mail', 'cq.accountmanager.config.informnewpwd.mail'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_address_impl_location_location_list_servlet(ctx:ctx()) -> {ok, openapi_com_adobe_cq_address_impl_location_location_list_servlet_info:openapi_com_adobe_cq_address_impl_location_location_list_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_address_impl_location_location_list_servlet(Ctx) ->
    com_adobe_cq_address_impl_location_location_list_servlet(Ctx, #{}).

-spec com_adobe_cq_address_impl_location_location_list_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_address_impl_location_location_list_servlet_info:openapi_com_adobe_cq_address_impl_location_location_list_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_address_impl_location_location_list_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.address.location.default.maxResults'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_audit_purge_dam(ctx:ctx()) -> {ok, openapi_com_adobe_cq_audit_purge_dam_info:openapi_com_adobe_cq_audit_purge_dam_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_audit_purge_dam(Ctx) ->
    com_adobe_cq_audit_purge_dam(Ctx, #{}).

-spec com_adobe_cq_audit_purge_dam(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_audit_purge_dam_info:openapi_com_adobe_cq_audit_purge_dam_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_audit_purge_dam(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.audit.purge.Dam"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'auditlog.rule.name', 'auditlog.rule.contentpath', 'auditlog.rule.minimumage', 'auditlog.rule.types'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_audit_purge_pages(ctx:ctx()) -> {ok, openapi_com_adobe_cq_audit_purge_pages_info:openapi_com_adobe_cq_audit_purge_pages_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_audit_purge_pages(Ctx) ->
    com_adobe_cq_audit_purge_pages(Ctx, #{}).

-spec com_adobe_cq_audit_purge_pages(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_audit_purge_pages_info:openapi_com_adobe_cq_audit_purge_pages_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_audit_purge_pages(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.audit.purge.Pages"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'auditlog.rule.name', 'auditlog.rule.contentpath', 'auditlog.rule.minimumage', 'auditlog.rule.types'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_audit_purge_replication(ctx:ctx()) -> {ok, openapi_com_adobe_cq_audit_purge_replication_info:openapi_com_adobe_cq_audit_purge_replication_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_audit_purge_replication(Ctx) ->
    com_adobe_cq_audit_purge_replication(Ctx, #{}).

-spec com_adobe_cq_audit_purge_replication(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_audit_purge_replication_info:openapi_com_adobe_cq_audit_purge_replication_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_audit_purge_replication(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.audit.purge.Replication"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'auditlog.rule.name', 'auditlog.rule.contentpath', 'auditlog.rule.minimumage', 'auditlog.rule.types'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter(ctx:ctx()) -> {ok, openapi_com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter_info:openapi_com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter(Ctx) ->
    com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter(Ctx, #{}).

-spec com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter_info:openapi_com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'keypair.id', 'keypair.alias', 'cdnrewriter.attributes', 'cdn.rewriter.distribution.domain'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl_info:openapi_com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl(Ctx) ->
    com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl(Ctx, #{}).

-spec com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl_info:openapi_com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cdn.config.distribution.domain', 'cdn.config.enable.rewriting', 'cdn.config.path.prefixes', 'cdn.config.cdnttl', 'cdn.config.application.protocol'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_cdn_rewriter_impl_cdn_rewriter(ctx:ctx()) -> {ok, openapi_com_adobe_cq_cdn_rewriter_impl_cdn_rewriter_info:openapi_com_adobe_cq_cdn_rewriter_impl_cdn_rewriter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_cdn_rewriter_impl_cdn_rewriter(Ctx) ->
    com_adobe_cq_cdn_rewriter_impl_cdn_rewriter(Ctx, #{}).

-spec com_adobe_cq_cdn_rewriter_impl_cdn_rewriter(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_cdn_rewriter_impl_cdn_rewriter_info:openapi_com_adobe_cq_cdn_rewriter_impl_cdn_rewriter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_cdn_rewriter_impl_cdn_rewriter(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'cdnrewriter.attributes', 'cdn.rewriter.distribution.domain'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle(ctx:ctx()) -> {ok, openapi_com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle_info:openapi_com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle(Ctx) ->
    com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle(Ctx, #{}).

-spec com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle_info:openapi_com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'flush.agents'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_commerce_impl_asset_dynamic_image_handler(ctx:ctx()) -> {ok, openapi_com_adobe_cq_commerce_impl_asset_dynamic_image_handler_info:openapi_com_adobe_cq_commerce_impl_asset_dynamic_image_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_commerce_impl_asset_dynamic_image_handler(Ctx) ->
    com_adobe_cq_commerce_impl_asset_dynamic_image_handler(Ctx, #{}).

-spec com_adobe_cq_commerce_impl_asset_dynamic_image_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_commerce_impl_asset_dynamic_image_handler_info:openapi_com_adobe_cq_commerce_impl_asset_dynamic_image_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_commerce_impl_asset_dynamic_image_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.commerce.asset.handler.active', 'cq.commerce.asset.handler.name'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl_info:openapi_com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl(Ctx) ->
    com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl(Ctx, #{}).

-spec com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl_info:openapi_com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.commerce.asset.handler.fallback'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_commerce_impl_asset_static_image_handler(ctx:ctx()) -> {ok, openapi_com_adobe_cq_commerce_impl_asset_static_image_handler_info:openapi_com_adobe_cq_commerce_impl_asset_static_image_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_commerce_impl_asset_static_image_handler(Ctx) ->
    com_adobe_cq_commerce_impl_asset_static_image_handler(Ctx, #{}).

-spec com_adobe_cq_commerce_impl_asset_static_image_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_commerce_impl_asset_static_image_handler_info:openapi_com_adobe_cq_commerce_impl_asset_static_image_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_commerce_impl_asset_static_image_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.commerce.asset.handler.active', 'cq.commerce.asset.handler.name'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_commerce_impl_asset_video_handler(ctx:ctx()) -> {ok, openapi_com_adobe_cq_commerce_impl_asset_video_handler_info:openapi_com_adobe_cq_commerce_impl_asset_video_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_commerce_impl_asset_video_handler(Ctx) ->
    com_adobe_cq_commerce_impl_asset_video_handler(Ctx, #{}).

-spec com_adobe_cq_commerce_impl_asset_video_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_commerce_impl_asset_video_handler_info:openapi_com_adobe_cq_commerce_impl_asset_video_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_commerce_impl_asset_video_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.commerce.asset.handler.active', 'cq.commerce.asset.handler.name'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_commerce_impl_promotion_promotion_manager_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_commerce_impl_promotion_promotion_manager_impl_info:openapi_com_adobe_cq_commerce_impl_promotion_promotion_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_commerce_impl_promotion_promotion_manager_impl(Ctx) ->
    com_adobe_cq_commerce_impl_promotion_promotion_manager_impl(Ctx, #{}).

-spec com_adobe_cq_commerce_impl_promotion_promotion_manager_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_commerce_impl_promotion_promotion_manager_impl_info:openapi_com_adobe_cq_commerce_impl_promotion_promotion_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_commerce_impl_promotion_promotion_manager_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.commerce.promotion.root'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl_info:openapi_com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl(Ctx) ->
    com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl(Ctx, #{}).

-spec com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl_info:openapi_com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.commerce.cataloggenerator.bucketsize', 'cq.commerce.cataloggenerator.bucketname', 'cq.commerce.cataloggenerator.excludedtemplateproperties'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_commerce_pim_impl_page_event_listener(ctx:ctx()) -> {ok, openapi_com_adobe_cq_commerce_pim_impl_page_event_listener_info:openapi_com_adobe_cq_commerce_pim_impl_page_event_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_commerce_pim_impl_page_event_listener(Ctx) ->
    com_adobe_cq_commerce_pim_impl_page_event_listener(Ctx, #{}).

-spec com_adobe_cq_commerce_pim_impl_page_event_listener(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_commerce_pim_impl_page_event_listener_info:openapi_com_adobe_cq_commerce_pim_impl_page_event_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_commerce_pim_impl_page_event_listener(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.commerce.pageeventlistener.enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl_info:openapi_com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl(Ctx) ->
    com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl(Ctx, #{}).

-spec com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl_info:openapi_com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'Feed generator algorithm'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_contentinsight_impl_reporting_services_settings_provider(ctx:ctx()) -> {ok, openapi_com_adobe_cq_contentinsight_impl_reporting_services_settings_provider_info:openapi_com_adobe_cq_contentinsight_impl_reporting_services_settings_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_contentinsight_impl_reporting_services_settings_provider(Ctx) ->
    com_adobe_cq_contentinsight_impl_reporting_services_settings_provider(Ctx, #{}).

-spec com_adobe_cq_contentinsight_impl_reporting_services_settings_provider(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_contentinsight_impl_reporting_services_settings_provider_info:openapi_com_adobe_cq_contentinsight_impl_reporting_services_settings_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_contentinsight_impl_reporting_services_settings_provider(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'reportingservices.url'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet(ctx:ctx()) -> {ok, openapi_com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet_info:openapi_com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet(Ctx) ->
    com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet(Ctx, #{}).

-spec com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet_info:openapi_com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'brightedge.url'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle(ctx:ctx()) -> {ok, openapi_com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle_info:openapi_com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle(Ctx) ->
    com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle(Ctx, #{}).

-spec com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle_info:openapi_com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'reportingservices.proxy.whitelist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_dam_cfm_impl_component_component_config_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_dam_cfm_impl_component_component_config_impl_info:openapi_com_adobe_cq_dam_cfm_impl_component_component_config_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_cfm_impl_component_component_config_impl(Ctx) ->
    com_adobe_cq_dam_cfm_impl_component_component_config_impl(Ctx, #{}).

-spec com_adobe_cq_dam_cfm_impl_component_component_config_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_dam_cfm_impl_component_component_config_impl_info:openapi_com_adobe_cq_dam_cfm_impl_component_component_config_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_cfm_impl_component_component_config_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'dam.cfm.component.resourceType', 'dam.cfm.component.fileReferenceProp', 'dam.cfm.component.elementsProp', 'dam.cfm.component.variationProp'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_dam_cfm_impl_conf_feature_config_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_dam_cfm_impl_conf_feature_config_impl_info:openapi_com_adobe_cq_dam_cfm_impl_conf_feature_config_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_cfm_impl_conf_feature_config_impl(Ctx) ->
    com_adobe_cq_dam_cfm_impl_conf_feature_config_impl(Ctx, #{}).

-spec com_adobe_cq_dam_cfm_impl_conf_feature_config_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_dam_cfm_impl_conf_feature_config_impl_info:openapi_com_adobe_cq_dam_cfm_impl_conf_feature_config_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_cfm_impl_conf_feature_config_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'dam.cfm.resourceTypes', 'dam.cfm.referenceProperties'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor(ctx:ctx()) -> {ok, openapi_com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor_info:openapi_com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor(Ctx) ->
    com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor(Ctx, #{}).

-spec com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor_info:openapi_com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'pipeline.type'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter(ctx:ctx()) -> {ok, openapi_com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter_info:openapi_com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter(Ctx) ->
    com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter(Ctx, #{}).

-spec com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter_info:openapi_com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'pipeline.type'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter(ctx:ctx()) -> {ok, openapi_com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter_info:openapi_com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter(Ctx) ->
    com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter(Ctx, #{}).

-spec com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter_info:openapi_com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'pipeline.type'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl_info:openapi_com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl(Ctx) ->
    com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl(Ctx, #{}).

-spec com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl_info:openapi_com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'maxMemory'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker(ctx:ctx()) -> {ok, openapi_com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker_info:openapi_com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker(Ctx) ->
    com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker(Ctx, #{}).

-spec com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker_info:openapi_com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'dmreplicateonmodify.enabled', 'dmreplicateonmodify.forcesyncdeletes'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl_info:openapi_com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl(Ctx) ->
    com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl(Ctx, #{}).

-spec com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl_info:openapi_com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'com.adobe.dam.mac.sync.client.so.timeout'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl_info:openapi_com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl(Ctx) ->
    com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl(Ctx, #{}).

-spec com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl_info:openapi_com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths', 'com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions', 'com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms', 'com.adobe.cq.dam.mac.sync.damsyncservice.platform'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_dam_processor_nui_impl_nui_asset_processor(ctx:ctx()) -> {ok, openapi_com_adobe_cq_dam_processor_nui_impl_nui_asset_processor_info:openapi_com_adobe_cq_dam_processor_nui_impl_nui_asset_processor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_processor_nui_impl_nui_asset_processor(Ctx) ->
    com_adobe_cq_dam_processor_nui_impl_nui_asset_processor(Ctx, #{}).

-spec com_adobe_cq_dam_processor_nui_impl_nui_asset_processor(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_dam_processor_nui_impl_nui_asset_processor_info:openapi_com_adobe_cq_dam_processor_nui_impl_nui_asset_processor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_processor_nui_impl_nui_asset_processor(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'nuiEnabled', 'nuiServiceUrl', 'nuiApiKey'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_dam_s7imaging_impl_is_image_server_component(ctx:ctx()) -> {ok, openapi_com_adobe_cq_dam_s7imaging_impl_is_image_server_component_info:openapi_com_adobe_cq_dam_s7imaging_impl_is_image_server_component_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_s7imaging_impl_is_image_server_component(Ctx) ->
    com_adobe_cq_dam_s7imaging_impl_is_image_server_component(Ctx, #{}).

-spec com_adobe_cq_dam_s7imaging_impl_is_image_server_component(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_dam_s7imaging_impl_is_image_server_component_info:openapi_com_adobe_cq_dam_s7imaging_impl_is_image_server_component_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_s7imaging_impl_is_image_server_component(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'TcpPort', 'AllowRemoteAccess', 'MaxRenderRgnPixels', 'MaxMessageSize', 'RandomAccessUrlTimeout', 'WorkerThreads'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet(ctx:ctx()) -> {ok, openapi_com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet_info:openapi_com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet(Ctx) ->
    com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet(Ctx, #{}).

-spec com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet_info:openapi_com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cache.enable', 'cache.rootPaths', 'cache.maxSize', 'cache.maxEntries'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_dam_webdav_impl_io_asset_io_handler(ctx:ctx()) -> {ok, openapi_com_adobe_cq_dam_webdav_impl_io_asset_io_handler_info:openapi_com_adobe_cq_dam_webdav_impl_io_asset_io_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_webdav_impl_io_asset_io_handler(Ctx) ->
    com_adobe_cq_dam_webdav_impl_io_asset_io_handler(Ctx, #{}).

-spec com_adobe_cq_dam_webdav_impl_io_asset_io_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_dam_webdav_impl_io_asset_io_handler_info:openapi_com_adobe_cq_dam_webdav_impl_io_asset_io_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_webdav_impl_io_asset_io_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'pathPrefix', 'createVersion'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job(ctx:ctx()) -> {ok, openapi_com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job_info:openapi_com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job(Ctx) ->
    com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job(Ctx, #{}).

-spec com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job_info:openapi_com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.webdav.version.linking.enable', 'cq.dam.webdav.version.linking.scheduler.period', 'cq.dam.webdav.version.linking.staging.timeout'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_dam_webdav_impl_io_special_files_handler(ctx:ctx()) -> {ok, openapi_com_adobe_cq_dam_webdav_impl_io_special_files_handler_info:openapi_com_adobe_cq_dam_webdav_impl_io_special_files_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_webdav_impl_io_special_files_handler(Ctx) ->
    com_adobe_cq_dam_webdav_impl_io_special_files_handler(Ctx, #{}).

-spec com_adobe_cq_dam_webdav_impl_io_special_files_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_dam_webdav_impl_io_special_files_handler_info:openapi_com_adobe_cq_dam_webdav_impl_io_special_files_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dam_webdav_impl_io_special_files_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_deserfw_impl_deserialization_firewall_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_deserfw_impl_deserialization_firewall_impl_info:openapi_com_adobe_cq_deserfw_impl_deserialization_firewall_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_deserfw_impl_deserialization_firewall_impl(Ctx) ->
    com_adobe_cq_deserfw_impl_deserialization_firewall_impl(Ctx, #{}).

-spec com_adobe_cq_deserfw_impl_deserialization_firewall_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_deserfw_impl_deserialization_firewall_impl_info:openapi_com_adobe_cq_deserfw_impl_deserialization_firewall_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_deserfw_impl_deserialization_firewall_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'firewall.deserialization.whitelist', 'firewall.deserialization.blacklist', 'firewall.deserialization.diagnostics'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_dtm_impl_service_dtm_web_service_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_dtm_impl_service_dtm_web_service_impl_info:openapi_com_adobe_cq_dtm_impl_service_dtm_web_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dtm_impl_service_dtm_web_service_impl(Ctx) ->
    com_adobe_cq_dtm_impl_service_dtm_web_service_impl(Ctx, #{}).

-spec com_adobe_cq_dtm_impl_service_dtm_web_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_dtm_impl_service_dtm_web_service_impl_info:openapi_com_adobe_cq_dtm_impl_service_dtm_web_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dtm_impl_service_dtm_web_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'connection.timeout', 'socket.timeout'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet(ctx:ctx()) -> {ok, openapi_com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet_info:openapi_com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet(Ctx) ->
    com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet(Ctx, #{}).

-spec com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet_info:openapi_com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'dtm.staging.ip.whitelist', 'dtm.production.ip.whitelist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_dtm_reactor_impl_service_web_service_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_dtm_reactor_impl_service_web_service_impl_info:openapi_com_adobe_cq_dtm_reactor_impl_service_web_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dtm_reactor_impl_service_web_service_impl(Ctx) ->
    com_adobe_cq_dtm_reactor_impl_service_web_service_impl(Ctx, #{}).

-spec com_adobe_cq_dtm_reactor_impl_service_web_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_dtm_reactor_impl_service_web_service_impl_info:openapi_com_adobe_cq_dtm_reactor_impl_service_web_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_dtm_reactor_impl_service_web_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'endpointUri', 'connectionTimeout', 'socketTimeout'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_experiencelog_impl_experience_log_config_servlet(ctx:ctx()) -> {ok, openapi_com_adobe_cq_experiencelog_impl_experience_log_config_servlet_info:openapi_com_adobe_cq_experiencelog_impl_experience_log_config_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_experiencelog_impl_experience_log_config_servlet(Ctx) ->
    com_adobe_cq_experiencelog_impl_experience_log_config_servlet(Ctx, #{}).

-spec com_adobe_cq_experiencelog_impl_experience_log_config_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_experiencelog_impl_experience_log_config_servlet_info:openapi_com_adobe_cq_experiencelog_impl_experience_log_config_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_experiencelog_impl_experience_log_config_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enabled', 'disabledForGroups'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_hc_content_packages_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_cq_hc_content_packages_health_check_info:openapi_com_adobe_cq_hc_content_packages_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_hc_content_packages_health_check(Ctx) ->
    com_adobe_cq_hc_content_packages_health_check(Ctx, #{}).

-spec com_adobe_cq_hc_content_packages_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_hc_content_packages_health_check_info:openapi_com_adobe_cq_hc_content_packages_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_hc_content_packages_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.name', 'hc.tags', 'hc.mbean.name', 'package.names'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_history_impl_history_request_filter(ctx:ctx()) -> {ok, openapi_com_adobe_cq_history_impl_history_request_filter_info:openapi_com_adobe_cq_history_impl_history_request_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_history_impl_history_request_filter(Ctx) ->
    com_adobe_cq_history_impl_history_request_filter(Ctx, #{}).

-spec com_adobe_cq_history_impl_history_request_filter(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_history_impl_history_request_filter_info:openapi_com_adobe_cq_history_impl_history_request_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_history_impl_history_request_filter(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'history.requestFilter.excludedSelectors', 'history.requestFilter.excludedExtensions'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_history_impl_history_service_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_history_impl_history_service_impl_info:openapi_com_adobe_cq_history_impl_history_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_history_impl_history_service_impl(Ctx) ->
    com_adobe_cq_history_impl_history_service_impl(Ctx, #{}).

-spec com_adobe_cq_history_impl_history_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_history_impl_history_service_impl_info:openapi_com_adobe_cq_history_impl_history_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_history_impl_history_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'history.service.resourceTypes', 'history.service.pathFilter'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_inbox_impl_typeprovider_item_type_provider(ctx:ctx()) -> {ok, openapi_com_adobe_cq_inbox_impl_typeprovider_item_type_provider_info:openapi_com_adobe_cq_inbox_impl_typeprovider_item_type_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_inbox_impl_typeprovider_item_type_provider(Ctx) ->
    com_adobe_cq_inbox_impl_typeprovider_item_type_provider(Ctx, #{}).

-spec com_adobe_cq_inbox_impl_typeprovider_item_type_provider(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_inbox_impl_typeprovider_item_type_provider_info:openapi_com_adobe_cq_inbox_impl_typeprovider_item_type_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_inbox_impl_typeprovider_item_type_provider(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'inbox.impl.typeprovider.registrypaths', 'inbox.impl.typeprovider.legacypaths', 'inbox.impl.typeprovider.defaulturl.failureitem', 'inbox.impl.typeprovider.defaulturl.workitem', 'inbox.impl.typeprovider.defaulturl.task'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_projects_impl_servlet_project_image_servlet(ctx:ctx()) -> {ok, openapi_com_adobe_cq_projects_impl_servlet_project_image_servlet_info:openapi_com_adobe_cq_projects_impl_servlet_project_image_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_projects_impl_servlet_project_image_servlet(Ctx) ->
    com_adobe_cq_projects_impl_servlet_project_image_servlet(Ctx, #{}).

-spec com_adobe_cq_projects_impl_servlet_project_image_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_projects_impl_servlet_project_image_servlet_info:openapi_com_adobe_cq_projects_impl_servlet_project_image_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_projects_impl_servlet_project_image_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'image.quality', 'image.supported.resolutions'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_projects_purge_scheduler(ctx:ctx()) -> {ok, openapi_com_adobe_cq_projects_purge_scheduler_info:openapi_com_adobe_cq_projects_purge_scheduler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_projects_purge_scheduler(Ctx) ->
    com_adobe_cq_projects_purge_scheduler(Ctx, #{}).

-spec com_adobe_cq_projects_purge_scheduler(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_projects_purge_scheduler_info:openapi_com_adobe_cq_projects_purge_scheduler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_projects_purge_scheduler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.projects.purge.Scheduler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'scheduledpurge.name', 'scheduledpurge.purgeActive', 'scheduledpurge.templates', 'scheduledpurge.purgeGroups', 'scheduledpurge.purgeAssets', 'scheduledpurge.terminateRunningWorkflows', 'scheduledpurge.daysold', 'scheduledpurge.saveThreshold'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl_info:openapi_com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl(Ctx) ->
    com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl(Ctx, #{}).

-spec com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl_info:openapi_com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'include.paths', 'exporter.user'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl_info:openapi_com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl(Ctx) ->
    com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl(Ctx, #{}).

-spec com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl_info:openapi_com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'com.adobe.cq.screens.analytics.impl.url', 'com.adobe.cq.screens.analytics.impl.apikey', 'com.adobe.cq.screens.analytics.impl.project', 'com.adobe.cq.screens.analytics.impl.environment', 'com.adobe.cq.screens.analytics.impl.sendFrequency'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_screens_device_impl_device_service(ctx:ctx()) -> {ok, openapi_com_adobe_cq_screens_device_impl_device_service_info:openapi_com_adobe_cq_screens_device_impl_device_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_screens_device_impl_device_service(Ctx) ->
    com_adobe_cq_screens_device_impl_device_service(Ctx, #{}).

-spec com_adobe_cq_screens_device_impl_device_service(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_screens_device_impl_device_service_info:openapi_com_adobe_cq_screens_device_impl_device_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_screens_device_impl_device_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'com.adobe.aem.screens.player.pingfrequency', 'com.adobe.aem.screens.device.pasword.specialchars', 'com.adobe.aem.screens.device.pasword.minlowercasechars', 'com.adobe.aem.screens.device.pasword.minuppercasechars', 'com.adobe.aem.screens.device.pasword.minnumberchars', 'com.adobe.aem.screens.device.pasword.minspecialchars', 'com.adobe.aem.screens.device.pasword.minlength'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_screens_device_registration_impl_registration_service_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_screens_device_registration_impl_registration_service_impl_info:openapi_com_adobe_cq_screens_device_registration_impl_registration_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_screens_device_registration_impl_registration_service_impl(Ctx) ->
    com_adobe_cq_screens_device_registration_impl_registration_service_impl(Ctx, #{}).

-spec com_adobe_cq_screens_device_registration_impl_registration_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_screens_device_registration_impl_registration_service_impl_info:openapi_com_adobe_cq_screens_device_registration_impl_registration_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_screens_device_registration_impl_registration_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'deviceRegistrationTimeout'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_screens_impl_handler_channels_update_handler(ctx:ctx()) -> {ok, openapi_com_adobe_cq_screens_impl_handler_channels_update_handler_info:openapi_com_adobe_cq_screens_impl_handler_channels_update_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_screens_impl_handler_channels_update_handler(Ctx) ->
    com_adobe_cq_screens_impl_handler_channels_update_handler(Ctx, #{}).

-spec com_adobe_cq_screens_impl_handler_channels_update_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_screens_impl_handler_channels_update_handler_info:openapi_com_adobe_cq_screens_impl_handler_channels_update_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_screens_impl_handler_channels_update_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.pagesupdatehandler.imageresourcetypes', 'cq.pagesupdatehandler.productresourcetypes', 'cq.pagesupdatehandler.videoresourcetypes', 'cq.pagesupdatehandler.dynamicsequenceresourcetypes', 'cq.pagesupdatehandler.previewmodepaths'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job(ctx:ctx()) -> {ok, openapi_com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job_info:openapi_com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job(Ctx) ->
    com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job(Ctx, #{}).

-spec com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job_info:openapi_com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'scheduler.expression'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl_info:openapi_com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl(Ctx) ->
    com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl(Ctx, #{}).

-spec com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl_info:openapi_com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'com.adobe.aem.screens.impl.remote.request_timeout'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_screens_impl_screens_channel_post_processor(ctx:ctx()) -> {ok, openapi_com_adobe_cq_screens_impl_screens_channel_post_processor_info:openapi_com_adobe_cq_screens_impl_screens_channel_post_processor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_screens_impl_screens_channel_post_processor(Ctx) ->
    com_adobe_cq_screens_impl_screens_channel_post_processor(Ctx, #{}).

-spec com_adobe_cq_screens_impl_screens_channel_post_processor(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_screens_impl_screens_channel_post_processor_info:openapi_com_adobe_cq_screens_impl_screens_channel_post_processor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_screens_impl_screens_channel_post_processor(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'screens.channels.properties.to.remove'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_info:openapi_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl(Ctx) ->
    com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl(Ctx, #{}).

-spec com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_info:openapi_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath', 'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency', 'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout', 'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients', 'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver', 'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport', 'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls', 'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username', 'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider(ctx:ctx()) -> {ok, openapi_com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider_info:openapi_com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider(Ctx) ->
    com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider(Ctx, #{}).

-spec com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider_info:openapi_com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'global.size', 'max.disk.usage', 'persistence.enabled', 'thread.pool.max.size', 'scheduled.thread.pool.max.size', 'graceful.shutdown.timeout', 'queues', 'topics', 'addresses.max.delivery.attempts', 'addresses.expiry.delay', 'addresses.address.full.message.policy', 'addresses.max.size.bytes', 'addresses.page.size.bytes', 'addresses.page.cache.max.size', 'cluster.user', 'cluster.password', 'cluster.call.timeout', 'cluster.call.failover.timeout', 'cluster.client.failure.check.period', 'cluster.notification.attempts', 'cluster.notification.interval', 'id.cache.size', 'cluster.confirmation.window.size', 'cluster.connection.ttl', 'cluster.duplicate.detection', 'cluster.initial.connect.attempts', 'cluster.max.retry.interval', 'cluster.min.large.message.size', 'cluster.producer.window.size', 'cluster.reconnect.attempts', 'cluster.retry.interval', 'cluster.retry.interval.multiplier'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_info:openapi_com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl(Ctx) ->
    com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl(Ctx, #{}).

-spec com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_info:openapi_com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath', 'com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl_info:openapi_com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl(Ctx) ->
    com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl(Ctx, #{}).

-spec com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl_info:openapi_com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'disableSmartSync'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag(ctx:ctx()) -> {ok, openapi_com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag_info:openapi_com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag(Ctx) ->
    com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag(Ctx, #{}).

-spec com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag_info:openapi_com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enableDataTriggeredContent'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch(ctx:ctx()) -> {ok, openapi_com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch_info:openapi_com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch(Ctx) ->
    com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch(Ctx, #{}).

-spec com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch_info:openapi_com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check_info:openapi_com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check(Ctx) ->
    com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check(Ctx, #{}).

-spec com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check_info:openapi_com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check_info:openapi_com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check(Ctx) ->
    com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check(Ctx, #{}).

-spec com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check_info:openapi_com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags', 'dispatcher.address', 'dispatcher.filter.allowed', 'dispatcher.filter.blocked'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_security_hc_packages_impl_example_content_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_cq_security_hc_packages_impl_example_content_health_check_info:openapi_com_adobe_cq_security_hc_packages_impl_example_content_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_security_hc_packages_impl_example_content_health_check(Ctx) ->
    com_adobe_cq_security_hc_packages_impl_example_content_health_check(Ctx, #{}).

-spec com_adobe_cq_security_hc_packages_impl_example_content_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_security_hc_packages_impl_example_content_health_check_info:openapi_com_adobe_cq_security_hc_packages_impl_example_content_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_security_hc_packages_impl_example_content_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check_info:openapi_com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check(Ctx) ->
    com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check(Ctx, #{}).

-spec com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check_info:openapi_com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags', 'webserver.address'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_accountverification_impl_account_management_config_im(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_accountverification_impl_account_management_config_im_info:openapi_com_adobe_cq_social_accountverification_impl_account_management_config_im_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_accountverification_impl_account_management_config_im(Ctx) ->
    com_adobe_cq_social_accountverification_impl_account_management_config_im(Ctx, #{}).

-spec com_adobe_cq_social_accountverification_impl_account_management_config_im(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_accountverification_impl_account_management_config_im_info:openapi_com_adobe_cq_social_accountverification_impl_account_management_config_im_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_accountverification_impl_account_management_config_im(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enable', 'ttl1', 'ttl2'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_activitystreams_client_impl_social_activity_componen(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_activitystreams_client_impl_social_activity_componen_info:openapi_com_adobe_cq_social_activitystreams_client_impl_social_activity_componen_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_activitystreams_client_impl_social_activity_componen(Ctx) ->
    com_adobe_cq_social_activitystreams_client_impl_social_activity_componen(Ctx, #{}).

-spec com_adobe_cq_social_activitystreams_client_impl_social_activity_componen(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_activitystreams_client_impl_social_activity_componen_info:openapi_com_adobe_cq_social_activitystreams_client_impl_social_activity_componen_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_activitystreams_client_impl_social_activity_componen(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'priority'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co_info:openapi_com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co(Ctx) ->
    com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co(Ctx, #{}).

-spec com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co_info:openapi_com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'priority'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler_info:openapi_com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler(Ctx) ->
    com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler(Ctx, #{}).

-spec com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler_info:openapi_com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'event.topics', 'event.filter'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten_info:openapi_com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten(Ctx) ->
    com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten(Ctx, #{}).

-spec com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten_info:openapi_com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'accepted', 'ranked'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s_info:openapi_com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s(Ctx) ->
    com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s(Ctx, #{}).

-spec com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s_info:openapi_com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'ranking', 'enable'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre_info:openapi_com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre(Ctx) ->
    com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre(Ctx, #{}).

-spec com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre_info:openapi_com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'streamPath', 'streamName'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i_info:openapi_com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i(Ctx) ->
    com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i(Ctx, #{}).

-spec com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i_info:openapi_com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'MaxRetry', 'fieldWhitelist', 'attachmentTypeBlacklist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_calendar_client_operationextensions_event_attachmen(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_calendar_client_operationextensions_event_attachmen_info:openapi_com_adobe_cq_social_calendar_client_operationextensions_event_attachmen_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_calendar_client_operationextensions_event_attachmen(Ctx) ->
    com_adobe_cq_social_calendar_client_operationextensions_event_attachmen(Ctx, #{}).

-spec com_adobe_cq_social_calendar_client_operationextensions_event_attachmen(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_calendar_client_operationextensions_event_attachmen_info:openapi_com_adobe_cq_social_calendar_client_operationextensions_event_attachmen_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_calendar_client_operationextensions_event_attachmen(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'attachmentTypeBlacklist', 'extension.order'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_calendar_servlets_time_zone_servlet(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_calendar_servlets_time_zone_servlet_info:openapi_com_adobe_cq_social_calendar_servlets_time_zone_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_calendar_servlets_time_zone_servlet(Ctx) ->
    com_adobe_cq_social_calendar_servlets_time_zone_servlet(Ctx, #{}).

-spec com_adobe_cq_social_calendar_servlets_time_zone_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_calendar_servlets_time_zone_servlet_info:openapi_com_adobe_cq_social_calendar_servlets_time_zone_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_calendar_servlets_time_zone_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'timezones.expirytime'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event_info:openapi_com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event(Ctx) ->
    com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event(Ctx, #{}).

-spec com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event_info:openapi_com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'ranking'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se_info:openapi_com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se(Ctx) ->
    com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se(Ctx, #{}).

-spec com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se_info:openapi_com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'fieldWhitelist', 'attachmentTypeBlacklist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati_info:openapi_com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati(Ctx) ->
    com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati(Ctx, #{}).

-spec com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati_info:openapi_com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'fieldWhitelist', 'attachmentTypeBlacklist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c_info:openapi_com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c(Ctx) ->
    com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c(Ctx, #{}).

-spec com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c_info:openapi_com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'numUserLimit'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos_info:openapi_com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos(Ctx) ->
    com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos(Ctx, #{}).

-spec com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos_info:openapi_com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enableScheduledPostsSearch', 'numberOfMinutes', 'maxSearchLimit'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_commons_cors_cors_authentication_filter(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_commons_cors_cors_authentication_filter_info:openapi_com_adobe_cq_social_commons_cors_cors_authentication_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_cors_cors_authentication_filter(Ctx) ->
    com_adobe_cq_social_commons_cors_cors_authentication_filter(Ctx, #{}).

-spec com_adobe_cq_social_commons_cors_cors_authentication_filter(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_commons_cors_cors_authentication_filter_info:openapi_com_adobe_cq_social_commons_cors_cors_authentication_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_cors_cors_authentication_filter(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cors.enabling'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider_info:openapi_com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider(Ctx) ->
    com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider(Ctx, #{}).

-spec com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider_info:openapi_com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'priorityOrder', 'replyEmailPatterns'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl_info:openapi_com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl(Ctx) ->
    com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl(Ctx, #{}).

-spec com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl_info:openapi_com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'context.path'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener_info:openapi_com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener(Ctx) ->
    com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener(Ctx, #{}).

-spec com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener_info:openapi_com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'event.topics'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider_info:openapi_com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider(Ctx) ->
    com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider(Ctx, #{}).

-spec com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider_info:openapi_com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'priorityOrder', 'replyEmailPatterns'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp_info:openapi_com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp(Ctx) ->
    com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp(Ctx, #{}).

-spec com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp_info:openapi_com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'pattern.time', 'pattern.newline', 'pattern.dayOfMonth', 'pattern.month', 'pattern.year', 'pattern.date', 'pattern.dateTime', 'pattern.email'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp_info:openapi_com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp(Ctx) ->
    com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp(Ctx, #{}).

-spec com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp_info:openapi_com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'email.name', 'email.createPostFromReply', 'email.addCommentIdTo', 'email.subjectMaximumLength', 'email.replyToAddress', 'email.replyToDelimiter', 'email.trackerIdPrefixInSubject', 'email.trackerIdPrefixInBody', 'email.asHTML', 'email.defaultUserName', 'email.templates.rootPath'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_commons_emailreply_impl_email_reply_importer(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_email_reply_importer_info:openapi_com_adobe_cq_social_commons_emailreply_impl_email_reply_importer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_email_reply_importer(Ctx) ->
    com_adobe_cq_social_commons_emailreply_impl_email_reply_importer(Ctx, #{}).

-spec com_adobe_cq_social_commons_emailreply_impl_email_reply_importer(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_email_reply_importer_info:openapi_com_adobe_cq_social_commons_emailreply_impl_email_reply_importer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_email_reply_importer(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'connectProtocol'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider_info:openapi_com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider(Ctx) ->
    com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider(Ctx, #{}).

-spec com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider_info:openapi_com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'priorityOrder', 'replyEmailPatterns'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider_info:openapi_com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider(Ctx) ->
    com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider(Ctx, #{}).

-spec com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider_info:openapi_com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'priorityOrder', 'replyEmailPatterns'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider_info:openapi_com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider(Ctx) ->
    com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider(Ctx, #{}).

-spec com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider_info:openapi_com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'priorityOrder', 'replyEmailPatterns'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider_info:openapi_com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider(Ctx) ->
    com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider(Ctx, #{}).

-spec com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider_info:openapi_com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'priorityOrder', 'replyEmailPatterns'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider_info:openapi_com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider(Ctx) ->
    com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider(Ctx, #{}).

-spec com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider_info:openapi_com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'replyEmailPatterns', 'priorityOrder'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider_info:openapi_com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider(Ctx) ->
    com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider(Ctx, #{}).

-spec com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider_info:openapi_com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'priorityOrder', 'replyEmailPatterns'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload_info:openapi_com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload(Ctx) ->
    com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload(Ctx, #{}).

-spec com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload_info:openapi_com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'numberOfDays', 'ageOfFile'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl_info:openapi_com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl(Ctx) ->
    com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl(Ctx, #{}).

-spec com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl_info:openapi_com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'event.topics', 'event.filter', 'verbs'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit_info:openapi_com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit(Ctx) ->
    com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit(Ctx, #{}).

-spec com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit_info:openapi_com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enable', 'UGCLimit', 'ugcLimitDuration', 'domains', 'toList'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl_info:openapi_com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl(Ctx) ->
    com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl(Ctx, #{}).

-spec com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl_info:openapi_com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'oauth.provider.id', 'oauth.cloud.config.root', 'provider.config.root', 'provider.config.create.tags.enabled', 'provider.config.user.folder', 'provider.config.facebook.fetch.fields', 'provider.config.facebook.fields', 'provider.config.refresh.userdata.enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle_info:openapi_com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle(Ctx) ->
    com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle(Ctx, #{}).

-spec com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle_info:openapi_com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'path', 'service.ranking'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper_info:openapi_com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper(Ctx) ->
    com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper(Ctx, #{}).

-spec com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper_info:openapi_com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'facebook', 'twitter', 'provider.config.user.folder'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl_info:openapi_com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl(Ctx) ->
    com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl(Ctx, #{}).

-spec com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl_info:openapi_com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'oauth.provider.id', 'oauth.cloud.config.root', 'provider.config.root', 'provider.config.user.folder', 'provider.config.twitter.enable.params', 'provider.config.twitter.params', 'provider.config.refresh.userdata.enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_content_fragments_services_impl_communities_fragmen(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_content_fragments_services_impl_communities_fragmen_info:openapi_com_adobe_cq_social_content_fragments_services_impl_communities_fragmen_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_content_fragments_services_impl_communities_fragmen(Ctx) ->
    com_adobe_cq_social_content_fragments_services_impl_communities_fragmen(Ctx, #{}).

-spec com_adobe_cq_social_content_fragments_services_impl_communities_fragmen(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_content_fragments_services_impl_communities_fragmen_info:openapi_com_adobe_cq_social_content_fragments_services_impl_communities_fragmen_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_content_fragments_services_impl_communities_fragmen(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.social.content.fragments.services.enabled', 'cq.social.content.fragments.services.waitTimeSeconds'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory_info:openapi_com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory(Ctx) ->
    com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory(Ctx, #{}).

-spec com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory_info:openapi_com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'version.id', 'cache.on', 'concurrency.level', 'cache.start.size', 'cache.ttl', 'cache.size', 'time.limit'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory_info:openapi_com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory(Ctx) ->
    com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory(Ctx, #{}).

-spec com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory_info:openapi_com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'solr.zk.timeout', 'solr.commit', 'cache.on', 'concurrency.level', 'cache.start.size', 'cache.ttl', 'cache.size'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor_info:openapi_com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor(Ctx) ->
    com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor(Ctx, #{}).

-spec com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor_info:openapi_com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'solr.zk.timeout', 'solr.commit', 'cache.on', 'concurrency.level', 'cache.start.size', 'cache.ttl', 'cache.size'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f_info:openapi_com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f(Ctx) ->
    com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f(Ctx, #{}).

-spec com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f_info:openapi_com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'isMemberCheck'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto_info:openapi_com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto(Ctx) ->
    com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto(Ctx, #{}).

-spec com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto_info:openapi_com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'isMemberCheck'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l_info:openapi_com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l(Ctx) ->
    com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l(Ctx, #{}).

-spec com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l_info:openapi_com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'fieldWhitelist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou_info:openapi_com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou(Ctx) ->
    com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou(Ctx, #{}).

-spec com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou_info:openapi_com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'fieldWhitelist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_enablement_services_impl_author_marker_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_enablement_services_impl_author_marker_impl_info:openapi_com_adobe_cq_social_enablement_services_impl_author_marker_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_enablement_services_impl_author_marker_impl(Ctx) ->
    com_adobe_cq_social_enablement_services_impl_author_marker_impl(Ctx, #{}).

-spec com_adobe_cq_social_enablement_services_impl_author_marker_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_enablement_services_impl_author_marker_impl_info:openapi_com_adobe_cq_social_enablement_services_impl_author_marker_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_enablement_services_impl_author_marker_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge_info:openapi_com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge(Ctx) ->
    com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge(Ctx, #{}).

-spec com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge_info:openapi_com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'sling.servlet.selectors', 'sling.servlet.extensions'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera_info:openapi_com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera(Ctx) ->
    com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera(Ctx, #{}).

-spec com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera_info:openapi_com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'fieldWhitelist', 'attachmentTypeBlacklist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service_info:openapi_com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service(Ctx) ->
    com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service(Ctx, #{}).

-spec com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service_info:openapi_com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'fieldWhitelist', 'attachmentTypeBlacklist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_forum_dispatcher_impl_flush_operations(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_forum_dispatcher_impl_flush_operations_info:openapi_com_adobe_cq_social_forum_dispatcher_impl_flush_operations_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_forum_dispatcher_impl_flush_operations(Ctx) ->
    com_adobe_cq_social_forum_dispatcher_impl_flush_operations(Ctx, #{}).

-spec com_adobe_cq_social_forum_dispatcher_impl_flush_operations(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_forum_dispatcher_impl_flush_operations_info:openapi_com_adobe_cq_social_forum_dispatcher_impl_flush_operations_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_forum_dispatcher_impl_flush_operations(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'extension.order', 'flush.forumontopic'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_group_client_impl_community_group_collection_componen(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_group_client_impl_community_group_collection_componen_info:openapi_com_adobe_cq_social_group_client_impl_community_group_collection_componen_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_group_client_impl_community_group_collection_componen(Ctx) ->
    com_adobe_cq_social_group_client_impl_community_group_collection_componen(Ctx, #{}).

-spec com_adobe_cq_social_group_client_impl_community_group_collection_componen(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_group_client_impl_community_group_collection_componen_info:openapi_com_adobe_cq_social_group_client_impl_community_group_collection_componen_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_group_client_impl_community_group_collection_componen(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'group.listing.pagination.enable', 'group.listing.lazyloading.enable', 'page.size', 'priority'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_group_impl_group_service_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_group_impl_group_service_impl_info:openapi_com_adobe_cq_social_group_impl_group_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_group_impl_group_service_impl(Ctx) ->
    com_adobe_cq_social_group_impl_group_service_impl(Ctx, #{}).

-spec com_adobe_cq_social_group_impl_group_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_group_impl_group_service_impl_info:openapi_com_adobe_cq_social_group_impl_group_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_group_impl_group_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'maxWaitTime', 'minWaitBetweenRetries'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_handlebars_guava_template_cache_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_handlebars_guava_template_cache_impl_info:openapi_com_adobe_cq_social_handlebars_guava_template_cache_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_handlebars_guava_template_cache_impl(Ctx) ->
    com_adobe_cq_social_handlebars_guava_template_cache_impl(Ctx, #{}).

-spec com_adobe_cq_social_handlebars_guava_template_cache_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_handlebars_guava_template_cache_impl_info:openapi_com_adobe_cq_social_handlebars_guava_template_cache_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_handlebars_guava_template_cache_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'parameter.guava.cache.enabled', 'parameter.guava.cache.params', 'parameter.guava.cache.reload', 'service.ranking'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s_info:openapi_com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s(Ctx) ->
    com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s(Ctx, #{}).

-spec com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s_info:openapi_com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'fieldWhitelist', 'attachmentTypeBlacklist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser_info:openapi_com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser(Ctx) ->
    com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser(Ctx, #{}).

-spec com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser_info:openapi_com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'fieldWhitelist', 'attachmentTypeBlacklist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_members_endpoints_impl_community_member_group_profile(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_members_endpoints_impl_community_member_group_profile_info:openapi_com_adobe_cq_social_members_endpoints_impl_community_member_group_profile_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_members_endpoints_impl_community_member_group_profile(Ctx) ->
    com_adobe_cq_social_members_endpoints_impl_community_member_group_profile(Ctx, #{}).

-spec com_adobe_cq_social_members_endpoints_impl_community_member_group_profile(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_members_endpoints_impl_community_member_group_profile_info:openapi_com_adobe_cq_social_members_endpoints_impl_community_member_group_profile_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_members_endpoints_impl_community_member_group_profile(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'fieldWhitelist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o_info:openapi_com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o(Ctx) ->
    com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o(Ctx, #{}).

-spec com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o_info:openapi_com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'fieldWhitelist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_members_impl_community_member_group_profile_component_f(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_members_impl_community_member_group_profile_component_f_info:openapi_com_adobe_cq_social_members_impl_community_member_group_profile_component_f_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_members_impl_community_member_group_profile_component_f(Ctx) ->
    com_adobe_cq_social_members_impl_community_member_group_profile_component_f(Ctx, #{}).

-spec com_adobe_cq_social_members_impl_community_member_group_profile_component_f(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_members_impl_community_member_group_profile_component_f_info:openapi_com_adobe_cq_social_members_impl_community_member_group_profile_component_f_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_members_impl_community_member_group_profile_component_f(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'everyoneLimit', 'priority'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation_info:openapi_com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation(Ctx) ->
    com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation(Ctx, #{}).

-spec com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation_info:openapi_com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'message.properties', 'messageBoxSizeLimit', 'messageCountLimit', 'notifyFailure', 'failureMessageFrom', 'failureTemplatePath', 'maxRetries', 'minWaitBetweenRetries', 'countUpdatePoolSize', 'inbox.path', 'sentitems.path', 'supportAttachments', 'supportGroupMessaging', 'maxTotalRecipients', 'batchSize', 'maxTotalAttachmentSize', 'attachmentTypeBlacklist', 'allowedAttachmentTypes', 'serviceSelector', 'fieldWhitelist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen_info:openapi_com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen(Ctx) ->
    com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen(Ctx, #{}).

-spec com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen_info:openapi_com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'resourceType.filters', 'priority'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social_info:openapi_com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social(Ctx) ->
    com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social(Ctx, #{}).

-spec com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social_info:openapi_com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'priority'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen_info:openapi_com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen(Ctx) ->
    com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen(Ctx, #{}).

-spec com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen_info:openapi_com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'priority'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci_info:openapi_com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci(Ctx) ->
    com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci(Ctx, #{}).

-spec com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci_info:openapi_com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'resourceType.filters', 'priority'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_notifications_impl_mentions_router(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_notifications_impl_mentions_router_info:openapi_com_adobe_cq_social_notifications_impl_mentions_router_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_notifications_impl_mentions_router(Ctx) ->
    com_adobe_cq_social_notifications_impl_mentions_router(Ctx, #{}).

-spec com_adobe_cq_social_notifications_impl_mentions_router(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_notifications_impl_mentions_router_info:openapi_com_adobe_cq_social_notifications_impl_mentions_router_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_notifications_impl_mentions_router(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'event.topics', 'event.filter'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_notifications_impl_notification_manager_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_notifications_impl_notification_manager_impl_info:openapi_com_adobe_cq_social_notifications_impl_notification_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_notifications_impl_notification_manager_impl(Ctx) ->
    com_adobe_cq_social_notifications_impl_notification_manager_impl(Ctx, #{}).

-spec com_adobe_cq_social_notifications_impl_notification_manager_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_notifications_impl_notification_manager_impl_info:openapi_com_adobe_cq_social_notifications_impl_notification_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_notifications_impl_notification_manager_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'max.unread.notification.count'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_notifications_impl_notifications_router(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_notifications_impl_notifications_router_info:openapi_com_adobe_cq_social_notifications_impl_notifications_router_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_notifications_impl_notifications_router(Ctx) ->
    com_adobe_cq_social_notifications_impl_notifications_router(Ctx, #{}).

-spec com_adobe_cq_social_notifications_impl_notifications_router(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_notifications_impl_notifications_router_info:openapi_com_adobe_cq_social_notifications_impl_notifications_router_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_notifications_impl_notifications_router(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'event.topics', 'event.filter'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic_info:openapi_com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic(Ctx) ->
    com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic(Ctx, #{}).

-spec com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic_info:openapi_com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'fieldWhitelist', 'attachmentTypeBlacklist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i_info:openapi_com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i(Ctx) ->
    com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i(Ctx, #{}).

-spec com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i_info:openapi_com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.social.reporting.analytics.polling.importer.interval', 'cq.social.reporting.analytics.polling.importer.pageSize'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m_info:openapi_com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m(Ctx) ->
    com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m(Ctx, #{}).

-spec com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m_info:openapi_com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'report.fetch.delay'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s_info:openapi_com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s(Ctx) ->
    com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s(Ctx, #{}).

-spec com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s_info:openapi_com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.social.console.analytics.sites.mapping', 'priority'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi_info:openapi_com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi(Ctx) ->
    com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi(Ctx, #{}).

-spec com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi_info:openapi_com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'fieldWhitelist', 'attachmentTypeBlacklist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet_info:openapi_com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet(Ctx) ->
    com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet(Ctx, #{}).

-spec com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet_info:openapi_com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'sling.servlet.selectors', 'sling.servlet.extensions'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet_info:openapi_com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet(Ctx) ->
    com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet(Ctx, #{}).

-spec com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet_info:openapi_com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'sling.servlet.selectors', 'sling.servlet.extensions'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_scoring_impl_scoring_event_listener(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_scoring_impl_scoring_event_listener_info:openapi_com_adobe_cq_social_scoring_impl_scoring_event_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_scoring_impl_scoring_event_listener(Ctx) ->
    com_adobe_cq_social_scoring_impl_scoring_event_listener(Ctx, #{}).

-spec com_adobe_cq_social_scoring_impl_scoring_event_listener(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_scoring_impl_scoring_event_listener_info:openapi_com_adobe_cq_social_scoring_impl_scoring_event_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_scoring_impl_scoring_event_listener(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'event.topics', 'event.filter'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl_info:openapi_com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl(Ctx) ->
    com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl(Ctx, #{}).

-spec com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl_info:openapi_com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enableFallback'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_site_endpoints_impl_site_operation_service(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_site_endpoints_impl_site_operation_service_info:openapi_com_adobe_cq_social_site_endpoints_impl_site_operation_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_site_endpoints_impl_site_operation_service(Ctx) ->
    com_adobe_cq_social_site_endpoints_impl_site_operation_service(Ctx, #{}).

-spec com_adobe_cq_social_site_endpoints_impl_site_operation_service(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_site_endpoints_impl_site_operation_service_info:openapi_com_adobe_cq_social_site_endpoints_impl_site_operation_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_site_endpoints_impl_site_operation_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'fieldWhitelist', 'sitePathFilters', 'sitePackageGroup'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_site_impl_analytics_component_configuration_service_im(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_site_impl_analytics_component_configuration_service_im_info:openapi_com_adobe_cq_social_site_impl_analytics_component_configuration_service_im_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_site_impl_analytics_component_configuration_service_im(Ctx) ->
    com_adobe_cq_social_site_impl_analytics_component_configuration_service_im(Ctx, #{}).

-spec com_adobe_cq_social_site_impl_analytics_component_configuration_service_im(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_site_impl_analytics_component_configuration_service_im_info:openapi_com_adobe_cq_social_site_impl_analytics_component_configuration_service_im_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_site_impl_analytics_component_configuration_service_im(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.social.console.analytics.components'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_site_impl_site_configurator_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_site_impl_site_configurator_impl_info:openapi_com_adobe_cq_social_site_impl_site_configurator_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_site_impl_site_configurator_impl(Ctx) ->
    com_adobe_cq_social_site_impl_site_configurator_impl(Ctx, #{}).

-spec com_adobe_cq_social_site_impl_site_configurator_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_site_impl_site_configurator_impl_info:openapi_com_adobe_cq_social_site_impl_site_configurator_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_site_impl_site_configurator_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'componentsUsingTags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_srp_impl_social_solr_connector(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_srp_impl_social_solr_connector_info:openapi_com_adobe_cq_social_srp_impl_social_solr_connector_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_srp_impl_social_solr_connector(Ctx) ->
    com_adobe_cq_social_srp_impl_social_solr_connector(Ctx, #{}).

-spec com_adobe_cq_social_srp_impl_social_solr_connector(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_srp_impl_social_solr_connector_info:openapi_com_adobe_cq_social_srp_impl_social_solr_connector_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_srp_impl_social_solr_connector(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'srp.type'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_sync_impl_diff_changes_observer(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_sync_impl_diff_changes_observer_info:openapi_com_adobe_cq_social_sync_impl_diff_changes_observer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_sync_impl_diff_changes_observer(Ctx) ->
    com_adobe_cq_social_sync_impl_diff_changes_observer(Ctx, #{}).

-spec com_adobe_cq_social_sync_impl_diff_changes_observer(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_sync_impl_diff_changes_observer_info:openapi_com_adobe_cq_social_sync_impl_diff_changes_observer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_sync_impl_diff_changes_observer(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enabled', 'agentName', 'diffPath', 'propertyNames'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_sync_impl_group_sync_listener_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_sync_impl_group_sync_listener_impl_info:openapi_com_adobe_cq_social_sync_impl_group_sync_listener_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_sync_impl_group_sync_listener_impl(Ctx) ->
    com_adobe_cq_social_sync_impl_group_sync_listener_impl(Ctx, #{}).

-spec com_adobe_cq_social_sync_impl_group_sync_listener_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_sync_impl_group_sync_listener_impl_info:openapi_com_adobe_cq_social_sync_impl_group_sync_listener_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_sync_impl_group_sync_listener_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'nodetypes', 'ignorableprops', 'ignorablenodes', 'enabled', 'distfolders'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_sync_impl_publisher_sync_service_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_sync_impl_publisher_sync_service_impl_info:openapi_com_adobe_cq_social_sync_impl_publisher_sync_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_sync_impl_publisher_sync_service_impl(Ctx) ->
    com_adobe_cq_social_sync_impl_publisher_sync_service_impl(Ctx, #{}).

-spec com_adobe_cq_social_sync_impl_publisher_sync_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_sync_impl_publisher_sync_service_impl_info:openapi_com_adobe_cq_social_sync_impl_publisher_sync_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_sync_impl_publisher_sync_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'activeRunModes'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_sync_impl_user_sync_listener_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_sync_impl_user_sync_listener_impl_info:openapi_com_adobe_cq_social_sync_impl_user_sync_listener_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_sync_impl_user_sync_listener_impl(Ctx) ->
    com_adobe_cq_social_sync_impl_user_sync_listener_impl(Ctx, #{}).

-spec com_adobe_cq_social_sync_impl_user_sync_listener_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_sync_impl_user_sync_listener_impl_info:openapi_com_adobe_cq_social_sync_impl_user_sync_listener_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_sync_impl_user_sync_listener_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'nodetypes', 'ignorableprops', 'ignorablenodes', 'enabled', 'distfolders'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_translation_impl_translation_service_config_manager(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_translation_impl_translation_service_config_manager_info:openapi_com_adobe_cq_social_translation_impl_translation_service_config_manager_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_translation_impl_translation_service_config_manager(Ctx) ->
    com_adobe_cq_social_translation_impl_translation_service_config_manager(Ctx, #{}).

-spec com_adobe_cq_social_translation_impl_translation_service_config_manager(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_translation_impl_translation_service_config_manager_info:openapi_com_adobe_cq_social_translation_impl_translation_service_config_manager_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_translation_impl_translation_service_config_manager(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'translate.language', 'translate.display', 'translate.attribution', 'translate.caching', 'translate.smart.rendering', 'translate.caching.duration', 'translate.session.save.interval', 'translate.session.save.batchLimit'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_translation_impl_ugc_language_detector(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_translation_impl_ugc_language_detector_info:openapi_com_adobe_cq_social_translation_impl_ugc_language_detector_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_translation_impl_ugc_language_detector(Ctx) ->
    com_adobe_cq_social_translation_impl_ugc_language_detector(Ctx, #{}).

-spec com_adobe_cq_social_translation_impl_ugc_language_detector(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_translation_impl_ugc_language_detector_info:openapi_com_adobe_cq_social_translation_impl_ugc_language_detector_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_translation_impl_ugc_language_detector(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'event.topics', 'event.filter', 'translate.listener.type', 'translate.property.list', 'poolSize', 'maxPoolSize', 'queueSize', 'keepAliveTime'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl_info:openapi_com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl(Ctx) ->
    com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl(Ctx, #{}).

-spec com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl_info:openapi_com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'threadPoolSize', 'delayTime', 'workerSleepTime'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl_info:openapi_com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl(Ctx) ->
    com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl(Ctx, #{}).

-spec com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl_info:openapi_com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'poolSize', 'maxPoolSize', 'queueSize', 'keepAliveTime'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl_info:openapi_com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl(Ctx) ->
    com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl(Ctx, #{}).

-spec com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl_info:openapi_com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'isPrimaryPublisher'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_ugcbase_impl_social_utils_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_ugcbase_impl_social_utils_impl_info:openapi_com_adobe_cq_social_ugcbase_impl_social_utils_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_ugcbase_impl_social_utils_impl(Ctx) ->
    com_adobe_cq_social_ugcbase_impl_social_utils_impl(Ctx, #{}).

-spec com_adobe_cq_social_ugcbase_impl_social_utils_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_ugcbase_impl_social_utils_impl_info:openapi_com_adobe_cq_social_ugcbase_impl_social_utils_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_ugcbase_impl_social_utils_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'legacyCloudUGCPathMapping'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl_info:openapi_com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl(Ctx) ->
    com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl(Ctx, #{}).

-spec com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl_info:openapi_com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'automoderation.sequence', 'automoderation.onfailurestop'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process_info:openapi_com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process(Ctx) ->
    com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process(Ctx, #{}).

-spec com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process_info:openapi_com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'watchwords.positive', 'watchwords.negative', 'watchwords.path', 'sentiment.path'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli_info:openapi_com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli(Ctx) ->
    com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli(Ctx, #{}).

-spec com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli_info:openapi_com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'default.attachment.type.blacklist', 'baseline.attachment.type.blacklist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl_info:openapi_com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl(Ctx) ->
    com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl(Ctx, #{}).

-spec com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl_info:openapi_com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'parameter.whitelist', 'parameter.whitelist.prefixes', 'binary.parameter.whitelist', 'modifier.whitelist', 'operation.whitelist', 'operation.whitelist.prefixes', 'typehint.whitelist', 'resourcetype.whitelist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet_info:openapi_com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet(Ctx) ->
    com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet(Ctx, #{}).

-spec com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet_info:openapi_com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'sling.servlet.extensions', 'sling.servlet.paths', 'sling.servlet.methods'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_social_user_impl_transport_http_to_publisher(ctx:ctx()) -> {ok, openapi_com_adobe_cq_social_user_impl_transport_http_to_publisher_info:openapi_com_adobe_cq_social_user_impl_transport_http_to_publisher_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_user_impl_transport_http_to_publisher(Ctx) ->
    com_adobe_cq_social_user_impl_transport_http_to_publisher(Ctx, #{}).

-spec com_adobe_cq_social_user_impl_transport_http_to_publisher(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_social_user_impl_transport_http_to_publisher_info:openapi_com_adobe_cq_social_user_impl_transport_http_to_publisher_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_social_user_impl_transport_http_to_publisher(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enable', 'agent.configuration', 'context.path', 'disabled.cipher.suites', 'enabled.cipher.suites'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact(ctx:ctx()) -> {ok, openapi_com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact_info:openapi_com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact(Ctx) ->
    com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact(Ctx, #{}).

-spec com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact_info:openapi_com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'resource.types'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup(ctx:ctx()) -> {ok, openapi_com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup_info:openapi_com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup(Ctx) ->
    com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup(Ctx, #{}).

-spec com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup_info:openapi_com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'delete.path.regexps', 'delete.sql2.query'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup(ctx:ctx()) -> {ok, openapi_com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup_info:openapi_com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup(Ctx) ->
    com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup(Ctx, #{}).

-spec com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup_info:openapi_com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'delete.name.regexps'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service(ctx:ctx()) -> {ok, openapi_com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service_info:openapi_com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service(Ctx) ->
    com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service(Ctx, #{}).

-spec com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service_info:openapi_com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'threshold', 'jobTopicName', 'emailEnabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task(ctx:ctx()) -> {ok, openapi_com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task_info:openapi_com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task(Ctx) ->
    com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task(Ctx, #{}).

-spec com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task_info:openapi_com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'scheduler.expression', 'job.purge.threshold', 'job.purge.max.jobs'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service(ctx:ctx()) -> {ok, openapi_com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service_info:openapi_com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service(Ctx) ->
    com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service(Ctx, #{}).

-spec com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service_info:openapi_com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'threshold', 'jobTopicName', 'emailEnabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service(ctx:ctx()) -> {ok, openapi_com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service_info:openapi_com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service(Ctx) ->
    com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service(Ctx, #{}).

-spec com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service_info:openapi_com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'threshold', 'jobTopicName', 'emailEnabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_wcm_launches_impl_launches_event_handler(ctx:ctx()) -> {ok, openapi_com_adobe_cq_wcm_launches_impl_launches_event_handler_info:openapi_com_adobe_cq_wcm_launches_impl_launches_event_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_wcm_launches_impl_launches_event_handler(Ctx) ->
    com_adobe_cq_wcm_launches_impl_launches_event_handler(Ctx, #{}).

-spec com_adobe_cq_wcm_launches_impl_launches_event_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_wcm_launches_impl_launches_event_handler_info:openapi_com_adobe_cq_wcm_launches_impl_launches_event_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_wcm_launches_impl_launches_event_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'event.filter', 'launches.eventhandler.threadpool.maxsize', 'launches.eventhandler.threadpool.priority', 'launches.eventhandler.updatelastmodification'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator(ctx:ctx()) -> {ok, openapi_com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator_info:openapi_com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator(Ctx) ->
    com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator(Ctx, #{}).

-spec com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator_info:openapi_com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.wcm.qrcode.servlet.whitelist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_wcm_style_internal_component_style_info_cache_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_wcm_style_internal_component_style_info_cache_impl_info:openapi_com_adobe_cq_wcm_style_internal_component_style_info_cache_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_wcm_style_internal_component_style_info_cache_impl(Ctx) ->
    com_adobe_cq_wcm_style_internal_component_style_info_cache_impl(Ctx, #{}).

-spec com_adobe_cq_wcm_style_internal_component_style_info_cache_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_wcm_style_internal_component_style_info_cache_impl_info:openapi_com_adobe_cq_wcm_style_internal_component_style_info_cache_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_wcm_style_internal_component_style_info_cache_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'size'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl(ctx:ctx()) -> {ok, openapi_com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl_info:openapi_com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl(Ctx) ->
    com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl(Ctx, #{}).

-spec com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl_info:openapi_com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'syncTranslationState.schedulingFormat', 'schedulingRepeatTranslation.schedulingFormat', 'syncTranslationState.lockTimeoutInMinutes', 'export.format'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service(ctx:ctx()) -> {ok, openapi_com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service_info:openapi_com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service(Ctx) ->
    com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service(Ctx, #{}).

-spec com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service_info:openapi_com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'portal.outboxes', 'draft.data.service', 'draft.metadata.service', 'submit.data.service', 'submit.metadata.service', 'pendingSign.data.service', 'pendingSign.metadata.service'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_fd_fp_config_forms_portal_scheduler_service(ctx:ctx()) -> {ok, openapi_com_adobe_fd_fp_config_forms_portal_scheduler_service_info:openapi_com_adobe_fd_fp_config_forms_portal_scheduler_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_fd_fp_config_forms_portal_scheduler_service(Ctx) ->
    com_adobe_fd_fp_config_forms_portal_scheduler_service(Ctx, #{}).

-spec com_adobe_fd_fp_config_forms_portal_scheduler_service(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_fd_fp_config_forms_portal_scheduler_service_info:openapi_com_adobe_fd_fp_config_forms_portal_scheduler_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_fd_fp_config_forms_portal_scheduler_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'formportal.interval'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_forms_common_service_impl_default_data_provider(ctx:ctx()) -> {ok, openapi_com_adobe_forms_common_service_impl_default_data_provider_info:openapi_com_adobe_forms_common_service_impl_default_data_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_forms_common_service_impl_default_data_provider(Ctx) ->
    com_adobe_forms_common_service_impl_default_data_provider(Ctx, #{}).

-spec com_adobe_forms_common_service_impl_default_data_provider(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_forms_common_service_impl_default_data_provider_info:openapi_com_adobe_forms_common_service_impl_default_data_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_forms_common_service_impl_default_data_provider(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'alloweddataFileLocations'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_forms_common_service_impl_forms_common_configuration_service_imp(ctx:ctx()) -> {ok, openapi_com_adobe_forms_common_service_impl_forms_common_configuration_service_imp_info:openapi_com_adobe_forms_common_service_impl_forms_common_configuration_service_imp_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_forms_common_service_impl_forms_common_configuration_service_imp(Ctx) ->
    com_adobe_forms_common_service_impl_forms_common_configuration_service_imp(Ctx, #{}).

-spec com_adobe_forms_common_service_impl_forms_common_configuration_service_imp(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_forms_common_service_impl_forms_common_configuration_service_imp_info:openapi_com_adobe_forms_common_service_impl_forms_common_configuration_service_imp_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_forms_common_service_impl_forms_common_configuration_service_imp(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'tempStorageConfig'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_forms_common_servlet_temp_clean_up_task(ctx:ctx()) -> {ok, openapi_com_adobe_forms_common_servlet_temp_clean_up_task_info:openapi_com_adobe_forms_common_servlet_temp_clean_up_task_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_forms_common_servlet_temp_clean_up_task(Ctx) ->
    com_adobe_forms_common_servlet_temp_clean_up_task(Ctx, #{}).

-spec com_adobe_forms_common_servlet_temp_clean_up_task(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_forms_common_servlet_temp_clean_up_task_info:openapi_com_adobe_forms_common_servlet_temp_clean_up_task_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_forms_common_servlet_temp_clean_up_task(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'scheduler.expression', 'Duration for Temporary Storage', 'Duration for Anonymous Storage'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_acp_platform_platform_servlet(ctx:ctx()) -> {ok, openapi_com_adobe_granite_acp_platform_platform_servlet_info:openapi_com_adobe_granite_acp_platform_platform_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_acp_platform_platform_servlet(Ctx) ->
    com_adobe_granite_acp_platform_platform_servlet(Ctx, #{}).

-spec com_adobe_granite_acp_platform_platform_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_acp_platform_platform_servlet_info:openapi_com_adobe_granite_acp_platform_platform_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_acp_platform_platform_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'query.limit', 'file.type.extension.map'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_activitystreams_impl_activity_manager_impl(ctx:ctx()) -> {ok, openapi_com_adobe_granite_activitystreams_impl_activity_manager_impl_info:openapi_com_adobe_granite_activitystreams_impl_activity_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_activitystreams_impl_activity_manager_impl(Ctx) ->
    com_adobe_granite_activitystreams_impl_activity_manager_impl(Ctx, #{}).

-spec com_adobe_granite_activitystreams_impl_activity_manager_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_activitystreams_impl_activity_manager_impl_info:openapi_com_adobe_granite_activitystreams_impl_activity_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_activitystreams_impl_activity_manager_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'aggregate.relationships', 'aggregate.descend.virtual'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_analyzer_base_system_status_servlet(ctx:ctx()) -> {ok, openapi_com_adobe_granite_analyzer_base_system_status_servlet_info:openapi_com_adobe_granite_analyzer_base_system_status_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_analyzer_base_system_status_servlet(Ctx) ->
    com_adobe_granite_analyzer_base_system_status_servlet(Ctx, #{}).

-spec com_adobe_granite_analyzer_base_system_status_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_analyzer_base_system_status_servlet_info:openapi_com_adobe_granite_analyzer_base_system_status_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_analyzer_base_system_status_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'disabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet(ctx:ctx()) -> {ok, openapi_com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet_info:openapi_com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet(Ctx) ->
    com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet(Ctx, #{}).

-spec com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet_info:openapi_com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'disabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_apicontroller_filter_resolver_hook_factory(ctx:ctx()) -> {ok, openapi_com_adobe_granite_apicontroller_filter_resolver_hook_factory_info:openapi_com_adobe_granite_apicontroller_filter_resolver_hook_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_apicontroller_filter_resolver_hook_factory(Ctx) ->
    com_adobe_granite_apicontroller_filter_resolver_hook_factory(Ctx, #{}).

-spec com_adobe_granite_apicontroller_filter_resolver_hook_factory(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_apicontroller_filter_resolver_hook_factory_info:openapi_com_adobe_granite_apicontroller_filter_resolver_hook_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_apicontroller_filter_resolver_hook_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'com.adobe.cq.cdn.cdn-rewriter', 'com.adobe.cq.cloud-config.components', 'com.adobe.cq.cloud-config.core', 'com.adobe.cq.cloud-config.ui', 'com.adobe.cq.com.adobe.cq.editor', 'com.adobe.cq.com.adobe.cq.projects.core', 'com.adobe.cq.com.adobe.cq.projects.wcm.core', 'com.adobe.cq.com.adobe.cq.ui.commons', 'com.adobe.cq.com.adobe.cq.wcm.style', 'com.adobe.cq.cq-activitymap-integration', 'com.adobe.cq.cq-contexthub-commons', 'com.adobe.cq.cq-dtm', 'com.adobe.cq.cq-healthcheck', 'com.adobe.cq.cq-multisite-targeting', 'com.adobe.cq.cq-pre-upgrade-cleanup', 'com.adobe.cq.cq-product-info-provider', 'com.adobe.cq.cq-rest-sites', 'com.adobe.cq.cq-security-hc', 'com.adobe.cq.dam.cq-dam-svg-handler', 'com.adobe.cq.dam.cq-scene7-imaging', 'com.adobe.cq.dtm-reactor.core', 'com.adobe.cq.dtm-reactor.ui', 'com.adobe.cq.exp-jspel-resolver', 'com.adobe.cq.inbox.cq-inbox', 'com.adobe.cq.json-schema-parser', 'com.adobe.cq.media.cq-media-publishing-dps-fp-core', 'com.adobe.cq.mobile.cq-mobile-caas', 'com.adobe.cq.mobile.cq-mobile-index-builder', 'com.adobe.cq.mobile.cq-mobile-phonegap-build', 'com.adobe.cq.myspell', 'com.adobe.cq.sample.we.retail.core', 'com.adobe.cq.screens.com.adobe.cq.screens.dcc', 'com.adobe.cq.screens.com.adobe.cq.screens.mq.core', 'com.adobe.cq.social.cq-social-as-provider', 'com.adobe.cq.social.cq-social-badging-basic-impl', 'com.adobe.cq.social.cq-social-badging-impl', 'com.adobe.cq.social.cq-social-calendar-impl', 'com.adobe.cq.social.cq-social-content-fragments-impl', 'com.adobe.cq.social.cq-social-enablement-impl', 'com.adobe.cq.social.cq-social-graph-impl', 'com.adobe.cq.social.cq-social-ideation-impl', 'com.adobe.cq.social.cq-social-jcr-provider', 'com.adobe.cq.social.cq-social-members-impl', 'com.adobe.cq.social.cq-social-ms-provider', 'com.adobe.cq.social.cq-social-notifications-channels-web', 'com.adobe.cq.social.cq-social-notifications-impl', 'com.adobe.cq.social.cq-social-rdb-provider', 'com.adobe.cq.social.cq-social-scf-impl', 'com.adobe.cq.social.cq-social-scoring-basic-impl', 'com.adobe.cq.social.cq-social-scoring-impl', 'com.adobe.cq.social.cq-social-serviceusers-impl', 'com.adobe.cq.social.cq-social-srp-impl', 'com.adobe.cq.social.cq-social-ugcbase-impl', 'com.adobe.dam.cq-dam-cfm-impl', 'com.adobe.forms.foundation-forms-foundation-base', 'com.adobe.granite.apicontroller', 'com.adobe.granite.asset.core', 'com.adobe.granite.auth.sso', 'com.adobe.granite.bundles.hc.impl', 'com.adobe.granite.compat-router', 'com.adobe.granite.conf', 'com.adobe.granite.conf.ui.core', 'com.adobe.granite.cors', 'com.adobe.granite.crx-explorer', 'com.adobe.granite.crxde-lite', 'com.adobe.granite.crypto.config', 'com.adobe.granite.crypto.extension', 'com.adobe.granite.crypto.file', 'com.adobe.granite.crypto.jcr', 'com.adobe.granite.csrf', 'com.adobe.granite.distribution.core', 'com.adobe.granite.dropwizard.metrics', 'com.adobe.granite.frags.impl', 'com.adobe.granite.gibson', 'com.adobe.granite.infocollector', 'com.adobe.granite.installer.factory.packages', 'com.adobe.granite.jetty.ssl', 'com.adobe.granite.jobs.async', 'com.adobe.granite.maintenance.oak', 'com.adobe.granite.monitoring.core', 'com.adobe.granite.queries', 'com.adobe.granite.replication.hc.impl', 'com.adobe.granite.repository.checker', 'com.adobe.granite.repository.hc.impl', 'com.adobe.granite.rest.assets', 'com.adobe.granite.security.ui', 'com.adobe.granite.startup', 'com.adobe.granite.tagsoup', 'com.adobe.granite.taskmanagement.core', 'com.adobe.granite.taskmanagement.workflow', 'com.adobe.granite.ui.clientlibs.compiler.less', 'com.adobe.granite.ui.clientlibs.processor.gcc', 'com.adobe.granite.webconsole.plugins', 'com.adobe.granite.workflow.console', 'com.adobe.xmp.worker.files.native.fragment.linux', 'com.adobe.xmp.worker.files.native.fragment.macosx', 'com.adobe.xmp.worker.files.native.fragment.win', 'com.day.commons.osgi.wrapper.simple-jndi', 'com.day.cq.cq-authhandler', 'com.day.cq.cq-compat-configupdate', 'com.day.cq.cq-licensebranding', 'com.day.cq.cq-notifcation-impl', 'com.day.cq.cq-replication-audit', 'com.day.cq.cq-search-ext', 'com.day.cq.dam.cq-dam-annotation-print', 'com.day.cq.dam.cq-dam-asset-usage', 'com.day.cq.dam.cq-dam-s7dam', 'com.day.cq.dam.cq-dam-similaritysearch', 'com.day.cq.dam.dam-webdav-support', 'com.day.cq.pre-upgrade-tasks', 'com.day.cq.replication.extensions', 'com.day.cq.wcm.cq-msm-core', 'com.day.cq.wcm.cq-wcm-translation', 'day-commons-jrawio', 'org.apache.aries.jmx.whiteboard', 'org.apache.felix.http.sslfilter', 'org.apache.felix.org.apache.felix.threaddump', 'org.apache.felix.webconsole.plugins.ds', 'org.apache.felix.webconsole.plugins.event', 'org.apache.felix.webconsole.plugins.memoryusage', 'org.apache.felix.webconsole.plugins.packageadmin', 'org.apache.jackrabbit.oak-auth-ldap', 'org.apache.jackrabbit.oak-segment-tar', 'org.apache.jackrabbit.oak-solr-osgi', 'org.apache.sling.bundleresource.impl', 'org.apache.sling.commons.fsclassloader', 'org.apache.sling.commons.log.webconsole', 'org.apache.sling.datasource', 'org.apache.sling.discovery.base', 'org.apache.sling.discovery.oak', 'org.apache.sling.discovery.support', 'org.apache.sling.distribution.api', 'org.apache.sling.distribution.core', 'org.apache.sling.extensions.webconsolesecurityprovider', 'org.apache.sling.hc.webconsole', 'org.apache.sling.installer.console', 'org.apache.sling.installer.provider.file', 'org.apache.sling.installer.provider.jcr', 'org.apache.sling.jcr.davex', 'org.apache.sling.jcr.resourcesecurity', 'org.apache.sling.jmx.provider', 'org.apache.sling.launchpad.installer', 'org.apache.sling.models.impl', 'org.apache.sling.repoinit.parser', 'org.apache.sling.resource.inventory', 'org.apache.sling.resourceresolver', 'org.apache.sling.scripting.javascript', 'org.apache.sling.scripting.jst', 'org.apache.sling.scripting.sightly.js.provider', 'org.apache.sling.scripting.sightly.models.provider', 'org.apache.sling.security', 'org.apache.sling.servlets.compat', 'org.apache.sling.servlets.get', 'org.apache.sling.startupfilter.disabler', 'org.apache.sling.tracer', 'we.retail.client.app.core'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_auth_cert_impl_client_cert_auth_handler(ctx:ctx()) -> {ok, openapi_com_adobe_granite_auth_cert_impl_client_cert_auth_handler_info:openapi_com_adobe_granite_auth_cert_impl_client_cert_auth_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_cert_impl_client_cert_auth_handler(Ctx) ->
    com_adobe_granite_auth_cert_impl_client_cert_auth_handler(Ctx, #{}).

-spec com_adobe_granite_auth_cert_impl_client_cert_auth_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_auth_cert_impl_client_cert_auth_handler_info:openapi_com_adobe_granite_auth_cert_impl_client_cert_auth_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_cert_impl_client_cert_auth_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'path', 'service.ranking'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_auth_ims(ctx:ctx()) -> {ok, openapi_com_adobe_granite_auth_ims_info:openapi_com_adobe_granite_auth_ims_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_ims(Ctx) ->
    com_adobe_granite_auth_ims(Ctx, #{}).

-spec com_adobe_granite_auth_ims(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_auth_ims_info:openapi_com_adobe_granite_auth_ims_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_ims(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.auth.ims"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'configid', 'scope'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension(ctx:ctx()) -> {ok, openapi_com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension_info:openapi_com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension(Ctx) ->
    com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension(Ctx, #{}).

-spec com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension_info:openapi_com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'oauth.provider.id'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl(ctx:ctx()) -> {ok, openapi_com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl_info:openapi_com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl(Ctx) ->
    com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl(Ctx, #{}).

-spec com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl_info:openapi_com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'auth.ims.client.secret', 'customizer.type'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_auth_ims_impl_ims_config_provider_impl(ctx:ctx()) -> {ok, openapi_com_adobe_granite_auth_ims_impl_ims_config_provider_impl_info:openapi_com_adobe_granite_auth_ims_impl_ims_config_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_ims_impl_ims_config_provider_impl(Ctx) ->
    com_adobe_granite_auth_ims_impl_ims_config_provider_impl(Ctx, #{}).

-spec com_adobe_granite_auth_ims_impl_ims_config_provider_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_auth_ims_impl_ims_config_provider_impl_info:openapi_com_adobe_granite_auth_ims_impl_ims_config_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_ims_impl_ims_config_provider_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'oauth.configmanager.ims.configid', 'ims.owningEntity', 'aem.instanceId', 'ims.serviceCode'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator(ctx:ctx()) -> {ok, openapi_com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator_info:openapi_com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator(Ctx) ->
    com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator(Ctx, #{}).

-spec com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator_info:openapi_com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'oauth.provider.id'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_auth_ims_impl_ims_provider_impl(ctx:ctx()) -> {ok, openapi_com_adobe_granite_auth_ims_impl_ims_provider_impl_info:openapi_com_adobe_granite_auth_ims_impl_ims_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_ims_impl_ims_provider_impl(Ctx) ->
    com_adobe_granite_auth_ims_impl_ims_provider_impl(Ctx, #{}).

-spec com_adobe_granite_auth_ims_impl_ims_provider_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_auth_ims_impl_ims_provider_impl_info:openapi_com_adobe_granite_auth_ims_impl_ims_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_ims_impl_ims_provider_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'oauth.provider.id', 'oauth.provider.ims.authorization.url', 'oauth.provider.ims.token.url', 'oauth.provider.ims.profile.url', 'oauth.provider.ims.extended.details.urls', 'oauth.provider.ims.validate.token.url', 'oauth.provider.ims.session.property', 'oauth.provider.ims.service.token.client.id', 'oauth.provider.ims.service.token.client.secret', 'oauth.provider.ims.service.token', 'ims.org.ref', 'ims.group.mapping', 'oauth.provider.ims.only.license.group'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_auth_oauth_accesstoken_provider(ctx:ctx()) -> {ok, openapi_com_adobe_granite_auth_oauth_accesstoken_provider_info:openapi_com_adobe_granite_auth_oauth_accesstoken_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_oauth_accesstoken_provider(Ctx) ->
    com_adobe_granite_auth_oauth_accesstoken_provider(Ctx, #{}).

-spec com_adobe_granite_auth_oauth_accesstoken_provider(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_auth_oauth_accesstoken_provider_info:openapi_com_adobe_granite_auth_oauth_accesstoken_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_oauth_accesstoken_provider(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'auth.token.provider.title', 'auth.token.provider.default.claims', 'auth.token.provider.endpoint', 'auth.access.token.request', 'auth.token.provider.keypair.alias', 'auth.token.provider.conn.timeout', 'auth.token.provider.so.timeout', 'auth.token.provider.client.id', 'auth.token.provider.scope', 'auth.token.provider.reuse.access.token', 'auth.token.provider.relaxed.ssl', 'token.request.customizer.type', 'auth.token.validator.type'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_auth_oauth_impl_bearer_authentication_handler(ctx:ctx()) -> {ok, openapi_com_adobe_granite_auth_oauth_impl_bearer_authentication_handler_info:openapi_com_adobe_granite_auth_oauth_impl_bearer_authentication_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_oauth_impl_bearer_authentication_handler(Ctx) ->
    com_adobe_granite_auth_oauth_impl_bearer_authentication_handler(Ctx, #{}).

-spec com_adobe_granite_auth_oauth_impl_bearer_authentication_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_auth_oauth_impl_bearer_authentication_handler_info:openapi_com_adobe_granite_auth_oauth_impl_bearer_authentication_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_oauth_impl_bearer_authentication_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'path', 'oauth.clientIds.allowed', 'auth.bearer.sync.ims', 'auth.tokenRequestParameter', 'oauth.bearer.configid', 'oauth.jwt.support'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_auth_oauth_impl_default_token_validator_impl(ctx:ctx()) -> {ok, openapi_com_adobe_granite_auth_oauth_impl_default_token_validator_impl_info:openapi_com_adobe_granite_auth_oauth_impl_default_token_validator_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_oauth_impl_default_token_validator_impl(Ctx) ->
    com_adobe_granite_auth_oauth_impl_default_token_validator_impl(Ctx, #{}).

-spec com_adobe_granite_auth_oauth_impl_default_token_validator_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_auth_oauth_impl_default_token_validator_impl_info:openapi_com_adobe_granite_auth_oauth_impl_default_token_validator_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_oauth_impl_default_token_validator_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'auth.token.validator.type'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_auth_oauth_impl_facebook_provider_impl(ctx:ctx()) -> {ok, openapi_com_adobe_granite_auth_oauth_impl_facebook_provider_impl_info:openapi_com_adobe_granite_auth_oauth_impl_facebook_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_oauth_impl_facebook_provider_impl(Ctx) ->
    com_adobe_granite_auth_oauth_impl_facebook_provider_impl(Ctx, #{}).

-spec com_adobe_granite_auth_oauth_impl_facebook_provider_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_auth_oauth_impl_facebook_provider_impl_info:openapi_com_adobe_granite_auth_oauth_impl_facebook_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_oauth_impl_facebook_provider_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'oauth.provider.id'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_auth_oauth_impl_github_provider_impl(ctx:ctx()) -> {ok, openapi_com_adobe_granite_auth_oauth_impl_github_provider_impl_info:openapi_com_adobe_granite_auth_oauth_impl_github_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_oauth_impl_github_provider_impl(Ctx) ->
    com_adobe_granite_auth_oauth_impl_github_provider_impl(Ctx, #{}).

-spec com_adobe_granite_auth_oauth_impl_github_provider_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_auth_oauth_impl_github_provider_impl_info:openapi_com_adobe_granite_auth_oauth_impl_github_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_oauth_impl_github_provider_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'oauth.provider.id', 'oauth.provider.github.authorization.url', 'oauth.provider.github.token.url', 'oauth.provider.github.profile.url'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_auth_oauth_impl_granite_provider(ctx:ctx()) -> {ok, openapi_com_adobe_granite_auth_oauth_impl_granite_provider_info:openapi_com_adobe_granite_auth_oauth_impl_granite_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_oauth_impl_granite_provider(Ctx) ->
    com_adobe_granite_auth_oauth_impl_granite_provider(Ctx, #{}).

-spec com_adobe_granite_auth_oauth_impl_granite_provider(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_auth_oauth_impl_granite_provider_info:openapi_com_adobe_granite_auth_oauth_impl_granite_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_oauth_impl_granite_provider(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'oauth.provider.id', 'oauth.provider.granite.authorization.url', 'oauth.provider.granite.token.url', 'oauth.provider.granite.profile.url', 'oauth.provider.granite.extended.details.urls'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_auth_oauth_impl_helper_provider_config_manager(ctx:ctx()) -> {ok, openapi_com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_info:openapi_com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_oauth_impl_helper_provider_config_manager(Ctx) ->
    com_adobe_granite_auth_oauth_impl_helper_provider_config_manager(Ctx, #{}).

-spec com_adobe_granite_auth_oauth_impl_helper_provider_config_manager(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_info:openapi_com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_oauth_impl_helper_provider_config_manager(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'oauth.cookie.login.timeout', 'oauth.cookie.max.age'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal(ctx:ctx()) -> {ok, openapi_com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal_info:openapi_com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal(Ctx) ->
    com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal(Ctx, #{}).

-spec com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal_info:openapi_com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'oauth.cookie.login.timeout', 'oauth.cookie.max.age'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler(ctx:ctx()) -> {ok, openapi_com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler_info:openapi_com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler(Ctx) ->
    com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler(Ctx, #{}).

-spec com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler_info:openapi_com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'path'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_auth_oauth_impl_twitter_provider_impl(ctx:ctx()) -> {ok, openapi_com_adobe_granite_auth_oauth_impl_twitter_provider_impl_info:openapi_com_adobe_granite_auth_oauth_impl_twitter_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_oauth_impl_twitter_provider_impl(Ctx) ->
    com_adobe_granite_auth_oauth_impl_twitter_provider_impl(Ctx, #{}).

-spec com_adobe_granite_auth_oauth_impl_twitter_provider_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_auth_oauth_impl_twitter_provider_impl_info:openapi_com_adobe_granite_auth_oauth_impl_twitter_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_oauth_impl_twitter_provider_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'oauth.provider.id'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_auth_oauth_provider(ctx:ctx()) -> {ok, openapi_com_adobe_granite_auth_oauth_provider_info:openapi_com_adobe_granite_auth_oauth_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_oauth_provider(Ctx) ->
    com_adobe_granite_auth_oauth_provider(Ctx, #{}).

-spec com_adobe_granite_auth_oauth_provider(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_auth_oauth_provider_info:openapi_com_adobe_granite_auth_oauth_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_oauth_provider(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.auth.oauth.provider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'oauth.config.id', 'oauth.client.id', 'oauth.client.secret', 'oauth.scope', 'oauth.config.provider.id', 'oauth.create.users', 'oauth.userid.property', 'force.strict.username.matching', 'oauth.encode.userids', 'oauth.hash.userids', 'oauth.callBackUrl', 'oauth.access.token.persist', 'oauth.access.token.persist.cookie', 'oauth.csrf.state.protection', 'oauth.redirect.request.params', 'oauth.config.siblings.allow'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_auth_requirement_impl_default_requirement_handler(ctx:ctx()) -> {ok, openapi_com_adobe_granite_auth_requirement_impl_default_requirement_handler_info:openapi_com_adobe_granite_auth_requirement_impl_default_requirement_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_requirement_impl_default_requirement_handler(Ctx) ->
    com_adobe_granite_auth_requirement_impl_default_requirement_handler(Ctx, #{}).

-spec com_adobe_granite_auth_requirement_impl_default_requirement_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_auth_requirement_impl_default_requirement_handler_info:openapi_com_adobe_granite_auth_requirement_impl_default_requirement_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_requirement_impl_default_requirement_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'supportedPaths'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_auth_saml_saml_authentication_handler(ctx:ctx()) -> {ok, openapi_com_adobe_granite_auth_saml_saml_authentication_handler_info:openapi_com_adobe_granite_auth_saml_saml_authentication_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_saml_saml_authentication_handler(Ctx) ->
    com_adobe_granite_auth_saml_saml_authentication_handler(Ctx, #{}).

-spec com_adobe_granite_auth_saml_saml_authentication_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_auth_saml_saml_authentication_handler_info:openapi_com_adobe_granite_auth_saml_saml_authentication_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_saml_saml_authentication_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'path', 'service.ranking', 'idpUrl', 'idpCertAlias', 'idpHttpRedirect', 'serviceProviderEntityId', 'assertionConsumerServiceURL', 'spPrivateKeyAlias', 'keyStorePassword', 'defaultRedirectUrl', 'userIDAttribute', 'useEncryption', 'createUser', 'userIntermediatePath', 'addGroupMemberships', 'groupMembershipAttribute', 'defaultGroups', 'nameIdFormat', 'synchronizeAttributes', 'handleLogout', 'logoutUrl', 'clockTolerance', 'digestMethod', 'signatureMethod', 'identitySyncType', 'idpIdentifier'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_auth_sso_impl_sso_authentication_handler(ctx:ctx()) -> {ok, openapi_com_adobe_granite_auth_sso_impl_sso_authentication_handler_info:openapi_com_adobe_granite_auth_sso_impl_sso_authentication_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_sso_impl_sso_authentication_handler(Ctx) ->
    com_adobe_granite_auth_sso_impl_sso_authentication_handler(Ctx, #{}).

-spec com_adobe_granite_auth_sso_impl_sso_authentication_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_auth_sso_impl_sso_authentication_handler_info:openapi_com_adobe_granite_auth_sso_impl_sso_authentication_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_auth_sso_impl_sso_authentication_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'path', 'service.ranking', 'jaas.controlFlag', 'jaas.realmName', 'jaas.ranking', 'headers', 'cookies', 'parameters', 'usermap', 'format', 'trustedCredentialsAttribute'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_bundles_hc_impl_code_cache_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_granite_bundles_hc_impl_code_cache_health_check_info:openapi_com_adobe_granite_bundles_hc_impl_code_cache_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_bundles_hc_impl_code_cache_health_check(Ctx) ->
    com_adobe_granite_bundles_hc_impl_code_cache_health_check(Ctx, #{}).

-spec com_adobe_granite_bundles_hc_impl_code_cache_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_bundles_hc_impl_code_cache_health_check_info:openapi_com_adobe_granite_bundles_hc_impl_code_cache_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_bundles_hc_impl_code_cache_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags', 'minimum.code.cache.size'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check_info:openapi_com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check(Ctx) ->
    com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check(Ctx, #{}).

-spec com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check_info:openapi_com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check_info:openapi_com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check(Ctx) ->
    com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check(Ctx, #{}).

-spec com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check_info:openapi_com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check_info:openapi_com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check(Ctx) ->
    com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check(Ctx, #{}).

-spec com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check_info:openapi_com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags', 'ignored.bundles'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_bundles_hc_impl_jobs_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_granite_bundles_hc_impl_jobs_health_check_info:openapi_com_adobe_granite_bundles_hc_impl_jobs_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_bundles_hc_impl_jobs_health_check(Ctx) ->
    com_adobe_granite_bundles_hc_impl_jobs_health_check(Ctx, #{}).

-spec com_adobe_granite_bundles_hc_impl_jobs_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_bundles_hc_impl_jobs_health_check_info:openapi_com_adobe_granite_bundles_hc_impl_jobs_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_bundles_hc_impl_jobs_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags', 'max.queued.jobs'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check_info:openapi_com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check(Ctx) ->
    com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check(Ctx, #{}).

-spec com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check_info:openapi_com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check_info:openapi_com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check(Ctx) ->
    com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check(Ctx, #{}).

-spec com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check_info:openapi_com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check_info:openapi_com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check(Ctx) ->
    com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check(Ctx, #{}).

-spec com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check_info:openapi_com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check_info:openapi_com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check(Ctx) ->
    com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check(Ctx, #{}).

-spec com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check_info:openapi_com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check_info:openapi_com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check(Ctx) ->
    com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check(Ctx, #{}).

-spec com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check_info:openapi_com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_comments_internal_comment_replication_content_filter_fac(ctx:ctx()) -> {ok, openapi_com_adobe_granite_comments_internal_comment_replication_content_filter_fac_info:openapi_com_adobe_granite_comments_internal_comment_replication_content_filter_fac_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_comments_internal_comment_replication_content_filter_fac(Ctx) ->
    com_adobe_granite_comments_internal_comment_replication_content_filter_fac(Ctx, #{}).

-spec com_adobe_granite_comments_internal_comment_replication_content_filter_fac(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_comments_internal_comment_replication_content_filter_fac_info:openapi_com_adobe_granite_comments_internal_comment_replication_content_filter_fac_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_comments_internal_comment_replication_content_filter_fac(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'replicate.comment.resourceTypes'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_compatrouter_impl_compat_switching_service_impl(ctx:ctx()) -> {ok, openapi_com_adobe_granite_compatrouter_impl_compat_switching_service_impl_info:openapi_com_adobe_granite_compatrouter_impl_compat_switching_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_compatrouter_impl_compat_switching_service_impl(Ctx) ->
    com_adobe_granite_compatrouter_impl_compat_switching_service_impl(Ctx, #{}).

-spec com_adobe_granite_compatrouter_impl_compat_switching_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_compatrouter_impl_compat_switching_service_impl_info:openapi_com_adobe_granite_compatrouter_impl_compat_switching_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_compatrouter_impl_compat_switching_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'compatgroups', 'enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_compatrouter_impl_routing_config(ctx:ctx()) -> {ok, openapi_com_adobe_granite_compatrouter_impl_routing_config_info:openapi_com_adobe_granite_compatrouter_impl_routing_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_compatrouter_impl_routing_config(Ctx) ->
    com_adobe_granite_compatrouter_impl_routing_config(Ctx, #{}).

-spec com_adobe_granite_compatrouter_impl_routing_config(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_compatrouter_impl_routing_config_info:openapi_com_adobe_granite_compatrouter_impl_routing_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_compatrouter_impl_routing_config(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'id', 'compatPath', 'newPath'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_compatrouter_impl_switch_mapping_config(ctx:ctx()) -> {ok, openapi_com_adobe_granite_compatrouter_impl_switch_mapping_config_info:openapi_com_adobe_granite_compatrouter_impl_switch_mapping_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_compatrouter_impl_switch_mapping_config(Ctx) ->
    com_adobe_granite_compatrouter_impl_switch_mapping_config(Ctx, #{}).

-spec com_adobe_granite_compatrouter_impl_switch_mapping_config(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_compatrouter_impl_switch_mapping_config_info:openapi_com_adobe_granite_compatrouter_impl_switch_mapping_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_compatrouter_impl_switch_mapping_config(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'group', 'ids'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving(ctx:ctx()) -> {ok, openapi_com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving_info:openapi_com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving(Ctx) ->
    com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving(Ctx, #{}).

-spec com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving_info:openapi_com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enabled', 'fallbackPaths'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_contexthub_impl_context_hub_impl(ctx:ctx()) -> {ok, openapi_com_adobe_granite_contexthub_impl_context_hub_impl_info:openapi_com_adobe_granite_contexthub_impl_context_hub_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_contexthub_impl_context_hub_impl(Ctx) ->
    com_adobe_granite_contexthub_impl_context_hub_impl(Ctx, #{}).

-spec com_adobe_granite_contexthub_impl_context_hub_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_contexthub_impl_context_hub_impl_info:openapi_com_adobe_granite_contexthub_impl_context_hub_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_contexthub_impl_context_hub_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'com.adobe.granite.contexthub.silent_mode', 'com.adobe.granite.contexthub.show_ui'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_cors_impl_cors_policy_impl(ctx:ctx()) -> {ok, openapi_com_adobe_granite_cors_impl_cors_policy_impl_info:openapi_com_adobe_granite_cors_impl_cors_policy_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_cors_impl_cors_policy_impl(Ctx) ->
    com_adobe_granite_cors_impl_cors_policy_impl(Ctx, #{}).

-spec com_adobe_granite_cors_impl_cors_policy_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_cors_impl_cors_policy_impl_info:openapi_com_adobe_granite_cors_impl_cors_policy_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_cors_impl_cors_policy_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'alloworigin', 'alloworiginregexp', 'allowedpaths', 'exposedheaders', 'maxage', 'supportedheaders', 'supportedmethods', 'supportscredentials'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_csrf_impl_csrf_filter(ctx:ctx()) -> {ok, openapi_com_adobe_granite_csrf_impl_csrf_filter_info:openapi_com_adobe_granite_csrf_impl_csrf_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_csrf_impl_csrf_filter(Ctx) ->
    com_adobe_granite_csrf_impl_csrf_filter(Ctx, #{}).

-spec com_adobe_granite_csrf_impl_csrf_filter(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_csrf_impl_csrf_filter_info:openapi_com_adobe_granite_csrf_impl_csrf_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_csrf_impl_csrf_filter(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'filter.methods', 'filter.enable.safe.user.agents', 'filter.safe.user.agents', 'filter.excluded.paths'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_csrf_impl_csrf_servlet(ctx:ctx()) -> {ok, openapi_com_adobe_granite_csrf_impl_csrf_servlet_info:openapi_com_adobe_granite_csrf_impl_csrf_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_csrf_impl_csrf_servlet(Ctx) ->
    com_adobe_granite_csrf_impl_csrf_servlet(Ctx, #{}).

-spec com_adobe_granite_csrf_impl_csrf_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_csrf_impl_csrf_servlet_info:openapi_com_adobe_granite_csrf_impl_csrf_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_csrf_impl_csrf_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'csrf.token.expires.in', 'sling.auth.requirements'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se(ctx:ctx()) -> {ok, openapi_com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se_info:openapi_com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se(Ctx) ->
    com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se(Ctx, #{}).

-spec com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se_info:openapi_com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'username', 'encryptedPassword'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_distribution_core_impl_diff_diff_changes_observer(ctx:ctx()) -> {ok, openapi_com_adobe_granite_distribution_core_impl_diff_diff_changes_observer_info:openapi_com_adobe_granite_distribution_core_impl_diff_diff_changes_observer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_distribution_core_impl_diff_diff_changes_observer(Ctx) ->
    com_adobe_granite_distribution_core_impl_diff_diff_changes_observer(Ctx, #{}).

-spec com_adobe_granite_distribution_core_impl_diff_diff_changes_observer(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_distribution_core_impl_diff_diff_changes_observer_info:openapi_com_adobe_granite_distribution_core_impl_diff_diff_changes_observer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_distribution_core_impl_diff_diff_changes_observer(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enabled', 'agentName', 'diffPath', 'observedPath', 'serviceName', 'propertyNames', 'distributionDelay', 'serviceUser.target'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_distribution_core_impl_diff_diff_event_listener(ctx:ctx()) -> {ok, openapi_com_adobe_granite_distribution_core_impl_diff_diff_event_listener_info:openapi_com_adobe_granite_distribution_core_impl_diff_diff_event_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_distribution_core_impl_diff_diff_event_listener(Ctx) ->
    com_adobe_granite_distribution_core_impl_diff_diff_event_listener(Ctx, #{}).

-spec com_adobe_granite_distribution_core_impl_diff_diff_event_listener(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_distribution_core_impl_diff_diff_event_listener_info:openapi_com_adobe_granite_distribution_core_impl_diff_diff_event_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_distribution_core_impl_diff_diff_event_listener(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'diffPath', 'serviceName', 'serviceUser.target'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_distribution_core_impl_distribution_to_replication_even(ctx:ctx()) -> {ok, openapi_com_adobe_granite_distribution_core_impl_distribution_to_replication_even_info:openapi_com_adobe_granite_distribution_core_impl_distribution_to_replication_even_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_distribution_core_impl_distribution_to_replication_even(Ctx) ->
    com_adobe_granite_distribution_core_impl_distribution_to_replication_even(Ctx, #{}).

-spec com_adobe_granite_distribution_core_impl_distribution_to_replication_even(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_distribution_core_impl_distribution_to_replication_even_info:openapi_com_adobe_granite_distribution_core_impl_distribution_to_replication_even_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_distribution_core_impl_distribution_to_replication_even(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'importer.name'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_distribution_core_impl_replication_adapters_replicat(ctx:ctx()) -> {ok, openapi_com_adobe_granite_distribution_core_impl_replication_adapters_replicat_info:openapi_com_adobe_granite_distribution_core_impl_replication_adapters_replicat_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_distribution_core_impl_replication_adapters_replicat(Ctx) ->
    com_adobe_granite_distribution_core_impl_replication_adapters_replicat(Ctx, #{}).

-spec com_adobe_granite_distribution_core_impl_replication_adapters_replicat(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_distribution_core_impl_replication_adapters_replicat_info:openapi_com_adobe_granite_distribution_core_impl_replication_adapters_replicat_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_distribution_core_impl_replication_adapters_replicat(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'providerName', 'forward.requests'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_distribution_core_impl_replication_distribution_trans(ctx:ctx()) -> {ok, openapi_com_adobe_granite_distribution_core_impl_replication_distribution_trans_info:openapi_com_adobe_granite_distribution_core_impl_replication_distribution_trans_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_distribution_core_impl_replication_distribution_trans(Ctx) ->
    com_adobe_granite_distribution_core_impl_replication_distribution_trans(Ctx, #{}).

-spec com_adobe_granite_distribution_core_impl_replication_distribution_trans(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_distribution_core_impl_replication_distribution_trans_info:openapi_com_adobe_granite_distribution_core_impl_replication_distribution_trans_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_distribution_core_impl_replication_distribution_trans(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'forward.requests'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_distribution_core_impl_transport_access_token_distribu(ctx:ctx()) -> {ok, openapi_com_adobe_granite_distribution_core_impl_transport_access_token_distribu_info:openapi_com_adobe_granite_distribution_core_impl_transport_access_token_distribu_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_distribution_core_impl_transport_access_token_distribu(Ctx) ->
    com_adobe_granite_distribution_core_impl_transport_access_token_distribu(Ctx, #{}).

-spec com_adobe_granite_distribution_core_impl_transport_access_token_distribu(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_distribution_core_impl_transport_access_token_distribu_info:openapi_com_adobe_granite_distribution_core_impl_transport_access_token_distribu_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_distribution_core_impl_transport_access_token_distribu(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'serviceName', 'userId', 'accessTokenProvider.target'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_frags_impl_check_http_header_flag(ctx:ctx()) -> {ok, openapi_com_adobe_granite_frags_impl_check_http_header_flag_info:openapi_com_adobe_granite_frags_impl_check_http_header_flag_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_frags_impl_check_http_header_flag(Ctx) ->
    com_adobe_granite_frags_impl_check_http_header_flag(Ctx, #{}).

-spec com_adobe_granite_frags_impl_check_http_header_flag(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_frags_impl_check_http_header_flag_info:openapi_com_adobe_granite_frags_impl_check_http_header_flag_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_frags_impl_check_http_header_flag(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'feature.name', 'feature.description', 'http.header.name', 'http.header.valuepattern'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_frags_impl_random_feature(ctx:ctx()) -> {ok, openapi_com_adobe_granite_frags_impl_random_feature_info:openapi_com_adobe_granite_frags_impl_random_feature_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_frags_impl_random_feature(Ctx) ->
    com_adobe_granite_frags_impl_random_feature(Ctx, #{}).

-spec com_adobe_granite_frags_impl_random_feature(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_frags_impl_random_feature_info:openapi_com_adobe_granite_frags_impl_random_feature_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_frags_impl_random_feature(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'feature.name', 'feature.description', 'active.percentage', 'cookie.name', 'cookie.maxAge'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_httpcache_file_file_cache_store(ctx:ctx()) -> {ok, openapi_com_adobe_granite_httpcache_file_file_cache_store_info:openapi_com_adobe_granite_httpcache_file_file_cache_store_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_httpcache_file_file_cache_store(Ctx) ->
    com_adobe_granite_httpcache_file_file_cache_store(Ctx, #{}).

-spec com_adobe_granite_httpcache_file_file_cache_store(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_httpcache_file_file_cache_store_info:openapi_com_adobe_granite_httpcache_file_file_cache_store_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_httpcache_file_file_cache_store(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'com.adobe.granite.httpcache.file.documentRoot', 'com.adobe.granite.httpcache.file.includeHost'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_httpcache_impl_outer_cache_filter(ctx:ctx()) -> {ok, openapi_com_adobe_granite_httpcache_impl_outer_cache_filter_info:openapi_com_adobe_granite_httpcache_impl_outer_cache_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_httpcache_impl_outer_cache_filter(Ctx) ->
    com_adobe_granite_httpcache_impl_outer_cache_filter(Ctx, #{}).

-spec com_adobe_granite_httpcache_impl_outer_cache_filter(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_httpcache_impl_outer_cache_filter_info:openapi_com_adobe_granite_httpcache_impl_outer_cache_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_httpcache_impl_outer_cache_filter(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'com.adobe.granite.httpcache.url.paths'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_i18n_impl_bundle_pseudo_translations(ctx:ctx()) -> {ok, openapi_com_adobe_granite_i18n_impl_bundle_pseudo_translations_info:openapi_com_adobe_granite_i18n_impl_bundle_pseudo_translations_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_i18n_impl_bundle_pseudo_translations(Ctx) ->
    com_adobe_granite_i18n_impl_bundle_pseudo_translations(Ctx, #{}).

-spec com_adobe_granite_i18n_impl_bundle_pseudo_translations(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_i18n_impl_bundle_pseudo_translations_info:openapi_com_adobe_granite_i18n_impl_bundle_pseudo_translations_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_i18n_impl_bundle_pseudo_translations(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'pseudo.patterns'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_i18n_impl_preferences_locale_resolver_service(ctx:ctx()) -> {ok, openapi_com_adobe_granite_i18n_impl_preferences_locale_resolver_service_info:openapi_com_adobe_granite_i18n_impl_preferences_locale_resolver_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_i18n_impl_preferences_locale_resolver_service(Ctx) ->
    com_adobe_granite_i18n_impl_preferences_locale_resolver_service(Ctx, #{}).

-spec com_adobe_granite_i18n_impl_preferences_locale_resolver_service(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_i18n_impl_preferences_locale_resolver_service_info:openapi_com_adobe_granite_i18n_impl_preferences_locale_resolver_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_i18n_impl_preferences_locale_resolver_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'security.preferences.name'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_infocollector_info_collector(ctx:ctx()) -> {ok, openapi_com_adobe_granite_infocollector_info_collector_info:openapi_com_adobe_granite_infocollector_info_collector_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_infocollector_info_collector(Ctx) ->
    com_adobe_granite_infocollector_info_collector(Ctx, #{}).

-spec com_adobe_granite_infocollector_info_collector(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_infocollector_info_collector_info:openapi_com_adobe_granite_infocollector_info_collector_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_infocollector_info_collector(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.infocollector.InfoCollector"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'granite.infocollector.includeThreadDumps', 'granite.infocollector.includeHeapDump'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory(ctx:ctx()) -> {ok, openapi_com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory_info:openapi_com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory(Ctx) ->
    com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory(Ctx, #{}).

-spec com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory_info:openapi_com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'com.adobe.granite.jetty.ssl.port', 'com.adobe.granite.jetty.ssl.keystore.user', 'com.adobe.granite.jetty.ssl.keystore.password', 'com.adobe.granite.jetty.ssl.ciphersuites.excluded', 'com.adobe.granite.jetty.ssl.ciphersuites.included', 'com.adobe.granite.jetty.ssl.client.certificate'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_license_impl_license_check_filter(ctx:ctx()) -> {ok, openapi_com_adobe_granite_license_impl_license_check_filter_info:openapi_com_adobe_granite_license_impl_license_check_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_license_impl_license_check_filter(Ctx) ->
    com_adobe_granite_license_impl_license_check_filter(Ctx, #{}).

-spec com_adobe_granite_license_impl_license_check_filter(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_license_impl_license_check_filter_info:openapi_com_adobe_granite_license_impl_license_check_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_license_impl_license_check_filter(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'checkInternval', 'excludeIds', 'encryptPing'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_logging_impl_log_analyser_impl(ctx:ctx()) -> {ok, openapi_com_adobe_granite_logging_impl_log_analyser_impl_info:openapi_com_adobe_granite_logging_impl_log_analyser_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_logging_impl_log_analyser_impl(Ctx) ->
    com_adobe_granite_logging_impl_log_analyser_impl(Ctx, #{}).

-spec com_adobe_granite_logging_impl_log_analyser_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_logging_impl_log_analyser_impl_info:openapi_com_adobe_granite_logging_impl_log_analyser_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_logging_impl_log_analyser_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'messages.queue.size', 'logger.config', 'messages.size'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_logging_impl_log_error_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_granite_logging_impl_log_error_health_check_info:openapi_com_adobe_granite_logging_impl_log_error_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_logging_impl_log_error_health_check(Ctx) ->
    com_adobe_granite_logging_impl_log_error_health_check(Ctx, #{}).

-spec com_adobe_granite_logging_impl_log_error_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_logging_impl_log_error_health_check_info:openapi_com_adobe_granite_logging_impl_log_error_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_logging_impl_log_error_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task(ctx:ctx()) -> {ok, openapi_com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task_info:openapi_com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task(Ctx) ->
    com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task(Ctx, #{}).

-spec com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task_info:openapi_com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'granite.maintenance.mandatory', 'job.topics'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task(ctx:ctx()) -> {ok, openapi_com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task_info:openapi_com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task(Ctx) ->
    com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task(Ctx, #{}).

-spec com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task_info:openapi_com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'job.topics'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_maintenance_crx_impl_revision_cleanup_task(ctx:ctx()) -> {ok, openapi_com_adobe_granite_maintenance_crx_impl_revision_cleanup_task_info:openapi_com_adobe_granite_maintenance_crx_impl_revision_cleanup_task_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_maintenance_crx_impl_revision_cleanup_task(Ctx) ->
    com_adobe_granite_maintenance_crx_impl_revision_cleanup_task(Ctx, #{}).

-spec com_adobe_granite_maintenance_crx_impl_revision_cleanup_task(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_maintenance_crx_impl_revision_cleanup_task_info:openapi_com_adobe_granite_maintenance_crx_impl_revision_cleanup_task_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_maintenance_crx_impl_revision_cleanup_task(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'full.gc.days'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_monitoring_impl_script_config_impl(ctx:ctx()) -> {ok, openapi_com_adobe_granite_monitoring_impl_script_config_impl_info:openapi_com_adobe_granite_monitoring_impl_script_config_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_monitoring_impl_script_config_impl(Ctx) ->
    com_adobe_granite_monitoring_impl_script_config_impl(Ctx, #{}).

-spec com_adobe_granite_monitoring_impl_script_config_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_monitoring_impl_script_config_impl_info:openapi_com_adobe_granite_monitoring_impl_script_config_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_monitoring_impl_script_config_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'script.filename', 'script.display', 'script.path', 'script.platform', 'interval', 'jmxdomain'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han(ctx:ctx()) -> {ok, openapi_com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han_info:openapi_com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han(Ctx) ->
    com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han(Ctx, #{}).

-spec com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han_info:openapi_com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'path', 'jaas.controlFlag', 'jaas.realmName', 'jaas.ranking', 'oauth.offline.validation'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_oauth_server_impl_access_token_cleanup_task(ctx:ctx()) -> {ok, openapi_com_adobe_granite_oauth_server_impl_access_token_cleanup_task_info:openapi_com_adobe_granite_oauth_server_impl_access_token_cleanup_task_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_oauth_server_impl_access_token_cleanup_task(Ctx) ->
    com_adobe_granite_oauth_server_impl_access_token_cleanup_task(Ctx, #{}).

-spec com_adobe_granite_oauth_server_impl_access_token_cleanup_task(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_oauth_server_impl_access_token_cleanup_task_info:openapi_com_adobe_granite_oauth_server_impl_access_token_cleanup_task_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_oauth_server_impl_access_token_cleanup_task(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'scheduler.expression'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet(ctx:ctx()) -> {ok, openapi_com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet_info:openapi_com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet(Ctx) ->
    com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet(Ctx, #{}).

-spec com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet_info:openapi_com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'oauth.client.revocation.active'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet(ctx:ctx()) -> {ok, openapi_com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet_info:openapi_com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet(Ctx) ->
    com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet(Ctx, #{}).

-spec com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet_info:openapi_com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'sling.servlet.paths', 'oauth.revocation.active'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet(ctx:ctx()) -> {ok, openapi_com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet_info:openapi_com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet(Ctx) ->
    com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet(Ctx, #{}).

-spec com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet_info:openapi_com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'oauth.issuer', 'oauth.access.token.expires.in', 'osgi.http.whiteboard.servlet.pattern', 'osgi.http.whiteboard.context.select'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet(ctx:ctx()) -> {ok, openapi_com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet_info:openapi_com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet(Ctx) ->
    com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet(Ctx, #{}).

-spec com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet_info:openapi_com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'oauth.token.revocation.active'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_offloading_impl_offloading_configurator(ctx:ctx()) -> {ok, openapi_com_adobe_granite_offloading_impl_offloading_configurator_info:openapi_com_adobe_granite_offloading_impl_offloading_configurator_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_offloading_impl_offloading_configurator(Ctx) ->
    com_adobe_granite_offloading_impl_offloading_configurator(Ctx, #{}).

-spec com_adobe_granite_offloading_impl_offloading_configurator(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_offloading_impl_offloading_configurator_info:openapi_com_adobe_granite_offloading_impl_offloading_configurator_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_offloading_impl_offloading_configurator(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'offloading.transporter', 'offloading.cleanup.payload'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_offloading_impl_offloading_job_cloner(ctx:ctx()) -> {ok, openapi_com_adobe_granite_offloading_impl_offloading_job_cloner_info:openapi_com_adobe_granite_offloading_impl_offloading_job_cloner_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_offloading_impl_offloading_job_cloner(Ctx) ->
    com_adobe_granite_offloading_impl_offloading_job_cloner(Ctx, #{}).

-spec com_adobe_granite_offloading_impl_offloading_job_cloner(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_offloading_impl_offloading_job_cloner_info:openapi_com_adobe_granite_offloading_impl_offloading_job_cloner_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_offloading_impl_offloading_job_cloner(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'offloading.jobcloner.enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_offloading_impl_offloading_job_offloader(ctx:ctx()) -> {ok, openapi_com_adobe_granite_offloading_impl_offloading_job_offloader_info:openapi_com_adobe_granite_offloading_impl_offloading_job_offloader_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_offloading_impl_offloading_job_offloader(Ctx) ->
    com_adobe_granite_offloading_impl_offloading_job_offloader(Ctx, #{}).

-spec com_adobe_granite_offloading_impl_offloading_job_offloader(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_offloading_impl_offloading_job_offloader_info:openapi_com_adobe_granite_offloading_impl_offloading_job_offloader_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_offloading_impl_offloading_job_offloader(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'offloading.offloader.enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_offloading_impl_transporter_offloading_agent_manager(ctx:ctx()) -> {ok, openapi_com_adobe_granite_offloading_impl_transporter_offloading_agent_manager_info:openapi_com_adobe_granite_offloading_impl_transporter_offloading_agent_manager_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_offloading_impl_transporter_offloading_agent_manager(Ctx) ->
    com_adobe_granite_offloading_impl_transporter_offloading_agent_manager(Ctx, #{}).

-spec com_adobe_granite_offloading_impl_transporter_offloading_agent_manager(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_offloading_impl_transporter_offloading_agent_manager_info:openapi_com_adobe_granite_offloading_impl_transporter_offloading_agent_manager_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_offloading_impl_transporter_offloading_agent_manager(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'offloading.agentmanager.enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_offloading_impl_transporter_offloading_default_transpo(ctx:ctx()) -> {ok, openapi_com_adobe_granite_offloading_impl_transporter_offloading_default_transpo_info:openapi_com_adobe_granite_offloading_impl_transporter_offloading_default_transpo_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_offloading_impl_transporter_offloading_default_transpo(Ctx) ->
    com_adobe_granite_offloading_impl_transporter_offloading_default_transpo(Ctx, #{}).

-spec com_adobe_granite_offloading_impl_transporter_offloading_default_transpo(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_offloading_impl_transporter_offloading_default_transpo_info:openapi_com_adobe_granite_offloading_impl_transporter_offloading_default_transpo_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_offloading_impl_transporter_offloading_default_transpo(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'default.transport.agent-to-worker.prefix', 'default.transport.agent-to-master.prefix', 'default.transport.input.package', 'default.transport.output.package', 'default.transport.replication.synchronous', 'default.transport.contentpackage', 'offloading.transporter.default.enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_omnisearch_impl_core_omni_search_service_impl(ctx:ctx()) -> {ok, openapi_com_adobe_granite_omnisearch_impl_core_omni_search_service_impl_info:openapi_com_adobe_granite_omnisearch_impl_core_omni_search_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_omnisearch_impl_core_omni_search_service_impl(Ctx) ->
    com_adobe_granite_omnisearch_impl_core_omni_search_service_impl(Ctx, #{}).

-spec com_adobe_granite_omnisearch_impl_core_omni_search_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_omnisearch_impl_core_omni_search_service_impl_info:openapi_com_adobe_granite_omnisearch_impl_core_omni_search_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_omnisearch_impl_core_omni_search_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'omnisearch.suggestion.requiretext.min', 'omnisearch.suggestion.spellcheck.require'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_optout_impl_opt_out_service_impl(ctx:ctx()) -> {ok, openapi_com_adobe_granite_optout_impl_opt_out_service_impl_info:openapi_com_adobe_granite_optout_impl_opt_out_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_optout_impl_opt_out_service_impl(Ctx) ->
    com_adobe_granite_optout_impl_opt_out_service_impl(Ctx, #{}).

-spec com_adobe_granite_optout_impl_opt_out_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_optout_impl_opt_out_service_impl_info:openapi_com_adobe_granite_optout_impl_opt_out_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_optout_impl_opt_out_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'optout.cookies', 'optout.headers', 'optout.whitelist.cookies'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_queries_impl_hc_async_index_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_granite_queries_impl_hc_async_index_health_check_info:openapi_com_adobe_granite_queries_impl_hc_async_index_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_queries_impl_hc_async_index_health_check(Ctx) ->
    com_adobe_granite_queries_impl_hc_async_index_health_check(Ctx, #{}).

-spec com_adobe_granite_queries_impl_hc_async_index_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_queries_impl_hc_async_index_health_check_info:openapi_com_adobe_granite_queries_impl_hc_async_index_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_queries_impl_hc_async_index_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'indexing.critical.threshold', 'indexing.warn.threshold', 'hc.tags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_queries_impl_hc_large_index_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_granite_queries_impl_hc_large_index_health_check_info:openapi_com_adobe_granite_queries_impl_hc_large_index_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_queries_impl_hc_large_index_health_check(Ctx) ->
    com_adobe_granite_queries_impl_hc_large_index_health_check(Ctx, #{}).

-spec com_adobe_granite_queries_impl_hc_large_index_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_queries_impl_hc_large_index_health_check_info:openapi_com_adobe_granite_queries_impl_hc_large_index_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_queries_impl_hc_large_index_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'large.index.critical.threshold', 'large.index.warn.threshold', 'hc.tags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_queries_impl_hc_queries_status_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_granite_queries_impl_hc_queries_status_health_check_info:openapi_com_adobe_granite_queries_impl_hc_queries_status_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_queries_impl_hc_queries_status_health_check(Ctx) ->
    com_adobe_granite_queries_impl_hc_queries_status_health_check(Ctx, #{}).

-spec com_adobe_granite_queries_impl_hc_queries_status_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_queries_impl_hc_queries_status_health_check_info:openapi_com_adobe_granite_queries_impl_hc_queries_status_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_queries_impl_hc_queries_status_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_queries_impl_hc_query_health_check_metrics(ctx:ctx()) -> {ok, openapi_com_adobe_granite_queries_impl_hc_query_health_check_metrics_info:openapi_com_adobe_granite_queries_impl_hc_query_health_check_metrics_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_queries_impl_hc_query_health_check_metrics(Ctx) ->
    com_adobe_granite_queries_impl_hc_query_health_check_metrics(Ctx, #{}).

-spec com_adobe_granite_queries_impl_hc_query_health_check_metrics(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_queries_impl_hc_query_health_check_metrics_info:openapi_com_adobe_granite_queries_impl_hc_query_health_check_metrics_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_queries_impl_hc_query_health_check_metrics(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'getPeriod'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_queries_impl_hc_query_limits_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_granite_queries_impl_hc_query_limits_health_check_info:openapi_com_adobe_granite_queries_impl_hc_query_limits_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_queries_impl_hc_query_limits_health_check(Ctx) ->
    com_adobe_granite_queries_impl_hc_query_limits_health_check(Ctx, #{}).

-spec com_adobe_granite_queries_impl_hc_query_limits_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_queries_impl_hc_query_limits_health_check_info:openapi_com_adobe_granite_queries_impl_hc_query_limits_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_queries_impl_hc_query_limits_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_replication_hc_impl_replication_queue_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_granite_replication_hc_impl_replication_queue_health_check_info:openapi_com_adobe_granite_replication_hc_impl_replication_queue_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_replication_hc_impl_replication_queue_health_check(Ctx) ->
    com_adobe_granite_replication_hc_impl_replication_queue_health_check(Ctx, #{}).

-spec com_adobe_granite_replication_hc_impl_replication_queue_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_replication_hc_impl_replication_queue_health_check_info:openapi_com_adobe_granite_replication_hc_impl_replication_queue_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_replication_hc_impl_replication_queue_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'number.of.retries.allowed', 'hc.tags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_replication_hc_impl_replication_transport_users_health_c(ctx:ctx()) -> {ok, openapi_com_adobe_granite_replication_hc_impl_replication_transport_users_health_c_info:openapi_com_adobe_granite_replication_hc_impl_replication_transport_users_health_c_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_replication_hc_impl_replication_transport_users_health_c(Ctx) ->
    com_adobe_granite_replication_hc_impl_replication_transport_users_health_c(Ctx, #{}).

-spec com_adobe_granite_replication_hc_impl_replication_transport_users_health_c(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_replication_hc_impl_replication_transport_users_health_c_info:openapi_com_adobe_granite_replication_hc_impl_replication_transport_users_health_c_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_replication_hc_impl_replication_transport_users_health_c(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check_info:openapi_com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check(Ctx) ->
    com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check(Ctx, #{}).

-spec com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check_info:openapi_com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c(ctx:ctx()) -> {ok, openapi_com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c_info:openapi_com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c(Ctx) ->
    com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c(Ctx, #{}).

-spec com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c_info:openapi_com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags', 'exclude.search.path'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_repository_hc_impl_continuous_rgc_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_granite_repository_hc_impl_continuous_rgc_health_check_info:openapi_com_adobe_granite_repository_hc_impl_continuous_rgc_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_repository_hc_impl_continuous_rgc_health_check(Ctx) ->
    com_adobe_granite_repository_hc_impl_continuous_rgc_health_check(Ctx, #{}).

-spec com_adobe_granite_repository_hc_impl_continuous_rgc_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_repository_hc_impl_continuous_rgc_health_check_info:openapi_com_adobe_granite_repository_hc_impl_continuous_rgc_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_repository_hc_impl_continuous_rgc_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che(ctx:ctx()) -> {ok, openapi_com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che_info:openapi_com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che(Ctx) ->
    com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che(Ctx, #{}).

-spec com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che_info:openapi_com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_repository_hc_impl_default_logins_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_granite_repository_hc_impl_default_logins_health_check_info:openapi_com_adobe_granite_repository_hc_impl_default_logins_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_repository_hc_impl_default_logins_health_check(Ctx) ->
    com_adobe_granite_repository_hc_impl_default_logins_health_check(Ctx, #{}).

-spec com_adobe_granite_repository_hc_impl_default_logins_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_repository_hc_impl_default_logins_health_check_info:openapi_com_adobe_granite_repository_hc_impl_default_logins_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_repository_hc_impl_default_logins_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags', 'account.logins', 'console.logins'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_repository_hc_impl_disk_space_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_granite_repository_hc_impl_disk_space_health_check_info:openapi_com_adobe_granite_repository_hc_impl_disk_space_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_repository_hc_impl_disk_space_health_check(Ctx) ->
    com_adobe_granite_repository_hc_impl_disk_space_health_check(Ctx, #{}).

-spec com_adobe_granite_repository_hc_impl_disk_space_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_repository_hc_impl_disk_space_health_check_info:openapi_com_adobe_granite_repository_hc_impl_disk_space_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_repository_hc_impl_disk_space_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags', 'disk.space.warn.threshold', 'disk.space.error.threshold'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_repository_hc_impl_observation_queue_length_health_check(ctx:ctx()) -> {ok, openapi_com_adobe_granite_repository_hc_impl_observation_queue_length_health_check_info:openapi_com_adobe_granite_repository_hc_impl_observation_queue_length_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_repository_hc_impl_observation_queue_length_health_check(Ctx) ->
    com_adobe_granite_repository_hc_impl_observation_queue_length_health_check(Ctx, #{}).

-spec com_adobe_granite_repository_hc_impl_observation_queue_length_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_repository_hc_impl_observation_queue_length_health_check_info:openapi_com_adobe_granite_repository_hc_impl_observation_queue_length_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_repository_hc_impl_observation_queue_length_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_repository_impl_commit_stats_config(ctx:ctx()) -> {ok, openapi_com_adobe_granite_repository_impl_commit_stats_config_info:openapi_com_adobe_granite_repository_impl_commit_stats_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_repository_impl_commit_stats_config(Ctx) ->
    com_adobe_granite_repository_impl_commit_stats_config(Ctx, #{}).

-spec com_adobe_granite_repository_impl_commit_stats_config(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_repository_impl_commit_stats_config_info:openapi_com_adobe_granite_repository_impl_commit_stats_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_repository_impl_commit_stats_config(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enabled', 'intervalSeconds', 'commitsPerIntervalThreshold', 'maxLocationLength', 'maxDetailsShown', 'minDetailsPercentage', 'threadMatchers', 'maxGreedyDepth', 'greedyStackMatchers', 'stackFilters', 'stackMatchers', 'stackCategorizers', 'stackShorteners'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_repository_service_user_configuration(ctx:ctx()) -> {ok, openapi_com_adobe_granite_repository_service_user_configuration_info:openapi_com_adobe_granite_repository_service_user_configuration_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_repository_service_user_configuration(Ctx) ->
    com_adobe_granite_repository_service_user_configuration(Ctx, #{}).

-spec com_adobe_granite_repository_service_user_configuration(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_repository_service_user_configuration_info:openapi_com_adobe_granite_repository_service_user_configuration_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_repository_service_user_configuration(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'serviceusers.simpleSubjectPopulation', 'serviceusers.list'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im(ctx:ctx()) -> {ok, openapi_com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im_info:openapi_com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im(Ctx) ->
    com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im(Ctx, #{}).

-spec com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im_info:openapi_com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_resourcestatus_impl_composite_status_type(ctx:ctx()) -> {ok, openapi_com_adobe_granite_resourcestatus_impl_composite_status_type_info:openapi_com_adobe_granite_resourcestatus_impl_composite_status_type_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_resourcestatus_impl_composite_status_type(Ctx) ->
    com_adobe_granite_resourcestatus_impl_composite_status_type(Ctx, #{}).

-spec com_adobe_granite_resourcestatus_impl_composite_status_type(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_resourcestatus_impl_composite_status_type_info:openapi_com_adobe_granite_resourcestatus_impl_composite_status_type_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_resourcestatus_impl_composite_status_type(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'types'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_resourcestatus_impl_status_resource_provider_impl(ctx:ctx()) -> {ok, openapi_com_adobe_granite_resourcestatus_impl_status_resource_provider_impl_info:openapi_com_adobe_granite_resourcestatus_impl_status_resource_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_resourcestatus_impl_status_resource_provider_impl(Ctx) ->
    com_adobe_granite_resourcestatus_impl_status_resource_provider_impl(Ctx, #{}).

-spec com_adobe_granite_resourcestatus_impl_status_resource_provider_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_resourcestatus_impl_status_resource_provider_impl_info:openapi_com_adobe_granite_resourcestatus_impl_status_resource_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_resourcestatus_impl_status_resource_provider_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'provider.root'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_rest_assets_impl_asset_content_disposition_filter(ctx:ctx()) -> {ok, openapi_com_adobe_granite_rest_assets_impl_asset_content_disposition_filter_info:openapi_com_adobe_granite_rest_assets_impl_asset_content_disposition_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_rest_assets_impl_asset_content_disposition_filter(Ctx) ->
    com_adobe_granite_rest_assets_impl_asset_content_disposition_filter(Ctx, #{}).

-spec com_adobe_granite_rest_assets_impl_asset_content_disposition_filter(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_rest_assets_impl_asset_content_disposition_filter_info:openapi_com_adobe_granite_rest_assets_impl_asset_content_disposition_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_rest_assets_impl_asset_content_disposition_filter(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'mime.allowEmpty', 'mime.allowed'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl(ctx:ctx()) -> {ok, openapi_com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl_info:openapi_com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl(Ctx) ->
    com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl(Ctx, #{}).

-spec com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl_info:openapi_com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'provider.roots'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_rest_impl_servlet_default_get_servlet(ctx:ctx()) -> {ok, openapi_com_adobe_granite_rest_impl_servlet_default_get_servlet_info:openapi_com_adobe_granite_rest_impl_servlet_default_get_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_rest_impl_servlet_default_get_servlet(Ctx) ->
    com_adobe_granite_rest_impl_servlet_default_get_servlet(Ctx, #{}).

-spec com_adobe_granite_rest_impl_servlet_default_get_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_rest_impl_servlet_default_get_servlet_info:openapi_com_adobe_granite_rest_impl_servlet_default_get_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_rest_impl_servlet_default_get_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'default.limit', 'use.absolute.uri'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s(ctx:ctx()) -> {ok, openapi_com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s_info:openapi_com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s(Ctx) ->
    com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s(Ctx, #{}).

-spec com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s_info:openapi_com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.tags'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_security_user_user_properties_service(ctx:ctx()) -> {ok, openapi_com_adobe_granite_security_user_user_properties_service_info:openapi_com_adobe_granite_security_user_user_properties_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_security_user_user_properties_service(Ctx) ->
    com_adobe_granite_security_user_user_properties_service(Ctx, #{}).

-spec com_adobe_granite_security_user_user_properties_service(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_security_user_user_properties_service_info:openapi_com_adobe_granite_security_user_user_properties_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_security_user_user_properties_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'adapter.condition', 'granite.userproperties.nodetypes', 'granite.userproperties.resourcetypes'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_socialgraph_impl_social_graph_factory_impl(ctx:ctx()) -> {ok, openapi_com_adobe_granite_socialgraph_impl_social_graph_factory_impl_info:openapi_com_adobe_granite_socialgraph_impl_social_graph_factory_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_socialgraph_impl_social_graph_factory_impl(Ctx) ->
    com_adobe_granite_socialgraph_impl_social_graph_factory_impl(Ctx, #{}).

-spec com_adobe_granite_socialgraph_impl_social_graph_factory_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_socialgraph_impl_social_graph_factory_impl_info:openapi_com_adobe_granite_socialgraph_impl_social_graph_factory_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_socialgraph_impl_social_graph_factory_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'group2member.relationship.outgoing', 'group2member.excluded.outgoing', 'group2member.relationship.incoming', 'group2member.excluded.incoming'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl(ctx:ctx()) -> {ok, openapi_com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl_info:openapi_com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl(Ctx) ->
    com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl(Ctx, #{}).

-spec com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl_info:openapi_com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'scheduler.expression', 'jmx.objectname'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory(ctx:ctx()) -> {ok, openapi_com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory_info:openapi_com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory(Ctx) ->
    com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory(Ctx, #{}).

-spec com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory_info:openapi_com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'adapter.condition'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_taskmanagement_impl_jcr_task_archive_service(ctx:ctx()) -> {ok, openapi_com_adobe_granite_taskmanagement_impl_jcr_task_archive_service_info:openapi_com_adobe_granite_taskmanagement_impl_jcr_task_archive_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_taskmanagement_impl_jcr_task_archive_service(Ctx) ->
    com_adobe_granite_taskmanagement_impl_jcr_task_archive_service(Ctx, #{}).

-spec com_adobe_granite_taskmanagement_impl_jcr_task_archive_service(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_taskmanagement_impl_jcr_task_archive_service_info:openapi_com_adobe_granite_taskmanagement_impl_jcr_task_archive_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_taskmanagement_impl_jcr_task_archive_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'archiving.enabled', 'scheduler.expression', 'archive.since.days.completed'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task(ctx:ctx()) -> {ok, openapi_com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task_info:openapi_com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task(Ctx) ->
    com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task(Ctx, #{}).

-spec com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task_info:openapi_com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'purgeCompleted', 'completedAge', 'purgeActive', 'activeAge', 'saveThreshold'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor(ctx:ctx()) -> {ok, openapi_com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor_info:openapi_com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor(Ctx) ->
    com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor(Ctx, #{}).

-spec com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor_info:openapi_com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'adapter.condition', 'taskmanager.admingroups'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_threaddump_thread_dump_collector(ctx:ctx()) -> {ok, openapi_com_adobe_granite_threaddump_thread_dump_collector_info:openapi_com_adobe_granite_threaddump_thread_dump_collector_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_threaddump_thread_dump_collector(Ctx) ->
    com_adobe_granite_threaddump_thread_dump_collector(Ctx, #{}).

-spec com_adobe_granite_threaddump_thread_dump_collector(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_threaddump_thread_dump_collector_info:openapi_com_adobe_granite_threaddump_thread_dump_collector_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_threaddump_thread_dump_collector(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'scheduler.period', 'scheduler.runOn', 'granite.threaddump.enabled', 'granite.threaddump.dumpsPerFile', 'granite.threaddump.enableGzipCompression', 'granite.threaddump.enableDirectoriesCompression', 'granite.threaddump.enableJStack', 'granite.threaddump.maxBackupDays', 'granite.threaddump.backupCleanTrigger'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl(ctx:ctx()) -> {ok, openapi_com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl_info:openapi_com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl(Ctx) ->
    com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl(Ctx, #{}).

-spec com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl_info:openapi_com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'translationFactory', 'defaultConnectorLabel', 'defaultConnectorAttribution', 'defaultConnectorWorkspaceId', 'defaultConnectorSubscriptionKey', 'languageMapLocation', 'categoryMapLocation', 'retryAttempts', 'timeoutCount'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_translation_core_impl_translation_manager_impl(ctx:ctx()) -> {ok, openapi_com_adobe_granite_translation_core_impl_translation_manager_impl_info:openapi_com_adobe_granite_translation_core_impl_translation_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_translation_core_impl_translation_manager_impl(Ctx) ->
    com_adobe_granite_translation_core_impl_translation_manager_impl(Ctx, #{}).

-spec com_adobe_granite_translation_core_impl_translation_manager_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_translation_core_impl_translation_manager_impl_info:openapi_com_adobe_granite_translation_core_impl_translation_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_translation_core_impl_translation_manager_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'defaultConnectorName', 'defaultCategory'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl(ctx:ctx()) -> {ok, openapi_com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl_info:openapi_com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl(Ctx) ->
    com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl(Ctx, #{}).

-spec com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl_info:openapi_com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'htmllibmanager.timing', 'htmllibmanager.debug.init.js', 'htmllibmanager.minify', 'htmllibmanager.debug', 'htmllibmanager.gzip', 'htmllibmanager.maxDataUriSize', 'htmllibmanager.maxage', 'htmllibmanager.forceCQUrlInfo', 'htmllibmanager.defaultthemename', 'htmllibmanager.defaultuserthemename', 'htmllibmanager.clientmanager', 'htmllibmanager.path.list', 'htmllibmanager.excluded.path.list', 'htmllibmanager.processor.js', 'htmllibmanager.processor.css', 'htmllibmanager.longcache.patterns', 'htmllibmanager.longcache.format', 'htmllibmanager.useFileSystemOutputCache', 'htmllibmanager.fileSystemOutputCacheLocation', 'htmllibmanager.disable.replacement'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_workflow_console_frags_workflow_withdraw_feature(ctx:ctx()) -> {ok, openapi_com_adobe_granite_workflow_console_frags_workflow_withdraw_feature_info:openapi_com_adobe_granite_workflow_console_frags_workflow_withdraw_feature_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_workflow_console_frags_workflow_withdraw_feature(Ctx) ->
    com_adobe_granite_workflow_console_frags_workflow_withdraw_feature(Ctx, #{}).

-spec com_adobe_granite_workflow_console_frags_workflow_withdraw_feature(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_workflow_console_frags_workflow_withdraw_feature_info:openapi_com_adobe_granite_workflow_console_frags_workflow_withdraw_feature_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_workflow_console_frags_workflow_withdraw_feature(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_workflow_console_publish_workflow_publish_event_service(ctx:ctx()) -> {ok, openapi_com_adobe_granite_workflow_console_publish_workflow_publish_event_service_info:openapi_com_adobe_granite_workflow_console_publish_workflow_publish_event_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_workflow_console_publish_workflow_publish_event_service(Ctx) ->
    com_adobe_granite_workflow_console_publish_workflow_publish_event_service(Ctx, #{}).

-spec com_adobe_granite_workflow_console_publish_workflow_publish_event_service(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_workflow_console_publish_workflow_publish_event_service_info:openapi_com_adobe_granite_workflow_console_publish_workflow_publish_event_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_workflow_console_publish_workflow_publish_event_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'granite.workflow.WorkflowPublishEventService.enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_workflow_core_jcr_workflow_bucket_manager(ctx:ctx()) -> {ok, openapi_com_adobe_granite_workflow_core_jcr_workflow_bucket_manager_info:openapi_com_adobe_granite_workflow_core_jcr_workflow_bucket_manager_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_workflow_core_jcr_workflow_bucket_manager(Ctx) ->
    com_adobe_granite_workflow_core_jcr_workflow_bucket_manager(Ctx, #{}).

-spec com_adobe_granite_workflow_core_jcr_workflow_bucket_manager(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_workflow_core_jcr_workflow_bucket_manager_info:openapi_com_adobe_granite_workflow_core_jcr_workflow_bucket_manager_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_workflow_core_jcr_workflow_bucket_manager(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'bucketSize'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_workflow_core_job_external_process_job_handler(ctx:ctx()) -> {ok, openapi_com_adobe_granite_workflow_core_job_external_process_job_handler_info:openapi_com_adobe_granite_workflow_core_job_external_process_job_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_workflow_core_job_external_process_job_handler(Ctx) ->
    com_adobe_granite_workflow_core_job_external_process_job_handler(Ctx, #{}).

-spec com_adobe_granite_workflow_core_job_external_process_job_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_workflow_core_job_external_process_job_handler_info:openapi_com_adobe_granite_workflow_core_job_external_process_job_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_workflow_core_job_external_process_job_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'default.timeout', 'max.timeout', 'default.period'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_workflow_core_job_job_handler(ctx:ctx()) -> {ok, openapi_com_adobe_granite_workflow_core_job_job_handler_info:openapi_com_adobe_granite_workflow_core_job_job_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_workflow_core_job_job_handler(Ctx) ->
    com_adobe_granite_workflow_core_job_job_handler(Ctx, #{}).

-spec com_adobe_granite_workflow_core_job_job_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_workflow_core_job_job_handler_info:openapi_com_adobe_granite_workflow_core_job_job_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_workflow_core_job_job_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'job.topics', 'allow.self.process.termination'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum(ctx:ctx()) -> {ok, openapi_com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum_info:openapi_com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum(Ctx) ->
    com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum(Ctx, #{}).

-spec com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum_info:openapi_com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'job.topics'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_workflow_core_payload_map_cache(ctx:ctx()) -> {ok, openapi_com_adobe_granite_workflow_core_payload_map_cache_info:openapi_com_adobe_granite_workflow_core_payload_map_cache_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_workflow_core_payload_map_cache(Ctx) ->
    com_adobe_granite_workflow_core_payload_map_cache(Ctx, #{}).

-spec com_adobe_granite_workflow_core_payload_map_cache(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_workflow_core_payload_map_cache_info:openapi_com_adobe_granite_workflow_core_payload_map_cache_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_workflow_core_payload_map_cache(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'getSystemWorkflowModels', 'getPackageRootPath'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_workflow_core_payloadmap_payload_move_listener(ctx:ctx()) -> {ok, openapi_com_adobe_granite_workflow_core_payloadmap_payload_move_listener_info:openapi_com_adobe_granite_workflow_core_payloadmap_payload_move_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_workflow_core_payloadmap_payload_move_listener(Ctx) ->
    com_adobe_granite_workflow_core_payloadmap_payload_move_listener(Ctx, #{}).

-spec com_adobe_granite_workflow_core_payloadmap_payload_move_listener(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_workflow_core_payloadmap_payload_move_listener_info:openapi_com_adobe_granite_workflow_core_payloadmap_payload_move_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_workflow_core_payloadmap_payload_move_listener(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'payload.move.white.list', 'payload.move.handle.from.workflow.process'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_workflow_core_workflow_config(ctx:ctx()) -> {ok, openapi_com_adobe_granite_workflow_core_workflow_config_info:openapi_com_adobe_granite_workflow_core_workflow_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_workflow_core_workflow_config(Ctx) ->
    com_adobe_granite_workflow_core_workflow_config(Ctx, #{}).

-spec com_adobe_granite_workflow_core_workflow_config(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_workflow_core_workflow_config_info:openapi_com_adobe_granite_workflow_core_workflow_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_workflow_core_workflow_config(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.workflow.config.workflow.packages.root.path', 'cq.workflow.config.workflow.process.legacy.mode', 'cq.workflow.config.allow.locking'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_workflow_core_workflow_session_factory(ctx:ctx()) -> {ok, openapi_com_adobe_granite_workflow_core_workflow_session_factory_info:openapi_com_adobe_granite_workflow_core_workflow_session_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_workflow_core_workflow_session_factory(Ctx) ->
    com_adobe_granite_workflow_core_workflow_session_factory(Ctx, #{}).

-spec com_adobe_granite_workflow_core_workflow_session_factory(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_workflow_core_workflow_session_factory_info:openapi_com_adobe_granite_workflow_core_workflow_session_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_workflow_core_workflow_session_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'granite.workflowinbox.sort.propertyName', 'granite.workflowinbox.sort.order', 'cq.workflow.job.retry', 'cq.workflow.superuser', 'granite.workflow.inboxQuerySize', 'granite.workflow.adminUserGroupFilter', 'granite.workflow.enforceWorkitemAssigneePermissions', 'granite.workflow.enforceWorkflowInitiatorPermissions', 'granite.workflow.injectTenantIdInJobTopics', 'granite.workflow.maxPurgeSaveThreshold', 'granite.workflow.maxPurgeQueryCount'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_granite_workflow_purge_scheduler(ctx:ctx()) -> {ok, openapi_com_adobe_granite_workflow_purge_scheduler_info:openapi_com_adobe_granite_workflow_purge_scheduler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_workflow_purge_scheduler(Ctx) ->
    com_adobe_granite_workflow_purge_scheduler(Ctx, #{}).

-spec com_adobe_granite_workflow_purge_scheduler(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_granite_workflow_purge_scheduler_info:openapi_com_adobe_granite_workflow_purge_scheduler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_granite_workflow_purge_scheduler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'scheduledpurge.name', 'scheduledpurge.workflowStatus', 'scheduledpurge.modelIds', 'scheduledpurge.daysold'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_octopus_ncomm_bootstrap(ctx:ctx()) -> {ok, openapi_com_adobe_octopus_ncomm_bootstrap_info:openapi_com_adobe_octopus_ncomm_bootstrap_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_octopus_ncomm_bootstrap(Ctx) ->
    com_adobe_octopus_ncomm_bootstrap(Ctx, #{}).

-spec com_adobe_octopus_ncomm_bootstrap(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_octopus_ncomm_bootstrap_info:openapi_com_adobe_octopus_ncomm_bootstrap_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_octopus_ncomm_bootstrap(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.octopus.ncomm.bootstrap"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'maxConnections', 'maxRequests', 'requestTimeout', 'requestRetries', 'launchTimeout'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s(ctx:ctx()) -> {ok, openapi_com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s_info:openapi_com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s(Ctx) ->
    com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s(Ctx, #{}).

-spec com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s_info:openapi_com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'communities.integration.livefyre.sling.event.filter'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm(ctx:ctx()) -> {ok, openapi_com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm_info:openapi_com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm(Ctx) ->
    com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm(Ctx, #{}).

-spec com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm(ctx:ctx(), maps:map()) -> {ok, openapi_com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm_info:openapi_com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'maxConnections', 'maxRequests', 'requestTimeout', 'logDir'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_commons_datasource_jdbcpool_jdbc_pool_service(ctx:ctx()) -> {ok, openapi_com_day_commons_datasource_jdbcpool_jdbc_pool_service_info:openapi_com_day_commons_datasource_jdbcpool_jdbc_pool_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_commons_datasource_jdbcpool_jdbc_pool_service(Ctx) ->
    com_day_commons_datasource_jdbcpool_jdbc_pool_service(Ctx, #{}).

-spec com_day_commons_datasource_jdbcpool_jdbc_pool_service(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_commons_datasource_jdbcpool_jdbc_pool_service_info:openapi_com_day_commons_datasource_jdbcpool_jdbc_pool_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_commons_datasource_jdbcpool_jdbc_pool_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'jdbc.driver.class', 'jdbc.connection.uri', 'jdbc.username', 'jdbc.password', 'jdbc.validation.query', 'default.readonly', 'default.autocommit', 'pool.size', 'pool.max.wait.msec', 'datasource.name', 'datasource.svc.properties'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_commons_httpclient(ctx:ctx()) -> {ok, openapi_com_day_commons_httpclient_info:openapi_com_day_commons_httpclient_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_commons_httpclient(Ctx) ->
    com_day_commons_httpclient(Ctx, #{}).

-spec com_day_commons_httpclient(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_commons_httpclient_info:openapi_com_day_commons_httpclient_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_commons_httpclient(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.commons.httpclient"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'proxy.enabled', 'proxy.host', 'proxy.user', 'proxy.password', 'proxy.ntlm.host', 'proxy.ntlm.domain', 'proxy.exceptions'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_analytics_impl_store_properties_change_listener(ctx:ctx()) -> {ok, openapi_com_day_cq_analytics_impl_store_properties_change_listener_info:openapi_com_day_cq_analytics_impl_store_properties_change_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_analytics_impl_store_properties_change_listener(Ctx) ->
    com_day_cq_analytics_impl_store_properties_change_listener(Ctx, #{}).

-spec com_day_cq_analytics_impl_store_properties_change_listener(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_analytics_impl_store_properties_change_listener_info:openapi_com_day_cq_analytics_impl_store_properties_change_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_analytics_impl_store_properties_change_listener(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.store.listener.additionalStorePaths'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte(ctx:ctx()) -> {ok, openapi_com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte_info:openapi_com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte(Ctx) ->
    com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte(Ctx, #{}).

-spec com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte_info:openapi_com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'allowed.paths', 'cq.analytics.saint.exporter.pagesize'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_analytics_sitecatalyst_impl_importer_report_importer(ctx:ctx()) -> {ok, openapi_com_day_cq_analytics_sitecatalyst_impl_importer_report_importer_info:openapi_com_day_cq_analytics_sitecatalyst_impl_importer_report_importer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_analytics_sitecatalyst_impl_importer_report_importer(Ctx) ->
    com_day_cq_analytics_sitecatalyst_impl_importer_report_importer(Ctx, #{}).

-spec com_day_cq_analytics_sitecatalyst_impl_importer_report_importer(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_analytics_sitecatalyst_impl_importer_report_importer_info:openapi_com_day_cq_analytics_sitecatalyst_impl_importer_report_importer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_analytics_sitecatalyst_impl_importer_report_importer(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'report.fetch.attempts', 'report.fetch.delay'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory(ctx:ctx()) -> {ok, openapi_com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory_info:openapi_com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory(Ctx) ->
    com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory(Ctx, #{}).

-spec com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory_info:openapi_com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.analytics.adapterfactory.contextstores'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl_info:openapi_com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl(Ctx) ->
    com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl(Ctx, #{}).

-spec com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl_info:openapi_com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.analytics.sitecatalyst.service.datacenter.url', 'devhostnamepatterns', 'connection.timeout', 'socket.timeout'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_analytics_testandtarget_impl_account_options_updater(ctx:ctx()) -> {ok, openapi_com_day_cq_analytics_testandtarget_impl_account_options_updater_info:openapi_com_day_cq_analytics_testandtarget_impl_account_options_updater_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_analytics_testandtarget_impl_account_options_updater(Ctx) ->
    com_day_cq_analytics_testandtarget_impl_account_options_updater(Ctx, #{}).

-spec com_day_cq_analytics_testandtarget_impl_account_options_updater(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_analytics_testandtarget_impl_account_options_updater_info:openapi_com_day_cq_analytics_testandtarget_impl_account_options_updater_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_analytics_testandtarget_impl_account_options_updater(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.analytics.testandtarget.accountoptionsupdater.enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener(ctx:ctx()) -> {ok, openapi_com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener_info:openapi_com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener(Ctx) ->
    com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener(Ctx, #{}).

-spec com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener_info:openapi_com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.analytics.testandtarget.deleteauthoractivitylistener.enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener(ctx:ctx()) -> {ok, openapi_com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener_info:openapi_com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener(Ctx) ->
    com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener(Ctx, #{}).

-spec com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener_info:openapi_com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_analytics_testandtarget_impl_segment_importer(ctx:ctx()) -> {ok, openapi_com_day_cq_analytics_testandtarget_impl_segment_importer_info:openapi_com_day_cq_analytics_testandtarget_impl_segment_importer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_analytics_testandtarget_impl_segment_importer(Ctx) ->
    com_day_cq_analytics_testandtarget_impl_segment_importer(Ctx, #{}).

-spec com_day_cq_analytics_testandtarget_impl_segment_importer(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_analytics_testandtarget_impl_segment_importer_info:openapi_com_day_cq_analytics_testandtarget_impl_segment_importer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_analytics_testandtarget_impl_segment_importer(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.analytics.testandtarget.segmentimporter.enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_analytics_testandtarget_impl_service_web_service_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_analytics_testandtarget_impl_service_web_service_impl_info:openapi_com_day_cq_analytics_testandtarget_impl_service_web_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_analytics_testandtarget_impl_service_web_service_impl(Ctx) ->
    com_day_cq_analytics_testandtarget_impl_service_web_service_impl(Ctx, #{}).

-spec com_day_cq_analytics_testandtarget_impl_service_web_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_analytics_testandtarget_impl_service_web_service_impl_info:openapi_com_day_cq_analytics_testandtarget_impl_service_web_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_analytics_testandtarget_impl_service_web_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'endpointUri', 'connectionTimeout', 'socketTimeout'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet_info:openapi_com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet(Ctx) ->
    com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet(Ctx, #{}).

-spec com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet_info:openapi_com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'testandtarget.endpoint.url'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl_info:openapi_com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl(Ctx) ->
    com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl(Ctx, #{}).

-spec com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl_info:openapi_com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.analytics.testandtarget.api.url', 'cq.analytics.testandtarget.timeout', 'cq.analytics.testandtarget.sockettimeout', 'cq.analytics.testandtarget.recommendations.url.replace', 'cq.analytics.testandtarget.recommendations.url.replacewith'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_auth_impl_cug_cug_support_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_auth_impl_cug_cug_support_impl_info:openapi_com_day_cq_auth_impl_cug_cug_support_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_auth_impl_cug_cug_support_impl(Ctx) ->
    com_day_cq_auth_impl_cug_cug_support_impl(Ctx, #{}).

-spec com_day_cq_auth_impl_cug_cug_support_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_auth_impl_cug_cug_support_impl_info:openapi_com_day_cq_auth_impl_cug_cug_support_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_auth_impl_cug_cug_support_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cug.exempted.principals', 'cug.enabled', 'cug.principals.regex', 'cug.principals.replacement'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_auth_impl_login_selector_handler(ctx:ctx()) -> {ok, openapi_com_day_cq_auth_impl_login_selector_handler_info:openapi_com_day_cq_auth_impl_login_selector_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_auth_impl_login_selector_handler(Ctx) ->
    com_day_cq_auth_impl_login_selector_handler(Ctx, #{}).

-spec com_day_cq_auth_impl_login_selector_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_auth_impl_login_selector_handler_info:openapi_com_day_cq_auth_impl_login_selector_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_auth_impl_login_selector_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'path', 'service.ranking', 'auth.loginselector.mappings', 'auth.loginselector.changepw.mappings', 'auth.loginselector.defaultloginpage', 'auth.loginselector.defaultchangepwpage', 'auth.loginselector.handle', 'auth.loginselector.handle.all.extensions'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_commons_impl_externalizer_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_commons_impl_externalizer_impl_info:openapi_com_day_cq_commons_impl_externalizer_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_commons_impl_externalizer_impl(Ctx) ->
    com_day_cq_commons_impl_externalizer_impl(Ctx, #{}).

-spec com_day_cq_commons_impl_externalizer_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_commons_impl_externalizer_impl_info:openapi_com_day_cq_commons_impl_externalizer_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_commons_impl_externalizer_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'externalizer.domains', 'externalizer.host', 'externalizer.contextpath', 'externalizer.encodedpath'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_commons_servlets_root_mapping_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_commons_servlets_root_mapping_servlet_info:openapi_com_day_cq_commons_servlets_root_mapping_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_commons_servlets_root_mapping_servlet(Ctx) ->
    com_day_cq_commons_servlets_root_mapping_servlet(Ctx, #{}).

-spec com_day_cq_commons_servlets_root_mapping_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_commons_servlets_root_mapping_servlet_info:openapi_com_day_cq_commons_servlets_root_mapping_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_commons_servlets_root_mapping_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'rootmapping.target'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke(ctx:ctx()) -> {ok, openapi_com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke_info:openapi_com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke(Ctx) ->
    com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke(Ctx, #{}).

-spec com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke_info:openapi_com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'codeupgradetasks', 'codeupgradetaskfilters'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list(ctx:ctx()) -> {ok, openapi_com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list_info:openapi_com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list(Ctx) ->
    com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list(Ctx, #{}).

-spec com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list_info:openapi_com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'upgradeTaskIgnoreList'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist(ctx:ctx()) -> {ok, openapi_com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist_info:openapi_com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist(Ctx) ->
    com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist(Ctx, #{}).

-spec com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist_info:openapi_com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'effectiveBundleListPath'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_contentsync_impl_content_sync_manager_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_contentsync_impl_content_sync_manager_impl_info:openapi_com_day_cq_contentsync_impl_content_sync_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_contentsync_impl_content_sync_manager_impl(Ctx) ->
    com_day_cq_contentsync_impl_content_sync_manager_impl(Ctx, #{}).

-spec com_day_cq_contentsync_impl_content_sync_manager_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_contentsync_impl_content_sync_manager_impl_info:openapi_com_day_cq_contentsync_impl_content_sync_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_contentsync_impl_content_sync_manager_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'contentsync.fallback.authorizable', 'contentsync.fallback.updateuser'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_commons_handler_standard_image_handler(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_commons_handler_standard_image_handler_info:openapi_com_day_cq_dam_commons_handler_standard_image_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_commons_handler_standard_image_handler(Ctx) ->
    com_day_cq_dam_commons_handler_standard_image_handler(Ctx, #{}).

-spec com_day_cq_dam_commons_handler_standard_image_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_commons_handler_standard_image_handler_info:openapi_com_day_cq_dam_commons_handler_standard_image_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_commons_handler_standard_image_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'large_file_threshold', 'large_comment_threshold', 'cq.dam.enable.ext.meta.extraction'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_commons_metadata_xmp_filter_black_white(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_commons_metadata_xmp_filter_black_white_info:openapi_com_day_cq_dam_commons_metadata_xmp_filter_black_white_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_commons_metadata_xmp_filter_black_white(Ctx) ->
    com_day_cq_dam_commons_metadata_xmp_filter_black_white(Ctx, #{}).

-spec com_day_cq_dam_commons_metadata_xmp_filter_black_white(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_commons_metadata_xmp_filter_black_white_info:openapi_com_day_cq_dam_commons_metadata_xmp_filter_black_white_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_commons_metadata_xmp_filter_black_white(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'xmp.filter.apply_whitelist', 'xmp.filter.whitelist', 'xmp.filter.apply_blacklist', 'xmp.filter.blacklist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_commons_util_impl_asset_cache_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_commons_util_impl_asset_cache_impl_info:openapi_com_day_cq_dam_commons_util_impl_asset_cache_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_commons_util_impl_asset_cache_impl(Ctx) ->
    com_day_cq_dam_commons_util_impl_asset_cache_impl(Ctx, #{}).

-spec com_day_cq_dam_commons_util_impl_asset_cache_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_commons_util_impl_asset_cache_impl_info:openapi_com_day_cq_dam_commons_util_impl_asset_cache_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_commons_util_impl_asset_cache_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'large.file.min', 'cache.apply', 'mime.types'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config_info:openapi_com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config(Ctx) ->
    com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config(Ctx, #{}).

-spec com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config_info:openapi_com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.config.annotation.pdf.document.width', 'cq.dam.config.annotation.pdf.document.height', 'cq.dam.config.annotation.pdf.document.padding.horizontal', 'cq.dam.config.annotation.pdf.document.padding.vertical', 'cq.dam.config.annotation.pdf.font.size', 'cq.dam.config.annotation.pdf.font.color', 'cq.dam.config.annotation.pdf.font.family', 'cq.dam.config.annotation.pdf.font.light', 'cq.dam.config.annotation.pdf.marginTextImage', 'cq.dam.config.annotation.pdf.minImageHeight', 'cq.dam.config.annotation.pdf.reviewStatus.width', 'cq.dam.config.annotation.pdf.reviewStatus.color.approved', 'cq.dam.config.annotation.pdf.reviewStatus.color.rejected', 'cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested', 'cq.dam.config.annotation.pdf.annotationMarker.width', 'cq.dam.config.annotation.pdf.asset.minheight'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_asset_move_listener(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_asset_move_listener_info:openapi_com_day_cq_dam_core_impl_asset_move_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_asset_move_listener(Ctx) ->
    com_day_cq_dam_core_impl_asset_move_listener(Ctx, #{}).

-spec com_day_cq_dam_core_impl_asset_move_listener(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_asset_move_listener_info:openapi_com_day_cq_dam_core_impl_asset_move_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_asset_move_listener(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_assethome_asset_home_page_configuration(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_assethome_asset_home_page_configuration_info:openapi_com_day_cq_dam_core_impl_assethome_asset_home_page_configuration_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_assethome_asset_home_page_configuration(Ctx) ->
    com_day_cq_dam_core_impl_assethome_asset_home_page_configuration(Ctx, #{}).

-spec com_day_cq_dam_core_impl_assethome_asset_home_page_configuration(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_assethome_asset_home_page_configuration_info:openapi_com_day_cq_dam_core_impl_assethome_asset_home_page_configuration_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_assethome_asset_home_page_configuration(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'isEnabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet_info:openapi_com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet(Ctx) ->
    com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet(Ctx, #{}).

-spec com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet_info:openapi_com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.adhoc.asset.share.prezip.maxcontentsize'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_cache_cq_buffered_image_cache(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_cache_cq_buffered_image_cache_info:openapi_com_day_cq_dam_core_impl_cache_cq_buffered_image_cache_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_cache_cq_buffered_image_cache(Ctx) ->
    com_day_cq_dam_core_impl_cache_cq_buffered_image_cache(Ctx, #{}).

-spec com_day_cq_dam_core_impl_cache_cq_buffered_image_cache(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_cache_cq_buffered_image_cache_info:openapi_com_day_cq_dam_core_impl_cache_cq_buffered_image_cache_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_cache_cq_buffered_image_cache(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.image.cache.max.memory', 'cq.dam.image.cache.max.age', 'cq.dam.image.cache.max.dimension'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_dam_change_event_listener(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_dam_change_event_listener_info:openapi_com_day_cq_dam_core_impl_dam_change_event_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_dam_change_event_listener(Ctx) ->
    com_day_cq_dam_core_impl_dam_change_event_listener(Ctx, #{}).

-spec com_day_cq_dam_core_impl_dam_change_event_listener(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_dam_change_event_listener_info:openapi_com_day_cq_dam_core_impl_dam_change_event_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_dam_change_event_listener(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'changeeventlistener.observed.paths'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_dam_event_purge_service(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_dam_event_purge_service_info:openapi_com_day_cq_dam_core_impl_dam_event_purge_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_dam_event_purge_service(Ctx) ->
    com_day_cq_dam_core_impl_dam_event_purge_service(Ctx, #{}).

-spec com_day_cq_dam_core_impl_dam_event_purge_service(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_dam_event_purge_service_info:openapi_com_day_cq_dam_core_impl_dam_event_purge_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_dam_event_purge_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'scheduler.expression', 'maxSavedActivities', 'saveInterval', 'enableActivityPurge', 'eventTypes'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_dam_event_recorder_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_dam_event_recorder_impl_info:openapi_com_day_cq_dam_core_impl_dam_event_recorder_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_dam_event_recorder_impl(Ctx) ->
    com_day_cq_dam_core_impl_dam_event_recorder_impl(Ctx, #{}).

-spec com_day_cq_dam_core_impl_dam_event_recorder_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_dam_event_recorder_impl_info:openapi_com_day_cq_dam_core_impl_dam_event_recorder_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_dam_event_recorder_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'event.filter', 'event.queue.length', 'eventrecorder.enabled', 'eventrecorder.blacklist', 'eventrecorder.eventtypes'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_event_dam_event_audit_listener(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_event_dam_event_audit_listener_info:openapi_com_day_cq_dam_core_impl_event_dam_event_audit_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_event_dam_event_audit_listener(Ctx) ->
    com_day_cq_dam_core_impl_event_dam_event_audit_listener(Ctx, #{}).

-spec com_day_cq_dam_core_impl_event_dam_event_audit_listener(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_event_dam_event_audit_listener_info:openapi_com_day_cq_dam_core_impl_event_dam_event_audit_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_event_dam_event_audit_listener(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'event.filter', 'enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_expiry_notification_job_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_expiry_notification_job_impl_info:openapi_com_day_cq_dam_core_impl_expiry_notification_job_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_expiry_notification_job_impl(Ctx) ->
    com_day_cq_dam_core_impl_expiry_notification_job_impl(Ctx, #{}).

-spec com_day_cq_dam_core_impl_expiry_notification_job_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_expiry_notification_job_impl_info:openapi_com_day_cq_dam_core_impl_expiry_notification_job_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_expiry_notification_job_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.expiry.notification.scheduler.istimebased', 'cq.dam.expiry.notification.scheduler.timebased.rule', 'cq.dam.expiry.notification.scheduler.period.rule', 'send_email', 'asset_expired_limit', 'prior_notification_seconds', 'cq.dam.expiry.notification.url.protocol'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat_info:openapi_com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat(Ctx) ->
    com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat(Ctx, #{}).

-spec com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat_info:openapi_com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'isEnabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_gfx_commons_gfx_renderer(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_gfx_commons_gfx_renderer_info:openapi_com_day_cq_dam_core_impl_gfx_commons_gfx_renderer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_gfx_commons_gfx_renderer(Ctx) ->
    com_day_cq_dam_core_impl_gfx_commons_gfx_renderer(Ctx, #{}).

-spec com_day_cq_dam_core_impl_gfx_commons_gfx_renderer(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_gfx_commons_gfx_renderer_info:openapi_com_day_cq_dam_core_impl_gfx_commons_gfx_renderer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_gfx_commons_gfx_renderer(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'skip.bufferedcache'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_handler_eps_format_handler(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_handler_eps_format_handler_info:openapi_com_day_cq_dam_core_impl_handler_eps_format_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_handler_eps_format_handler(Ctx) ->
    com_day_cq_dam_core_impl_handler_eps_format_handler(Ctx, #{}).

-spec com_day_cq_dam_core_impl_handler_eps_format_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_handler_eps_format_handler_info:openapi_com_day_cq_dam_core_impl_handler_eps_format_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_handler_eps_format_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'mimetype'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_handler_indesign_format_handler(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_handler_indesign_format_handler_info:openapi_com_day_cq_dam_core_impl_handler_indesign_format_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_handler_indesign_format_handler(Ctx) ->
    com_day_cq_dam_core_impl_handler_indesign_format_handler(Ctx, #{}).

-spec com_day_cq_dam_core_impl_handler_indesign_format_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_handler_indesign_format_handler_info:openapi_com_day_cq_dam_core_impl_handler_indesign_format_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_handler_indesign_format_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'mimetype'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_handler_jpeg_handler(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_handler_jpeg_handler_info:openapi_com_day_cq_dam_core_impl_handler_jpeg_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_handler_jpeg_handler(Ctx) ->
    com_day_cq_dam_core_impl_handler_jpeg_handler(Ctx, #{}).

-spec com_day_cq_dam_core_impl_handler_jpeg_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_handler_jpeg_handler_info:openapi_com_day_cq_dam_core_impl_handler_jpeg_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_handler_jpeg_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.enable.ext.meta.extraction', 'large_file_threshold', 'large_comment_threshold'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler_info:openapi_com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler(Ctx) ->
    com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler(Ctx, #{}).

-spec com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler_info:openapi_com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'xmphandler.cq.formats'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_jmx_asset_index_update_monitor(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_jmx_asset_index_update_monitor_info:openapi_com_day_cq_dam_core_impl_jmx_asset_index_update_monitor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_jmx_asset_index_update_monitor(Ctx) ->
    com_day_cq_dam_core_impl_jmx_asset_index_update_monitor(Ctx, #{}).

-spec com_day_cq_dam_core_impl_jmx_asset_index_update_monitor(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_jmx_asset_index_update_monitor_info:openapi_com_day_cq_dam_core_impl_jmx_asset_index_update_monitor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_jmx_asset_index_update_monitor(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'jmx.objectname', 'property.measure.enabled', 'property.name', 'property.max.wait.ms', 'property.max.rate', 'fulltext.measure.enabled', 'fulltext.name', 'fulltext.max.wait.ms', 'fulltext.max.rate'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl_info:openapi_com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl(Ctx) ->
    com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl(Ctx, #{}).

-spec com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl_info:openapi_com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'jmx.objectname'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl_info:openapi_com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl(Ctx) ->
    com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl(Ctx, #{}).

-spec com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl_info:openapi_com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'jmx.objectname', 'active'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config_info:openapi_com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config(Ctx) ->
    com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config(Ctx, #{}).

-spec com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config_info:openapi_com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'operation', 'emailEnabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config_info:openapi_com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config(Ctx) ->
    com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config(Ctx, #{}).

-spec com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config_info:openapi_com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'operation', 'operationIcon', 'topicName', 'emailEnabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_lightbox_lightbox_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_lightbox_lightbox_servlet_info:openapi_com_day_cq_dam_core_impl_lightbox_lightbox_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_lightbox_lightbox_servlet(Ctx) ->
    com_day_cq_dam_core_impl_lightbox_lightbox_servlet(Ctx, #{}).

-spec com_day_cq_dam_core_impl_lightbox_lightbox_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_lightbox_lightbox_servlet_info:openapi_com_day_cq_dam_core_impl_lightbox_lightbox_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_lightbox_lightbox_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'sling.servlet.paths', 'sling.servlet.methods', 'cq.dam.enable.anonymous'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_metadata_editor_select_component_handler(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_metadata_editor_select_component_handler_info:openapi_com_day_cq_dam_core_impl_metadata_editor_select_component_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_metadata_editor_select_component_handler(Ctx) ->
    com_day_cq_dam_core_impl_metadata_editor_select_component_handler(Ctx, #{}).

-spec com_day_cq_dam_core_impl_metadata_editor_select_component_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_metadata_editor_select_component_handler_info:openapi_com_day_cq_dam_core_impl_metadata_editor_select_component_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_metadata_editor_select_component_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'granite:data'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper_info:openapi_com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper(Ctx) ->
    com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper(Ctx, #{}).

-spec com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper_info:openapi_com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.allow.all.mime', 'cq.dam.allowed.asset.mimes'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl_info:openapi_com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl(Ctx) ->
    com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl(Ctx, #{}).

-spec com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl_info:openapi_com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.detect.asset.mime.from.content'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_missing_metadata_notification_job(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_missing_metadata_notification_job_info:openapi_com_day_cq_dam_core_impl_missing_metadata_notification_job_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_missing_metadata_notification_job(Ctx) ->
    com_day_cq_dam_core_impl_missing_metadata_notification_job(Ctx, #{}).

-spec com_day_cq_dam_core_impl_missing_metadata_notification_job(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_missing_metadata_notification_job_info:openapi_com_day_cq_dam_core_impl_missing_metadata_notification_job_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_missing_metadata_notification_job(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.missingmetadata.notification.scheduler.istimebased', 'cq.dam.missingmetadata.notification.scheduler.timebased.rule', 'cq.dam.missingmetadata.notification.scheduler.period.rule', 'cq.dam.missingmetadata.notification.recipient'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr_info:openapi_com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr(Ctx) ->
    com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr(Ctx, #{}).

-spec com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr_info:openapi_com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'process.label', 'Notify on Complete'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_process_text_extraction_process(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_process_text_extraction_process_info:openapi_com_day_cq_dam_core_impl_process_text_extraction_process_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_process_text_extraction_process(Ctx) ->
    com_day_cq_dam_core_impl_process_text_extraction_process(Ctx, #{}).

-spec com_day_cq_dam_core_impl_process_text_extraction_process(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_process_text_extraction_process_info:openapi_com_day_cq_dam_core_impl_process_text_extraction_process_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_process_text_extraction_process(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'mimeTypes', 'maxExtract'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_rendition_maker_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_rendition_maker_impl_info:openapi_com_day_cq_dam_core_impl_rendition_maker_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_rendition_maker_impl(Ctx) ->
    com_day_cq_dam_core_impl_rendition_maker_impl(Ctx, #{}).

-spec com_day_cq_dam_core_impl_rendition_maker_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_rendition_maker_impl_info:openapi_com_day_cq_dam_core_impl_rendition_maker_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_rendition_maker_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'xmp.propagate', 'xmp.excludes'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_reports_report_export_service(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_reports_report_export_service_info:openapi_com_day_cq_dam_core_impl_reports_report_export_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_reports_report_export_service(Ctx) ->
    com_day_cq_dam_core_impl_reports_report_export_service(Ctx, #{}).

-spec com_day_cq_dam_core_impl_reports_report_export_service(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_reports_report_export_service_info:openapi_com_day_cq_dam_core_impl_reports_report_export_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_reports_report_export_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'queryBatchSize'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_reports_report_purge_service(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_reports_report_purge_service_info:openapi_com_day_cq_dam_core_impl_reports_report_purge_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_reports_report_purge_service(Ctx) ->
    com_day_cq_dam_core_impl_reports_report_purge_service(Ctx, #{}).

-spec com_day_cq_dam_core_impl_reports_report_purge_service(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_reports_report_purge_service_info:openapi_com_day_cq_dam_core_impl_reports_report_purge_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_reports_report_purge_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'scheduler.expression', 'maxSavedReports', 'timeDuration', 'enableReportPurge'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_servlet_asset_download_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_asset_download_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_asset_download_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_asset_download_servlet(Ctx) ->
    com_day_cq_dam_core_impl_servlet_asset_download_servlet(Ctx, #{}).

-spec com_day_cq_dam_core_impl_servlet_asset_download_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_asset_download_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_asset_download_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_asset_download_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_servlet_asset_status_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_asset_status_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_asset_status_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_asset_status_servlet(Ctx) ->
    com_day_cq_dam_core_impl_servlet_asset_status_servlet(Ctx, #{}).

-spec com_day_cq_dam_core_impl_servlet_asset_status_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_asset_status_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_asset_status_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_asset_status_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.batch.status.maxassets'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet(Ctx) ->
    com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet(Ctx, #{}).

-spec com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.batch.indesign.maxassets'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_servlet_batch_metadata_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_batch_metadata_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_batch_metadata_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_batch_metadata_servlet(Ctx) ->
    com_day_cq_dam_core_impl_servlet_batch_metadata_servlet(Ctx, #{}).

-spec com_day_cq_dam_core_impl_servlet_batch_metadata_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_batch_metadata_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_batch_metadata_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_batch_metadata_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.batch.metadata.asset.default', 'cq.dam.batch.metadata.collection.default', 'cq.dam.batch.metadata.maxresources'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_servlet_binary_provider_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_binary_provider_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_binary_provider_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_binary_provider_servlet(Ctx) ->
    com_day_cq_dam_core_impl_servlet_binary_provider_servlet(Ctx, #{}).

-spec com_day_cq_dam_core_impl_servlet_binary_provider_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_binary_provider_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_binary_provider_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_binary_provider_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'sling.servlet.resourceTypes', 'sling.servlet.methods', 'cq.dam.drm.enable'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_servlet_collection_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_collection_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_collection_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_collection_servlet(Ctx) ->
    com_day_cq_dam_core_impl_servlet_collection_servlet(Ctx, #{}).

-spec com_day_cq_dam_core_impl_servlet_collection_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_collection_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_collection_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_collection_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.batch.collection.properties', 'cq.dam.batch.collection.maxcollections'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_servlet_collections_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_collections_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_collections_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_collections_servlet(Ctx) ->
    com_day_cq_dam_core_impl_servlet_collections_servlet(Ctx, #{}).

-spec com_day_cq_dam_core_impl_servlet_collections_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_collections_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_collections_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_collections_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.batch.collections.properties', 'cq.dam.batch.collections.limit'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_servlet_companion_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_companion_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_companion_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_companion_servlet(Ctx) ->
    com_day_cq_dam_core_impl_servlet_companion_servlet(Ctx, #{}).

-spec com_day_cq_dam_core_impl_servlet_companion_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_companion_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_companion_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_companion_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'More Info', '/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_servlet_create_asset_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_create_asset_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_create_asset_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_create_asset_servlet(Ctx) ->
    com_day_cq_dam_core_impl_servlet_create_asset_servlet(Ctx, #{}).

-spec com_day_cq_dam_core_impl_servlet_create_asset_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_create_asset_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_create_asset_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_create_asset_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'detect_duplicate'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter_info:openapi_com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter(Ctx) ->
    com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter(Ctx, #{}).

-spec com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter_info:openapi_com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.mime.type.blacklist', 'cq.dam.empty.mime'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_servlet_guid_lookup_filter(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_guid_lookup_filter_info:openapi_com_day_cq_dam_core_impl_servlet_guid_lookup_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_guid_lookup_filter(Ctx) ->
    com_day_cq_dam_core_impl_servlet_guid_lookup_filter(Ctx, #{}).

-spec com_day_cq_dam_core_impl_servlet_guid_lookup_filter(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_guid_lookup_filter_info:openapi_com_day_cq_dam_core_impl_servlet_guid_lookup_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_guid_lookup_filter(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.core.guidlookupfilter.enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_servlet_health_check_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_health_check_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_health_check_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_health_check_servlet(Ctx) ->
    com_day_cq_dam_core_impl_servlet_health_check_servlet(Ctx, #{}).

-spec com_day_cq_dam_core_impl_servlet_health_check_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_health_check_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_health_check_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_health_check_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.sync.workflow.id', 'cq.dam.sync.folder.types'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_servlet_metadata_get_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_metadata_get_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_metadata_get_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_metadata_get_servlet(Ctx) ->
    com_day_cq_dam_core_impl_servlet_metadata_get_servlet(Ctx, #{}).

-spec com_day_cq_dam_core_impl_servlet_metadata_get_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_metadata_get_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_metadata_get_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_metadata_get_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'sling.servlet.resourceTypes', 'sling.servlet.methods', 'sling.servlet.extensions', 'sling.servlet.selectors'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet(Ctx) ->
    com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet(Ctx, #{}).

-spec com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.drm.enable'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_servlet_resource_collection_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_resource_collection_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_resource_collection_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_resource_collection_servlet(Ctx) ->
    com_day_cq_dam_core_impl_servlet_resource_collection_servlet(Ctx, #{}).

-spec com_day_cq_dam_core_impl_servlet_resource_collection_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_servlet_resource_collection_servlet_info:openapi_com_day_cq_dam_core_impl_servlet_resource_collection_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_servlet_resource_collection_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'sling.servlet.resourceTypes', 'sling.servlet.methods', 'sling.servlet.selectors', 'download.config', 'view.selector', 'send_email'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl_info:openapi_com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl(Ctx) ->
    com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl(Ctx, #{}).

-spec com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl_info:openapi_com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'createPreviewEnabled', 'updatePreviewEnabled', 'queueSize', 'folderPreviewRenditionRegex'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_impl_unzip_unzip_config(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_impl_unzip_unzip_config_info:openapi_com_day_cq_dam_core_impl_unzip_unzip_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_unzip_unzip_config(Ctx) ->
    com_day_cq_dam_core_impl_unzip_unzip_config(Ctx, #{}).

-spec com_day_cq_dam_core_impl_unzip_unzip_config(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_impl_unzip_unzip_config_info:openapi_com_day_cq_dam_core_impl_unzip_unzip_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_impl_unzip_unzip_config(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.config.unzip.maxuncompressedsize', 'cq.dam.config.unzip.encoding'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_process_exif_tool_extract_metadata_process(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_process_exif_tool_extract_metadata_process_info:openapi_com_day_cq_dam_core_process_exif_tool_extract_metadata_process_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_process_exif_tool_extract_metadata_process(Ctx) ->
    com_day_cq_dam_core_process_exif_tool_extract_metadata_process(Ctx, #{}).

-spec com_day_cq_dam_core_process_exif_tool_extract_metadata_process(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_process_exif_tool_extract_metadata_process_info:openapi_com_day_cq_dam_core_process_exif_tool_extract_metadata_process_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_process_exif_tool_extract_metadata_process(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'process.label', 'cq.dam.enable.sha1'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_process_extract_metadata_process(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_process_extract_metadata_process_info:openapi_com_day_cq_dam_core_process_extract_metadata_process_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_process_extract_metadata_process(Ctx) ->
    com_day_cq_dam_core_process_extract_metadata_process(Ctx, #{}).

-spec com_day_cq_dam_core_process_extract_metadata_process(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_process_extract_metadata_process_info:openapi_com_day_cq_dam_core_process_extract_metadata_process_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_process_extract_metadata_process(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'process.label', 'cq.dam.enable.sha1'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_core_process_metadata_processor_process(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_core_process_metadata_processor_process_info:openapi_com_day_cq_dam_core_process_metadata_processor_process_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_process_metadata_processor_process(Ctx) ->
    com_day_cq_dam_core_process_metadata_processor_process(Ctx, #{}).

-spec com_day_cq_dam_core_process_metadata_processor_process(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_core_process_metadata_processor_process_info:openapi_com_day_cq_dam_core_process_metadata_processor_process_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_core_process_metadata_processor_process(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'process.label', 'cq.dam.enable.sha1', 'cq.dam.metadata.xssprotected.properties'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_handler_ffmpeg_locator_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_handler_ffmpeg_locator_impl_info:openapi_com_day_cq_dam_handler_ffmpeg_locator_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_handler_ffmpeg_locator_impl(Ctx) ->
    com_day_cq_dam_handler_ffmpeg_locator_impl(Ctx, #{}).

-spec com_day_cq_dam_handler_ffmpeg_locator_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_handler_ffmpeg_locator_impl_info:openapi_com_day_cq_dam_handler_ffmpeg_locator_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_handler_ffmpeg_locator_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'executable.searchpath'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl_info:openapi_com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl(Ctx) ->
    com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl(Ctx, #{}).

-spec com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl_info:openapi_com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'event.filter', 'fontmgr.system.font.dir', 'fontmgr.adobe.font.dir', 'fontmgr.customer.font.dir'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_handler_standard_pdf_pdf_handler(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_handler_standard_pdf_pdf_handler_info:openapi_com_day_cq_dam_handler_standard_pdf_pdf_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_handler_standard_pdf_pdf_handler(Ctx) ->
    com_day_cq_dam_handler_standard_pdf_pdf_handler(Ctx, #{}).

-spec com_day_cq_dam_handler_standard_pdf_pdf_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_handler_standard_pdf_pdf_handler_info:openapi_com_day_cq_dam_handler_standard_pdf_pdf_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_handler_standard_pdf_pdf_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'raster.annotation'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_handler_standard_ps_post_script_handler(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_handler_standard_ps_post_script_handler_info:openapi_com_day_cq_dam_handler_standard_ps_post_script_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_handler_standard_ps_post_script_handler(Ctx) ->
    com_day_cq_dam_handler_standard_ps_post_script_handler(Ctx, #{}).

-spec com_day_cq_dam_handler_standard_ps_post_script_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_handler_standard_ps_post_script_handler_info:openapi_com_day_cq_dam_handler_standard_ps_post_script_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_handler_standard_ps_post_script_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'raster.annotation'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_handler_standard_psd_psd_handler(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_handler_standard_psd_psd_handler_info:openapi_com_day_cq_dam_handler_standard_psd_psd_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_handler_standard_psd_psd_handler(Ctx) ->
    com_day_cq_dam_handler_standard_psd_psd_handler(Ctx, #{}).

-spec com_day_cq_dam_handler_standard_psd_psd_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_handler_standard_psd_psd_handler_info:openapi_com_day_cq_dam_handler_standard_psd_psd_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_handler_standard_psd_psd_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'large_file_threshold'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_ids_impl_ids_job_processor(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_ids_impl_ids_job_processor_info:openapi_com_day_cq_dam_ids_impl_ids_job_processor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_ids_impl_ids_job_processor(Ctx) ->
    com_day_cq_dam_ids_impl_ids_job_processor(Ctx, #{}).

-spec com_day_cq_dam_ids_impl_ids_job_processor(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_ids_impl_ids_job_processor_info:openapi_com_day_cq_dam_ids_impl_ids_job_processor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_ids_impl_ids_job_processor(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enable.multisession', 'ids.cc.enable', 'enable.retry', 'enable.retry.scripterror', 'externalizer.domain.cqhost', 'externalizer.domain.http'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_ids_impl_ids_pool_manager_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_ids_impl_ids_pool_manager_impl_info:openapi_com_day_cq_dam_ids_impl_ids_pool_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_ids_impl_ids_pool_manager_impl(Ctx) ->
    com_day_cq_dam_ids_impl_ids_pool_manager_impl(Ctx, #{}).

-spec com_day_cq_dam_ids_impl_ids_pool_manager_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_ids_impl_ids_pool_manager_impl_info:openapi_com_day_cq_dam_ids_impl_ids_pool_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_ids_impl_ids_pool_manager_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'max.errors.to.blacklist', 'retry.interval.to.whitelist', 'connect.timeout', 'socket.timeout', 'process.label', 'connection.use.max'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_indd_impl_handler_indesign_xmp_handler(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_indd_impl_handler_indesign_xmp_handler_info:openapi_com_day_cq_dam_indd_impl_handler_indesign_xmp_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_indd_impl_handler_indesign_xmp_handler(Ctx) ->
    com_day_cq_dam_indd_impl_handler_indesign_xmp_handler(Ctx, #{}).

-spec com_day_cq_dam_indd_impl_handler_indesign_xmp_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_indd_impl_handler_indesign_xmp_handler_info:openapi_com_day_cq_dam_indd_impl_handler_indesign_xmp_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_indd_impl_handler_indesign_xmp_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'process.label', 'extract.pages'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet_info:openapi_com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet(Ctx) ->
    com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet(Ctx, #{}).

-spec com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet_info:openapi_com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'snippetcreation.maxcollections'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_indd_process_indd_media_extract_process(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_indd_process_indd_media_extract_process_info:openapi_com_day_cq_dam_indd_process_indd_media_extract_process_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_indd_process_indd_media_extract_process(Ctx) ->
    com_day_cq_dam_indd_process_indd_media_extract_process(Ctx, #{}).

-spec com_day_cq_dam_indd_process_indd_media_extract_process(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_indd_process_indd_media_extract_process_info:openapi_com_day_cq_dam_indd_process_indd_media_extract_process_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_indd_process_indd_media_extract_process(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'process.label', 'cq.dam.indd.pages.regex', 'ids.job.decoupled', 'ids.job.workflow.model'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_performance_internal_asset_performance_data_handler_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_performance_internal_asset_performance_data_handler_impl_info:openapi_com_day_cq_dam_performance_internal_asset_performance_data_handler_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_performance_internal_asset_performance_data_handler_impl(Ctx) ->
    com_day_cq_dam_performance_internal_asset_performance_data_handler_impl(Ctx, #{}).

-spec com_day_cq_dam_performance_internal_asset_performance_data_handler_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_performance_internal_asset_performance_data_handler_impl_info:openapi_com_day_cq_dam_performance_internal_asset_performance_data_handler_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_performance_internal_asset_performance_data_handler_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'batch.commit.size'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_performance_internal_asset_performance_report_sync_job(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_performance_internal_asset_performance_report_sync_job_info:openapi_com_day_cq_dam_performance_internal_asset_performance_report_sync_job_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_performance_internal_asset_performance_report_sync_job(Ctx) ->
    com_day_cq_dam_performance_internal_asset_performance_report_sync_job(Ctx, #{}).

-spec com_day_cq_dam_performance_internal_asset_performance_report_sync_job(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_performance_internal_asset_performance_report_sync_job_info:openapi_com_day_cq_dam_performance_internal_asset_performance_report_sync_job_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_performance_internal_asset_performance_report_sync_job(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'scheduler.expression'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro_info:openapi_com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro(Ctx) ->
    com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro(Ctx, #{}).

-spec com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro_info:openapi_com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'delete.zip.file'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even_info:openapi_com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even(Ctx) ->
    com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even(Ctx, #{}).

-spec com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even_info:openapi_com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner_info:openapi_com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner(Ctx) ->
    com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner(Ctx, #{}).

-spec com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner_info:openapi_com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'scheduler.expression', 'scheduler.concurrent'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_s7dam_common_post_servlets_set_create_handler(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_s7dam_common_post_servlets_set_create_handler_info:openapi_com_day_cq_dam_s7dam_common_post_servlets_set_create_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_s7dam_common_post_servlets_set_create_handler(Ctx) ->
    com_day_cq_dam_s7dam_common_post_servlets_set_create_handler(Ctx, #{}).

-spec com_day_cq_dam_s7dam_common_post_servlets_set_create_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_s7dam_common_post_servlets_set_create_handler_info:openapi_com_day_cq_dam_s7dam_common_post_servlets_set_create_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_s7dam_common_post_servlets_set_create_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'sling.post.operation', 'sling.servlet.methods'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler_info:openapi_com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler(Ctx) ->
    com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler(Ctx, #{}).

-spec com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler_info:openapi_com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'sling.post.operation', 'sling.servlet.methods'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process_info:openapi_com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process(Ctx) ->
    com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process(Ctx, #{}).

-spec com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process_info:openapi_com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'process.label'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener_info:openapi_com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener(Ctx) ->
    com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener(Ctx, #{}).

-spec com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener_info:openapi_com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.s7dam.damchangeeventlistener.enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet_info:openapi_com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet(Ctx) ->
    com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet(Ctx, #{}).

-spec com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet_info:openapi_com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'sling.servlet.paths', 'sling.servlet.methods'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl_info:openapi_com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl(Ctx) ->
    com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl(Ctx, #{}).

-spec com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl_info:openapi_com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name', 'cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name', 'cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name', 'cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name', 'cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name', 'cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name', 'cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_scene7_impl_scene7_api_client_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_scene7_impl_scene7_api_client_impl_info:openapi_com_day_cq_dam_scene7_impl_scene7_api_client_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_scene7_impl_scene7_api_client_impl(Ctx) ->
    com_day_cq_dam_scene7_impl_scene7_api_client_impl(Ctx, #{}).

-spec com_day_cq_dam_scene7_impl_scene7_api_client_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_scene7_impl_scene7_api_client_impl_info:openapi_com_day_cq_dam_scene7_impl_scene7_api_client_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_scene7_impl_scene7_api_client_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.scene7.apiclient.recordsperpage.nofilter.name', 'cq.dam.scene7.apiclient.recordsperpage.withfilter.name'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl_info:openapi_com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl(Ctx) ->
    com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl(Ctx, #{}).

-spec com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl_info:openapi_com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.scene7.assetmimetypeservice.mapping'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_scene7_impl_scene7_configuration_event_listener(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_scene7_impl_scene7_configuration_event_listener_info:openapi_com_day_cq_dam_scene7_impl_scene7_configuration_event_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_scene7_impl_scene7_configuration_event_listener(Ctx) ->
    com_day_cq_dam_scene7_impl_scene7_configuration_event_listener(Ctx, #{}).

-spec com_day_cq_dam_scene7_impl_scene7_configuration_event_listener(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_scene7_impl_scene7_configuration_event_listener_info:openapi_com_day_cq_dam_scene7_impl_scene7_configuration_event_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_scene7_impl_scene7_configuration_event_listener(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.scene7.configurationeventlistener.enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener_info:openapi_com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener(Ctx) ->
    com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener(Ctx, #{}).

-spec com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener_info:openapi_com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.scene7.damchangeeventlistener.enabled', 'cq.dam.scene7.damchangeeventlistener.observed.paths'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl_info:openapi_com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl(Ctx) ->
    com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl(Ctx, #{}).

-spec com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl_info:openapi_com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'scene7FlashTemplates.rti', 'scene7FlashTemplates.rsi', 'scene7FlashTemplates.rb', 'scene7FlashTemplates.rurl', 'scene7FlashTemplate.urlFormatParameter'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_scene7_impl_scene7_upload_service_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_scene7_impl_scene7_upload_service_impl_info:openapi_com_day_cq_dam_scene7_impl_scene7_upload_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_scene7_impl_scene7_upload_service_impl(Ctx) ->
    com_day_cq_dam_scene7_impl_scene7_upload_service_impl(Ctx, #{}).

-spec com_day_cq_dam_scene7_impl_scene7_upload_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_scene7_impl_scene7_upload_service_impl_info:openapi_com_day_cq_dam_scene7_impl_scene7_upload_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_scene7_impl_scene7_upload_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.dam.scene7.uploadservice.activejobtimeout.label', 'cq.dam.scene7.uploadservice.connectionmaxperroute.label'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser_info:openapi_com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser(Ctx) ->
    com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser(Ctx, #{}).

-spec com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser_info:openapi_com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'getCacheExpirationUnit', 'getCacheExpirationValue'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_stock_integration_impl_configuration_stock_configuration(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_stock_integration_impl_configuration_stock_configuration_info:openapi_com_day_cq_dam_stock_integration_impl_configuration_stock_configuration_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_stock_integration_impl_configuration_stock_configuration(Ctx) ->
    com_day_cq_dam_stock_integration_impl_configuration_stock_configuration(Ctx, #{}).

-spec com_day_cq_dam_stock_integration_impl_configuration_stock_configuration(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_stock_integration_impl_configuration_stock_configuration_info:openapi_com_day_cq_dam_stock_integration_impl_configuration_stock_configuration_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_stock_integration_impl_configuration_stock_configuration(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'locale', 'imsConfig'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_dam_video_impl_servlet_video_test_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_dam_video_impl_servlet_video_test_servlet_info:openapi_com_day_cq_dam_video_impl_servlet_video_test_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_video_impl_servlet_video_test_servlet(Ctx) ->
    com_day_cq_dam_video_impl_servlet_video_test_servlet(Ctx, #{}).

-spec com_day_cq_dam_video_impl_servlet_video_test_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_dam_video_impl_servlet_video_test_servlet_info:openapi_com_day_cq_dam_video_impl_servlet_video_test_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_dam_video_impl_servlet_video_test_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_extwidget_servlets_image_sprite_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_extwidget_servlets_image_sprite_servlet_info:openapi_com_day_cq_extwidget_servlets_image_sprite_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_extwidget_servlets_image_sprite_servlet(Ctx) ->
    com_day_cq_extwidget_servlets_image_sprite_servlet(Ctx, #{}).

-spec com_day_cq_extwidget_servlets_image_sprite_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_extwidget_servlets_image_sprite_servlet_info:openapi_com_day_cq_extwidget_servlets_image_sprite_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_extwidget_servlets_image_sprite_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'maxWidth', 'maxHeight'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_image_internal_font_font_helper(ctx:ctx()) -> {ok, openapi_com_day_cq_image_internal_font_font_helper_info:openapi_com_day_cq_image_internal_font_font_helper_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_image_internal_font_font_helper(Ctx) ->
    com_day_cq_image_internal_font_font_helper(Ctx, #{}).

-spec com_day_cq_image_internal_font_font_helper(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_image_internal_font_font_helper_info:openapi_com_day_cq_image_internal_font_font_helper_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_image_internal_font_font_helper(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.image.internal.font.FontHelper"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'fontpath', 'oversamplingFactor'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_jcrclustersupport_cluster_start_level_controller(ctx:ctx()) -> {ok, openapi_com_day_cq_jcrclustersupport_cluster_start_level_controller_info:openapi_com_day_cq_jcrclustersupport_cluster_start_level_controller_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_jcrclustersupport_cluster_start_level_controller(Ctx) ->
    com_day_cq_jcrclustersupport_cluster_start_level_controller(Ctx, #{}).

-spec com_day_cq_jcrclustersupport_cluster_start_level_controller(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_jcrclustersupport_cluster_start_level_controller_info:openapi_com_day_cq_jcrclustersupport_cluster_start_level_controller_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_jcrclustersupport_cluster_start_level_controller(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cluster.level.enable', 'cluster.master.level', 'cluster.slave.level'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_mailer_default_mail_service(ctx:ctx()) -> {ok, openapi_com_day_cq_mailer_default_mail_service_info:openapi_com_day_cq_mailer_default_mail_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mailer_default_mail_service(Ctx) ->
    com_day_cq_mailer_default_mail_service(Ctx, #{}).

-spec com_day_cq_mailer_default_mail_service(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_mailer_default_mail_service_info:openapi_com_day_cq_mailer_default_mail_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mailer_default_mail_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.mailer.DefaultMailService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'smtp.host', 'smtp.port', 'smtp.user', 'smtp.password', 'from.address', 'smtp.ssl', 'smtp.starttls', 'debug.email'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_mailer_impl_cq_mailing_service(ctx:ctx()) -> {ok, openapi_com_day_cq_mailer_impl_cq_mailing_service_info:openapi_com_day_cq_mailer_impl_cq_mailing_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mailer_impl_cq_mailing_service(Ctx) ->
    com_day_cq_mailer_impl_cq_mailing_service(Ctx, #{}).

-spec com_day_cq_mailer_impl_cq_mailing_service(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_mailer_impl_cq_mailing_service_info:openapi_com_day_cq_mailer_impl_cq_mailing_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mailer_impl_cq_mailing_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.mailer.impl.CqMailingService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'max.recipient.count'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_mailer_impl_email_cq_email_template_factory(ctx:ctx()) -> {ok, openapi_com_day_cq_mailer_impl_email_cq_email_template_factory_info:openapi_com_day_cq_mailer_impl_email_cq_email_template_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mailer_impl_email_cq_email_template_factory(Ctx) ->
    com_day_cq_mailer_impl_email_cq_email_template_factory(Ctx, #{}).

-spec com_day_cq_mailer_impl_email_cq_email_template_factory(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_mailer_impl_email_cq_email_template_factory_info:openapi_com_day_cq_mailer_impl_email_cq_email_template_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mailer_impl_email_cq_email_template_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'mailer.email.charset'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_mailer_impl_email_cq_retriever_template_factory(ctx:ctx()) -> {ok, openapi_com_day_cq_mailer_impl_email_cq_retriever_template_factory_info:openapi_com_day_cq_mailer_impl_email_cq_retriever_template_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mailer_impl_email_cq_retriever_template_factory(Ctx) ->
    com_day_cq_mailer_impl_email_cq_retriever_template_factory(Ctx, #{}).

-spec com_day_cq_mailer_impl_email_cq_retriever_template_factory(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_mailer_impl_email_cq_retriever_template_factory_info:openapi_com_day_cq_mailer_impl_email_cq_retriever_template_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mailer_impl_email_cq_retriever_template_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'mailer.email.embed', 'mailer.email.charset', 'mailer.email.retrieverUserID', 'mailer.email.retrieverUserPWD'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_mcm_campaign_impl_integration_config_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_mcm_campaign_impl_integration_config_impl_info:openapi_com_day_cq_mcm_campaign_impl_integration_config_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mcm_campaign_impl_integration_config_impl(Ctx) ->
    com_day_cq_mcm_campaign_impl_integration_config_impl(Ctx, #{}).

-spec com_day_cq_mcm_campaign_impl_integration_config_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_mcm_campaign_impl_integration_config_impl_info:openapi_com_day_cq_mcm_campaign_impl_integration_config_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mcm_campaign_impl_integration_config_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'aem.mcm.campaign.formConstraints', 'aem.mcm.campaign.publicUrl', 'aem.mcm.campaign.relaxedSSL'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_mcm_campaign_importer_personalized_text_handler_factory(ctx:ctx()) -> {ok, openapi_com_day_cq_mcm_campaign_importer_personalized_text_handler_factory_info:openapi_com_day_cq_mcm_campaign_importer_personalized_text_handler_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mcm_campaign_importer_personalized_text_handler_factory(Ctx) ->
    com_day_cq_mcm_campaign_importer_personalized_text_handler_factory(Ctx, #{}).

-spec com_day_cq_mcm_campaign_importer_personalized_text_handler_factory(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_mcm_campaign_importer_personalized_text_handler_factory_info:openapi_com_day_cq_mcm_campaign_importer_personalized_text_handler_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mcm_campaign_importer_personalized_text_handler_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'tagpattern'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_mcm_core_newsletter_newsletter_email_service_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_mcm_core_newsletter_newsletter_email_service_impl_info:openapi_com_day_cq_mcm_core_newsletter_newsletter_email_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mcm_core_newsletter_newsletter_email_service_impl(Ctx) ->
    com_day_cq_mcm_core_newsletter_newsletter_email_service_impl(Ctx, #{}).

-spec com_day_cq_mcm_core_newsletter_newsletter_email_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_mcm_core_newsletter_newsletter_email_service_impl_info:openapi_com_day_cq_mcm_core_newsletter_newsletter_email_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mcm_core_newsletter_newsletter_email_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'from.address', 'sender.host', 'max.bounce.count'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_mcm_impl_mcm_configuration(ctx:ctx()) -> {ok, openapi_com_day_cq_mcm_impl_mcm_configuration_info:openapi_com_day_cq_mcm_impl_mcm_configuration_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mcm_impl_mcm_configuration(Ctx) ->
    com_day_cq_mcm_impl_mcm_configuration(Ctx, #{}).

-spec com_day_cq_mcm_impl_mcm_configuration(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_mcm_impl_mcm_configuration_info:openapi_com_day_cq_mcm_impl_mcm_configuration_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mcm_impl_mcm_configuration(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'experience.indirection', 'touchpoint.indirection'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen(ctx:ctx()) -> {ok, openapi_com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen_info:openapi_com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen(Ctx) ->
    com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen(Ctx, #{}).

-spec com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen_info:openapi_com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'tagpattern', 'component.resourceType'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug(ctx:ctx()) -> {ok, openapi_com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug_info:openapi_com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug(Ctx) ->
    com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug(Ctx, #{}).

-spec com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug_info:openapi_com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'tagpattern', 'component.resourceType'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component(ctx:ctx()) -> {ok, openapi_com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component_info:openapi_com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component(Ctx) ->
    com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component(Ctx, #{}).

-spec com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component_info:openapi_com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'tagpattern'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha(ctx:ctx()) -> {ok, openapi_com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha_info:openapi_com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha(Ctx) ->
    com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha(Ctx, #{}).

-spec com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha_info:openapi_com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'tagpattern'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h(ctx:ctx()) -> {ok, openapi_com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h_info:openapi_com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h(Ctx) ->
    com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h(Ctx, #{}).

-spec com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h_info:openapi_com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'tagpattern', 'component.resourceType'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_notification_impl_notification_service_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_notification_impl_notification_service_impl_info:openapi_com_day_cq_notification_impl_notification_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_notification_impl_notification_service_impl(Ctx) ->
    com_day_cq_notification_impl_notification_service_impl(Ctx, #{}).

-spec com_day_cq_notification_impl_notification_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_notification_impl_notification_service_impl_info:openapi_com_day_cq_notification_impl_notification_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_notification_impl_notification_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'event.filter'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_personalization_impl_servlets_targeting_configuration_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_personalization_impl_servlets_targeting_configuration_servlet_info:openapi_com_day_cq_personalization_impl_servlets_targeting_configuration_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_personalization_impl_servlets_targeting_configuration_servlet(Ctx) ->
    com_day_cq_personalization_impl_servlets_targeting_configuration_servlet(Ctx, #{}).

-spec com_day_cq_personalization_impl_servlets_targeting_configuration_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_personalization_impl_servlets_targeting_configuration_servlet_info:openapi_com_day_cq_personalization_impl_servlets_targeting_configuration_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_personalization_impl_servlets_targeting_configuration_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'forcelocation'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_polling_importer_impl_managed_poll_config_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_polling_importer_impl_managed_poll_config_impl_info:openapi_com_day_cq_polling_importer_impl_managed_poll_config_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_polling_importer_impl_managed_poll_config_impl(Ctx) ->
    com_day_cq_polling_importer_impl_managed_poll_config_impl(Ctx, #{}).

-spec com_day_cq_polling_importer_impl_managed_poll_config_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_polling_importer_impl_managed_poll_config_impl_info:openapi_com_day_cq_polling_importer_impl_managed_poll_config_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_polling_importer_impl_managed_poll_config_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'id', 'enabled', 'reference', 'interval', 'expression', 'source', 'target', 'login', 'password'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_polling_importer_impl_managed_polling_importer_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_polling_importer_impl_managed_polling_importer_impl_info:openapi_com_day_cq_polling_importer_impl_managed_polling_importer_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_polling_importer_impl_managed_polling_importer_impl(Ctx) ->
    com_day_cq_polling_importer_impl_managed_polling_importer_impl(Ctx, #{}).

-spec com_day_cq_polling_importer_impl_managed_polling_importer_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_polling_importer_impl_managed_polling_importer_impl_info:openapi_com_day_cq_polling_importer_impl_managed_polling_importer_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_polling_importer_impl_managed_polling_importer_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'importer.user'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_polling_importer_impl_polling_importer_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_polling_importer_impl_polling_importer_impl_info:openapi_com_day_cq_polling_importer_impl_polling_importer_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_polling_importer_impl_polling_importer_impl(Ctx) ->
    com_day_cq_polling_importer_impl_polling_importer_impl(Ctx, #{}).

-spec com_day_cq_polling_importer_impl_polling_importer_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_polling_importer_impl_polling_importer_impl_info:openapi_com_day_cq_polling_importer_impl_polling_importer_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_polling_importer_impl_polling_importer_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'importer.min.interval', 'importer.user', 'exclude.paths', 'include.paths'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_replication_audit_replication_event_listener(ctx:ctx()) -> {ok, openapi_com_day_cq_replication_audit_replication_event_listener_info:openapi_com_day_cq_replication_audit_replication_event_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_replication_audit_replication_event_listener(Ctx) ->
    com_day_cq_replication_audit_replication_event_listener(Ctx, #{}).

-spec com_day_cq_replication_audit_replication_event_listener(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_replication_audit_replication_event_listener_info:openapi_com_day_cq_replication_audit_replication_event_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_replication_audit_replication_event_listener(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_replication_content_static_content_builder(ctx:ctx()) -> {ok, openapi_com_day_cq_replication_content_static_content_builder_info:openapi_com_day_cq_replication_content_static_content_builder_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_replication_content_static_content_builder(Ctx) ->
    com_day_cq_replication_content_static_content_builder(Ctx, #{}).

-spec com_day_cq_replication_content_static_content_builder(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_replication_content_static_content_builder_info:openapi_com_day_cq_replication_content_static_content_builder_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_replication_content_static_content_builder(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'host', 'port'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_replication_impl_agent_manager_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_replication_impl_agent_manager_impl_info:openapi_com_day_cq_replication_impl_agent_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_replication_impl_agent_manager_impl(Ctx) ->
    com_day_cq_replication_impl_agent_manager_impl(Ctx, #{}).

-spec com_day_cq_replication_impl_agent_manager_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_replication_impl_agent_manager_impl_info:openapi_com_day_cq_replication_impl_agent_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_replication_impl_agent_manager_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'job.topics', 'serviceUser.target', 'agentProvider.target'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_replication_impl_content_durbo_binary_less_content_builder(ctx:ctx()) -> {ok, openapi_com_day_cq_replication_impl_content_durbo_binary_less_content_builder_info:openapi_com_day_cq_replication_impl_content_durbo_binary_less_content_builder_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_replication_impl_content_durbo_binary_less_content_builder(Ctx) ->
    com_day_cq_replication_impl_content_durbo_binary_less_content_builder(Ctx, #{}).

-spec com_day_cq_replication_impl_content_durbo_binary_less_content_builder(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_replication_impl_content_durbo_binary_less_content_builder_info:openapi_com_day_cq_replication_impl_content_durbo_binary_less_content_builder_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_replication_impl_content_durbo_binary_less_content_builder(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'binary.threshold'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov(ctx:ctx()) -> {ok, openapi_com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov_info:openapi_com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov(Ctx) ->
    com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov(Ctx, #{}).

-spec com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov_info:openapi_com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'preserve.hierarchy.nodes', 'ignore.versioning', 'import.acl', 'save.threshold', 'preserve.user.paths', 'preserve.uuid', 'preserve.uuid.nodetypes', 'preserve.uuid.subtrees', 'auto.commit'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_replication_impl_replication_content_factory_provider_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_replication_impl_replication_content_factory_provider_impl_info:openapi_com_day_cq_replication_impl_replication_content_factory_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_replication_impl_replication_content_factory_provider_impl(Ctx) ->
    com_day_cq_replication_impl_replication_content_factory_provider_impl(Ctx, #{}).

-spec com_day_cq_replication_impl_replication_content_factory_provider_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_replication_impl_replication_content_factory_provider_impl_info:openapi_com_day_cq_replication_impl_replication_content_factory_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_replication_impl_replication_content_factory_provider_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'replication.content.useFileStorage', 'replication.content.maxCommitAttempts'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_replication_impl_replication_receiver_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_replication_impl_replication_receiver_impl_info:openapi_com_day_cq_replication_impl_replication_receiver_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_replication_impl_replication_receiver_impl(Ctx) ->
    com_day_cq_replication_impl_replication_receiver_impl(Ctx, #{}).

-spec com_day_cq_replication_impl_replication_receiver_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_replication_impl_replication_receiver_impl_info:openapi_com_day_cq_replication_impl_replication_receiver_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_replication_impl_replication_receiver_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'receiver.tmpfile.threshold', 'receiver.packages.use.install'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_replication_impl_replicator_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_replication_impl_replicator_impl_info:openapi_com_day_cq_replication_impl_replicator_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_replication_impl_replicator_impl(Ctx) ->
    com_day_cq_replication_impl_replicator_impl(Ctx, #{}).

-spec com_day_cq_replication_impl_replicator_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_replication_impl_replicator_impl_info:openapi_com_day_cq_replication_impl_replicator_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_replication_impl_replicator_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'distribute_events'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_replication_impl_reverse_replicator(ctx:ctx()) -> {ok, openapi_com_day_cq_replication_impl_reverse_replicator_info:openapi_com_day_cq_replication_impl_reverse_replicator_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_replication_impl_reverse_replicator(Ctx) ->
    com_day_cq_replication_impl_reverse_replicator(Ctx, #{}).

-spec com_day_cq_replication_impl_reverse_replicator(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_replication_impl_reverse_replicator_info:openapi_com_day_cq_replication_impl_reverse_replicator_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_replication_impl_reverse_replicator(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'scheduler.period'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_replication_impl_transport_binary_less_transport_handler(ctx:ctx()) -> {ok, openapi_com_day_cq_replication_impl_transport_binary_less_transport_handler_info:openapi_com_day_cq_replication_impl_transport_binary_less_transport_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_replication_impl_transport_binary_less_transport_handler(Ctx) ->
    com_day_cq_replication_impl_transport_binary_less_transport_handler(Ctx, #{}).

-spec com_day_cq_replication_impl_transport_binary_less_transport_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_replication_impl_transport_binary_less_transport_handler_info:openapi_com_day_cq_replication_impl_transport_binary_less_transport_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_replication_impl_transport_binary_less_transport_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'disabled.cipher.suites', 'enabled.cipher.suites'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_replication_impl_transport_http(ctx:ctx()) -> {ok, openapi_com_day_cq_replication_impl_transport_http_info:openapi_com_day_cq_replication_impl_transport_http_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_replication_impl_transport_http(Ctx) ->
    com_day_cq_replication_impl_transport_http(Ctx, #{}).

-spec com_day_cq_replication_impl_transport_http(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_replication_impl_transport_http_info:openapi_com_day_cq_replication_impl_transport_http_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_replication_impl_transport_http(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.replication.impl.transport.Http"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'disabled.cipher.suites', 'enabled.cipher.suites'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_reporting_impl_cache_cache_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_reporting_impl_cache_cache_impl_info:openapi_com_day_cq_reporting_impl_cache_cache_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_reporting_impl_cache_cache_impl(Ctx) ->
    com_day_cq_reporting_impl_cache_cache_impl(Ctx, #{}).

-spec com_day_cq_reporting_impl_cache_cache_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_reporting_impl_cache_cache_impl_info:openapi_com_day_cq_reporting_impl_cache_cache_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_reporting_impl_cache_cache_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'repcache.enable', 'repcache.ttl', 'repcache.max'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_reporting_impl_config_service_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_reporting_impl_config_service_impl_info:openapi_com_day_cq_reporting_impl_config_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_reporting_impl_config_service_impl(Ctx) ->
    com_day_cq_reporting_impl_config_service_impl(Ctx, #{}).

-spec com_day_cq_reporting_impl_config_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_reporting_impl_config_service_impl_info:openapi_com_day_cq_reporting_impl_config_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_reporting_impl_config_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'repconf.timezone', 'repconf.locale', 'repconf.snapshots', 'repconf.repdir', 'repconf.hourofday', 'repconf.minofhour', 'repconf.maxrows', 'repconf.fakedata', 'repconf.snapshotuser', 'repconf.enforcesnapshotuser'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_reporting_impl_r_log_analyzer(ctx:ctx()) -> {ok, openapi_com_day_cq_reporting_impl_r_log_analyzer_info:openapi_com_day_cq_reporting_impl_r_log_analyzer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_reporting_impl_r_log_analyzer(Ctx) ->
    com_day_cq_reporting_impl_r_log_analyzer(Ctx, #{}).

-spec com_day_cq_reporting_impl_r_log_analyzer(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_reporting_impl_r_log_analyzer_info:openapi_com_day_cq_reporting_impl_r_log_analyzer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_reporting_impl_r_log_analyzer(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'request.log.output'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_rewriter_linkchecker_impl_link_checker_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_rewriter_linkchecker_impl_link_checker_impl_info:openapi_com_day_cq_rewriter_linkchecker_impl_link_checker_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_rewriter_linkchecker_impl_link_checker_impl(Ctx) ->
    com_day_cq_rewriter_linkchecker_impl_link_checker_impl(Ctx, #{}).

-spec com_day_cq_rewriter_linkchecker_impl_link_checker_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_rewriter_linkchecker_impl_link_checker_impl_info:openapi_com_day_cq_rewriter_linkchecker_impl_link_checker_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_rewriter_linkchecker_impl_link_checker_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'scheduler.period', 'scheduler.concurrent', 'service.bad_link_tolerance_interval', 'service.check_override_patterns', 'service.cache_broken_internal_links', 'service.special_link_prefix', 'service.special_link_patterns'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_rewriter_linkchecker_impl_link_checker_task(ctx:ctx()) -> {ok, openapi_com_day_cq_rewriter_linkchecker_impl_link_checker_task_info:openapi_com_day_cq_rewriter_linkchecker_impl_link_checker_task_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_rewriter_linkchecker_impl_link_checker_task(Ctx) ->
    com_day_cq_rewriter_linkchecker_impl_link_checker_task(Ctx, #{}).

-spec com_day_cq_rewriter_linkchecker_impl_link_checker_task(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_rewriter_linkchecker_impl_link_checker_task_info:openapi_com_day_cq_rewriter_linkchecker_impl_link_checker_task_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_rewriter_linkchecker_impl_link_checker_task(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'scheduler.period', 'scheduler.concurrent', 'good_link_test_interval', 'bad_link_test_interval', 'link_unused_interval', 'connection.timeout'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory(ctx:ctx()) -> {ok, openapi_com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory_info:openapi_com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory(Ctx) ->
    com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory(Ctx, #{}).

-spec com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory_info:openapi_com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'linkcheckertransformer.disableRewriting', 'linkcheckertransformer.disableChecking', 'linkcheckertransformer.mapCacheSize', 'linkcheckertransformer.strictExtensionCheck', 'linkcheckertransformer.stripHtmltExtension', 'linkcheckertransformer.rewriteElements', 'linkcheckertransformer.stripExtensionPathBlacklist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl_info:openapi_com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl(Ctx) ->
    com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl(Ctx, #{}).

-spec com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl_info:openapi_com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.max_links_per_host', 'service.save_external_link_references'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_rewriter_processor_impl_html_parser_factory(ctx:ctx()) -> {ok, openapi_com_day_cq_rewriter_processor_impl_html_parser_factory_info:openapi_com_day_cq_rewriter_processor_impl_html_parser_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_rewriter_processor_impl_html_parser_factory(Ctx) ->
    com_day_cq_rewriter_processor_impl_html_parser_factory(Ctx, #{}).

-spec com_day_cq_rewriter_processor_impl_html_parser_factory(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_rewriter_processor_impl_html_parser_factory_info:openapi_com_day_cq_rewriter_processor_impl_html_parser_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_rewriter_processor_impl_html_parser_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'htmlparser.processTags', 'htmlparser.preserveCamelCase'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_search_impl_builder_query_builder_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_search_impl_builder_query_builder_impl_info:openapi_com_day_cq_search_impl_builder_query_builder_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_search_impl_builder_query_builder_impl(Ctx) ->
    com_day_cq_search_impl_builder_query_builder_impl(Ctx, #{}).

-spec com_day_cq_search_impl_builder_query_builder_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_search_impl_builder_query_builder_impl_info:openapi_com_day_cq_search_impl_builder_query_builder_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_search_impl_builder_query_builder_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'excerpt.properties', 'cache.max.entries', 'cache.entry.lifetime', 'xpath.union'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_search_suggest_impl_suggestion_index_manager_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_search_suggest_impl_suggestion_index_manager_impl_info:openapi_com_day_cq_search_suggest_impl_suggestion_index_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_search_suggest_impl_suggestion_index_manager_impl(Ctx) ->
    com_day_cq_search_suggest_impl_suggestion_index_manager_impl(Ctx, #{}).

-spec com_day_cq_search_suggest_impl_suggestion_index_manager_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_search_suggest_impl_suggestion_index_manager_impl_info:openapi_com_day_cq_search_suggest_impl_suggestion_index_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_search_suggest_impl_suggestion_index_manager_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'pathBuilder.target', 'suggest.basepath'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_searchpromote_impl_publish_search_promote_config_handler(ctx:ctx()) -> {ok, openapi_com_day_cq_searchpromote_impl_publish_search_promote_config_handler_info:openapi_com_day_cq_searchpromote_impl_publish_search_promote_config_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_searchpromote_impl_publish_search_promote_config_handler(Ctx) ->
    com_day_cq_searchpromote_impl_publish_search_promote_config_handler(Ctx, #{}).

-spec com_day_cq_searchpromote_impl_publish_search_promote_config_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_searchpromote_impl_publish_search_promote_config_handler_info:openapi_com_day_cq_searchpromote_impl_publish_search_promote_config_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_searchpromote_impl_publish_search_promote_config_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.searchpromote.confighandler.enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_searchpromote_impl_search_promote_service_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_searchpromote_impl_search_promote_service_impl_info:openapi_com_day_cq_searchpromote_impl_search_promote_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_searchpromote_impl_search_promote_service_impl(Ctx) ->
    com_day_cq_searchpromote_impl_search_promote_service_impl(Ctx, #{}).

-spec com_day_cq_searchpromote_impl_search_promote_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_searchpromote_impl_search_promote_service_impl_info:openapi_com_day_cq_searchpromote_impl_search_promote_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_searchpromote_impl_search_promote_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.searchpromote.configuration.server.uri', 'cq.searchpromote.configuration.environment', 'connection.timeout', 'socket.timeout'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_security_acl_setup(ctx:ctx()) -> {ok, openapi_com_day_cq_security_acl_setup_info:openapi_com_day_cq_security_acl_setup_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_security_acl_setup(Ctx) ->
    com_day_cq_security_acl_setup(Ctx, #{}).

-spec com_day_cq_security_acl_setup(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_security_acl_setup_info:openapi_com_day_cq_security_acl_setup_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_security_acl_setup(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.security.ACLSetup"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.aclsetup.rules'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_statistics_impl_statistics_service_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_statistics_impl_statistics_service_impl_info:openapi_com_day_cq_statistics_impl_statistics_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_statistics_impl_statistics_service_impl(Ctx) ->
    com_day_cq_statistics_impl_statistics_service_impl(Ctx, #{}).

-spec com_day_cq_statistics_impl_statistics_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_statistics_impl_statistics_service_impl_info:openapi_com_day_cq_statistics_impl_statistics_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_statistics_impl_statistics_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'scheduler.period', 'scheduler.concurrent', 'path', 'workspace', 'keywordsPath', 'asyncEntries'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_tagging_impl_jcr_tag_manager_factory_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_tagging_impl_jcr_tag_manager_factory_impl_info:openapi_com_day_cq_tagging_impl_jcr_tag_manager_factory_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_tagging_impl_jcr_tag_manager_factory_impl(Ctx) ->
    com_day_cq_tagging_impl_jcr_tag_manager_factory_impl(Ctx, #{}).

-spec com_day_cq_tagging_impl_jcr_tag_manager_factory_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_tagging_impl_jcr_tag_manager_factory_impl_info:openapi_com_day_cq_tagging_impl_jcr_tag_manager_factory_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_tagging_impl_jcr_tag_manager_factory_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'validation.enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_tagging_impl_search_tag_predicate_evaluator(ctx:ctx()) -> {ok, openapi_com_day_cq_tagging_impl_search_tag_predicate_evaluator_info:openapi_com_day_cq_tagging_impl_search_tag_predicate_evaluator_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_tagging_impl_search_tag_predicate_evaluator(Ctx) ->
    com_day_cq_tagging_impl_search_tag_predicate_evaluator(Ctx, #{}).

-spec com_day_cq_tagging_impl_search_tag_predicate_evaluator(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_tagging_impl_search_tag_predicate_evaluator_info:openapi_com_day_cq_tagging_impl_search_tag_predicate_evaluator_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_tagging_impl_search_tag_predicate_evaluator(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'ignore_path'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_tagging_impl_tag_garbage_collector(ctx:ctx()) -> {ok, openapi_com_day_cq_tagging_impl_tag_garbage_collector_info:openapi_com_day_cq_tagging_impl_tag_garbage_collector_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_tagging_impl_tag_garbage_collector(Ctx) ->
    com_day_cq_tagging_impl_tag_garbage_collector(Ctx, #{}).

-spec com_day_cq_tagging_impl_tag_garbage_collector(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_tagging_impl_tag_garbage_collector_info:openapi_com_day_cq_tagging_impl_tag_garbage_collector_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_tagging_impl_tag_garbage_collector(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'scheduler.expression'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_contentsync_impl_handler_pages_update_handler(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_contentsync_impl_handler_pages_update_handler_info:openapi_com_day_cq_wcm_contentsync_impl_handler_pages_update_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_contentsync_impl_handler_pages_update_handler(Ctx) ->
    com_day_cq_wcm_contentsync_impl_handler_pages_update_handler(Ctx, #{}).

-spec com_day_cq_wcm_contentsync_impl_handler_pages_update_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_contentsync_impl_handler_pages_update_handler_info:openapi_com_day_cq_wcm_contentsync_impl_handler_pages_update_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_contentsync_impl_handler_pages_update_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.pagesupdatehandler.imageresourcetypes'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor_info:openapi_com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor(Ctx) ->
    com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor(Ctx, #{}).

-spec com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor_info:openapi_com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.contentsync.pathrewritertransformer.mapping.links', 'cq.contentsync.pathrewritertransformer.mapping.clientlibs', 'cq.contentsync.pathrewritertransformer.mapping.images', 'cq.contentsync.pathrewritertransformer.attribute.pattern', 'cq.contentsync.pathrewritertransformer.clientlibrary.pattern', 'cq.contentsync.pathrewritertransformer.clientlibrary.replace'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl_info:openapi_com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl(Ctx) ->
    com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl_info:openapi_com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'authoringUIModeService.default'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_commands_wcm_command_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_commands_wcm_command_servlet_info:openapi_com_day_cq_wcm_core_impl_commands_wcm_command_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_commands_wcm_command_servlet(Ctx) ->
    com_day_cq_wcm_core_impl_commands_wcm_command_servlet(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_commands_wcm_command_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_commands_wcm_command_servlet_info:openapi_com_day_cq_wcm_core_impl_commands_wcm_command_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_commands_wcm_command_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'wcmcommandservlet.delete_whitelist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl_info:openapi_com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl(Ctx) ->
    com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl_info:openapi_com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'dim.default.mode', 'dim.appcache.enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_event_page_event_audit_listener(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_event_page_event_audit_listener_info:openapi_com_day_cq_wcm_core_impl_event_page_event_audit_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_event_page_event_audit_listener(Ctx) ->
    com_day_cq_wcm_core_impl_event_page_event_audit_listener(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_event_page_event_audit_listener(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_event_page_event_audit_listener_info:openapi_com_day_cq_wcm_core_impl_event_page_event_audit_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_event_page_event_audit_listener(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'configured'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_event_page_post_processor(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_event_page_post_processor_info:openapi_com_day_cq_wcm_core_impl_event_page_post_processor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_event_page_post_processor(Ctx) ->
    com_day_cq_wcm_core_impl_event_page_post_processor(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_event_page_post_processor(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_event_page_post_processor_info:openapi_com_day_cq_wcm_core_impl_event_page_post_processor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_event_page_post_processor(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'paths'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_event_repository_change_event_listener(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_event_repository_change_event_listener_info:openapi_com_day_cq_wcm_core_impl_event_repository_change_event_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_event_repository_change_event_listener(Ctx) ->
    com_day_cq_wcm_core_impl_event_repository_change_event_listener(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_event_repository_change_event_listener(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_event_repository_change_event_listener_info:openapi_com_day_cq_wcm_core_impl_event_repository_change_event_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_event_repository_change_event_listener(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'paths', 'excludedPaths'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_event_template_post_processor(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_event_template_post_processor_info:openapi_com_day_cq_wcm_core_impl_event_template_post_processor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_event_template_post_processor(Ctx) ->
    com_day_cq_wcm_core_impl_event_template_post_processor(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_event_template_post_processor(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_event_template_post_processor_info:openapi_com_day_cq_wcm_core_impl_event_template_post_processor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_event_template_post_processor(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'paths'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_language_manager_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_language_manager_impl_info:openapi_com_day_cq_wcm_core_impl_language_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_language_manager_impl(Ctx) ->
    com_day_cq_wcm_core_impl_language_manager_impl(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_language_manager_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_language_manager_impl_info:openapi_com_day_cq_wcm_core_impl_language_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_language_manager_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'langmgr.list.path', 'langmgr.country.default'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl_info:openapi_com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl(Ctx) ->
    com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl_info:openapi_com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'link.expired.prefix', 'link.expired.remove', 'link.expired.suffix', 'link.invalid.prefix', 'link.invalid.remove', 'link.invalid.suffix', 'link.predated.prefix', 'link.predated.remove', 'link.predated.suffix', 'link.wcmmodes'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_page_page_info_aggregator_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_page_page_info_aggregator_impl_info:openapi_com_day_cq_wcm_core_impl_page_page_info_aggregator_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_page_page_info_aggregator_impl(Ctx) ->
    com_day_cq_wcm_core_impl_page_page_info_aggregator_impl(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_page_page_info_aggregator_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_page_page_info_aggregator_impl_info:openapi_com_day_cq_wcm_core_impl_page_page_info_aggregator_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_page_page_info_aggregator_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'page.info.provider.property.regex.default', 'page.info.provider.property.name'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_page_page_manager_factory_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_page_page_manager_factory_impl_info:openapi_com_day_cq_wcm_core_impl_page_page_manager_factory_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_page_page_manager_factory_impl(Ctx) ->
    com_day_cq_wcm_core_impl_page_page_manager_factory_impl(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_page_page_manager_factory_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_page_page_manager_factory_impl_info:openapi_com_day_cq_wcm_core_impl_page_page_manager_factory_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_page_page_manager_factory_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'illegalCharMapping', 'pageSubTreeActivationCheck'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_references_content_content_reference_config(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_references_content_content_reference_config_info:openapi_com_day_cq_wcm_core_impl_references_content_content_reference_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_references_content_content_reference_config(Ctx) ->
    com_day_cq_wcm_core_impl_references_content_content_reference_config(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_references_content_content_reference_config(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_references_content_content_reference_config_info:openapi_com_day_cq_wcm_core_impl_references_content_content_reference_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_references_content_content_reference_config(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'contentReferenceConfig.resourceTypes'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler_info:openapi_com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler(Ctx) ->
    com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler_info:openapi_com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'dam.showexpired', 'dam.showhidden', 'tagTitleSearch', 'guessTotal', 'dam.expiryProperty'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie_info:openapi_com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie(Ctx) ->
    com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie_info:openapi_com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'item.resource.types'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler_info:openapi_com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler(Ctx) ->
    com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler_info:openapi_com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'guessTotal', 'tagTitleSearch'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_servlets_find_replace_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_servlets_find_replace_servlet_info:openapi_com_day_cq_wcm_core_impl_servlets_find_replace_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_servlets_find_replace_servlet(Ctx) ->
    com_day_cq_wcm_core_impl_servlets_find_replace_servlet(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_servlets_find_replace_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_servlets_find_replace_servlet_info:openapi_com_day_cq_wcm_core_impl_servlets_find_replace_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_servlets_find_replace_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'scope'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_servlets_reference_search_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_servlets_reference_search_servlet_info:openapi_com_day_cq_wcm_core_impl_servlets_reference_search_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_servlets_reference_search_servlet(Ctx) ->
    com_day_cq_wcm_core_impl_servlets_reference_search_servlet(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_servlets_reference_search_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_servlets_reference_search_servlet_info:openapi_com_day_cq_wcm_core_impl_servlets_reference_search_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_servlets_reference_search_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'referencesearchservlet.maxReferencesPerPage', 'referencesearchservlet.maxPages'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_servlets_thumbnail_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_servlets_thumbnail_servlet_info:openapi_com_day_cq_wcm_core_impl_servlets_thumbnail_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_servlets_thumbnail_servlet(Ctx) ->
    com_day_cq_wcm_core_impl_servlets_thumbnail_servlet(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_servlets_thumbnail_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_servlets_thumbnail_servlet_info:openapi_com_day_cq_wcm_core_impl_servlets_thumbnail_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_servlets_thumbnail_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'workspace', 'dimensions'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_utils_default_page_name_validator(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_utils_default_page_name_validator_info:openapi_com_day_cq_wcm_core_impl_utils_default_page_name_validator_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_utils_default_page_name_validator(Ctx) ->
    com_day_cq_wcm_core_impl_utils_default_page_name_validator(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_utils_default_page_name_validator(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_utils_default_page_name_validator_info:openapi_com_day_cq_wcm_core_impl_utils_default_page_name_validator_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_utils_default_page_name_validator(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'nonValidChars'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_variants_page_variants_provider_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_variants_page_variants_provider_impl_info:openapi_com_day_cq_wcm_core_impl_variants_page_variants_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_variants_page_variants_provider_impl(Ctx) ->
    com_day_cq_wcm_core_impl_variants_page_variants_provider_impl(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_variants_page_variants_provider_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_variants_page_variants_provider_impl_info:openapi_com_day_cq_wcm_core_impl_variants_page_variants_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_variants_page_variants_provider_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'default.externalizer.domain'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_version_manager_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_version_manager_impl_info:openapi_com_day_cq_wcm_core_impl_version_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_version_manager_impl(Ctx) ->
    com_day_cq_wcm_core_impl_version_manager_impl(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_version_manager_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_version_manager_impl_info:openapi_com_day_cq_wcm_core_impl_version_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_version_manager_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'versionmanager.createVersionOnActivation', 'versionmanager.purgingEnabled', 'versionmanager.purgePaths', 'versionmanager.ivPaths', 'versionmanager.maxAgeDays', 'versionmanager.maxNumberVersions', 'versionmanager.minNumberVersions'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_version_purge_task(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_version_purge_task_info:openapi_com_day_cq_wcm_core_impl_version_purge_task_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_version_purge_task(Ctx) ->
    com_day_cq_wcm_core_impl_version_purge_task(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_version_purge_task(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_version_purge_task_info:openapi_com_day_cq_wcm_core_impl_version_purge_task_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_version_purge_task(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'versionpurge.paths', 'versionpurge.recursive', 'versionpurge.maxVersions', 'versionpurge.minVersions', 'versionpurge.maxAgeDays'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_warp_time_warp_filter(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_warp_time_warp_filter_info:openapi_com_day_cq_wcm_core_impl_warp_time_warp_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_warp_time_warp_filter(Ctx) ->
    com_day_cq_wcm_core_impl_warp_time_warp_filter(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_warp_time_warp_filter(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_warp_time_warp_filter_info:openapi_com_day_cq_wcm_core_impl_warp_time_warp_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_warp_time_warp_filter(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'filter.order', 'filter.scope'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_wcm_debug_filter(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_wcm_debug_filter_info:openapi_com_day_cq_wcm_core_impl_wcm_debug_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_wcm_debug_filter(Ctx) ->
    com_day_cq_wcm_core_impl_wcm_debug_filter(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_wcm_debug_filter(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_wcm_debug_filter_info:openapi_com_day_cq_wcm_core_impl_wcm_debug_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_wcm_debug_filter(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'wcmdbgfilter.enabled', 'wcmdbgfilter.jspDebug'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_impl_wcm_developer_mode_filter(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_impl_wcm_developer_mode_filter_info:openapi_com_day_cq_wcm_core_impl_wcm_developer_mode_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_wcm_developer_mode_filter(Ctx) ->
    com_day_cq_wcm_core_impl_wcm_developer_mode_filter(Ctx, #{}).

-spec com_day_cq_wcm_core_impl_wcm_developer_mode_filter(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_impl_wcm_developer_mode_filter_info:openapi_com_day_cq_wcm_core_impl_wcm_developer_mode_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_impl_wcm_developer_mode_filter(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'wcmdevmodefilter.enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_mvt_mvt_statistics_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_mvt_mvt_statistics_impl_info:openapi_com_day_cq_wcm_core_mvt_mvt_statistics_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_mvt_mvt_statistics_impl(Ctx) ->
    com_day_cq_wcm_core_mvt_mvt_statistics_impl(Ctx, #{}).

-spec com_day_cq_wcm_core_mvt_mvt_statistics_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_mvt_mvt_statistics_impl_info:openapi_com_day_cq_wcm_core_mvt_mvt_statistics_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_mvt_mvt_statistics_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'mvtstatistics.trackingurl'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_stats_page_view_statistics_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_stats_page_view_statistics_impl_info:openapi_com_day_cq_wcm_core_stats_page_view_statistics_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_stats_page_view_statistics_impl(Ctx) ->
    com_day_cq_wcm_core_stats_page_view_statistics_impl(Ctx, #{}).

-spec com_day_cq_wcm_core_stats_page_view_statistics_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_stats_page_view_statistics_impl_info:openapi_com_day_cq_wcm_core_stats_page_view_statistics_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_stats_page_view_statistics_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'pageviewstatistics.trackingurl', 'pageviewstatistics.trackingscript.enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_core_wcm_request_filter(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_core_wcm_request_filter_info:openapi_com_day_cq_wcm_core_wcm_request_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_wcm_request_filter(Ctx) ->
    com_day_cq_wcm_core_wcm_request_filter(Ctx, #{}).

-spec com_day_cq_wcm_core_wcm_request_filter(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_core_wcm_request_filter_info:openapi_com_day_cq_wcm_core_wcm_request_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_core_wcm_request_filter(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'wcmfilter.mode'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_designimporter_design_package_importer(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_designimporter_design_package_importer_info:openapi_com_day_cq_wcm_designimporter_design_package_importer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_design_package_importer(Ctx) ->
    com_day_cq_wcm_designimporter_design_package_importer(Ctx, #{}).

-spec com_day_cq_wcm_designimporter_design_package_importer(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_designimporter_design_package_importer_info:openapi_com_day_cq_wcm_designimporter_design_package_importer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_design_package_importer(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'extract.filter'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_designimporter_impl_canvas_builder_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_designimporter_impl_canvas_builder_impl_info:openapi_com_day_cq_wcm_designimporter_impl_canvas_builder_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_impl_canvas_builder_impl(Ctx) ->
    com_day_cq_wcm_designimporter_impl_canvas_builder_impl(Ctx, #{}).

-spec com_day_cq_wcm_designimporter_impl_canvas_builder_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_designimporter_impl_canvas_builder_impl_info:openapi_com_day_cq_wcm_designimporter_impl_canvas_builder_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_impl_canvas_builder_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'filepattern', 'build.page.nodes', 'build.client.libs', 'build.canvas.component'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler_info:openapi_com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler(Ctx) ->
    com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler(Ctx, #{}).

-spec com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler_info:openapi_com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'minThreadPoolSize', 'maxThreadPoolSize'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl_info:openapi_com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl(Ctx) ->
    com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl(Ctx, #{}).

-spec com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl_info:openapi_com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'search.pattern', 'replace.pattern'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl_info:openapi_com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl(Ctx) ->
    com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl(Ctx, #{}).

-spec com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl_info:openapi_com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'filepattern', 'device.groups', 'build.page.nodes', 'build.client.libs', 'build.canvas.component'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone(Ctx) ->
    com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone(Ctx, #{}).

-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'tagpattern'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon(Ctx) ->
    com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon(Ctx, #{}).

-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'tagpattern'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han(Ctx) ->
    com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han(Ctx, #{}).

-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'tagpattern'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle(Ctx) ->
    com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle(Ctx, #{}).

-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'tagpattern'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand(Ctx) ->
    com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand(Ctx, #{}).

-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'tagpattern'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen(Ctx) ->
    com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen(Ctx, #{}).

-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'tagpattern', 'component.resourceType'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler(Ctx) ->
    com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler(Ctx, #{}).

-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'tagpattern'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t(Ctx) ->
    com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t(Ctx, #{}).

-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'tagpattern'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle(Ctx) ->
    com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle(Ctx, #{}).

-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'tagpattern'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle(Ctx) ->
    com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle(Ctx, #{}).

-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'tagpattern'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h(Ctx) ->
    com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h(Ctx, #{}).

-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'tagpattern'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone(Ctx) ->
    com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone(Ctx, #{}).

-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'tagpattern', 'component.resourceType'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand(Ctx) ->
    com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand(Ctx, #{}).

-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'tagpattern'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl(Ctx) ->
    com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl(Ctx, #{}).

-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'tagpattern'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component(Ctx) ->
    com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component(Ctx, #{}).

-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'tagpattern', 'component.resourceType'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen(Ctx) ->
    com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen(Ctx, #{}).

-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'tagpattern', 'component.resourceType'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl(Ctx) ->
    com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl(Ctx, #{}).

-spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl_info:openapi_com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'tagpattern'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet_info:openapi_com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet(Ctx) ->
    com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet(Ctx, #{}).

-spec com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet_info:openapi_com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.name', 'sling.servlet.resourceTypes', 'sling.servlet.selectors', 'sling.servlet.methods', 'forms.formchooserservlet.advansesearch.require'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor_info:openapi_com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor(Ctx) ->
    com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor(Ctx, #{}).

-spec com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor_info:openapi_com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'forms.formparagraphpostprocessor.enabled', 'forms.formparagraphpostprocessor.formresourcetypes'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet_info:openapi_com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet(Ctx) ->
    com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet(Ctx, #{}).

-spec com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet_info:openapi_com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name.whitelist', 'allow.expressions'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_foundation_forms_impl_mail_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_foundation_forms_impl_mail_servlet_info:openapi_com_day_cq_wcm_foundation_forms_impl_mail_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_foundation_forms_impl_mail_servlet(Ctx) ->
    com_day_cq_wcm_foundation_forms_impl_mail_servlet(Ctx, #{}).

-spec com_day_cq_wcm_foundation_forms_impl_mail_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_foundation_forms_impl_mail_servlet_info:openapi_com_day_cq_wcm_foundation_forms_impl_mail_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_foundation_forms_impl_mail_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'sling.servlet.resourceTypes', 'sling.servlet.selectors', 'resource.whitelist', 'resource.blacklist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet_info:openapi_com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet(Ctx) ->
    com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet(Ctx, #{}).

-spec com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet_info:openapi_com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'adapt.supported.widths'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_foundation_impl_http_auth_handler(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_foundation_impl_http_auth_handler_info:openapi_com_day_cq_wcm_foundation_impl_http_auth_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_foundation_impl_http_auth_handler(Ctx) ->
    com_day_cq_wcm_foundation_impl_http_auth_handler(Ctx, #{}).

-spec com_day_cq_wcm_foundation_impl_http_auth_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_foundation_impl_http_auth_handler_info:openapi_com_day_cq_wcm_foundation_impl_http_auth_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_foundation_impl_http_auth_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'path', 'auth.http.nologin', 'auth.http.realm', 'auth.default.loginpage', 'auth.cred.form', 'auth.cred.utf8'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_foundation_impl_page_impressions_tracker(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_foundation_impl_page_impressions_tracker_info:openapi_com_day_cq_wcm_foundation_impl_page_impressions_tracker_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_foundation_impl_page_impressions_tracker(Ctx) ->
    com_day_cq_wcm_foundation_impl_page_impressions_tracker(Ctx, #{}).

-spec com_day_cq_wcm_foundation_impl_page_impressions_tracker(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_foundation_impl_page_impressions_tracker_info:openapi_com_day_cq_wcm_foundation_impl_page_impressions_tracker_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_foundation_impl_page_impressions_tracker(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'sling.auth.requirements'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_foundation_impl_page_redirect_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_foundation_impl_page_redirect_servlet_info:openapi_com_day_cq_wcm_foundation_impl_page_redirect_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_foundation_impl_page_redirect_servlet(Ctx) ->
    com_day_cq_wcm_foundation_impl_page_redirect_servlet(Ctx, #{}).

-spec com_day_cq_wcm_foundation_impl_page_redirect_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_foundation_impl_page_redirect_servlet_info:openapi_com_day_cq_wcm_foundation_impl_page_redirect_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_foundation_impl_page_redirect_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'excluded.resource.types'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist_info:openapi_com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist(Ctx) ->
    com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist(Ctx, #{}).

-spec com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist_info:openapi_com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'default.attachment.type.blacklist', 'baseline.attachment.type.blacklist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl_info:openapi_com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl(Ctx) ->
    com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl(Ctx, #{}).

-spec com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl_info:openapi_com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'parameter.whitelist', 'parameter.whitelist.prefixes', 'binary.parameter.whitelist', 'modifier.whitelist', 'operation.whitelist', 'operation.whitelist.prefixes', 'typehint.whitelist', 'resourcetype.whitelist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory_info:openapi_com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory(Ctx) ->
    com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory(Ctx, #{}).

-spec com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory_info:openapi_com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'device.info.transformer.enabled', 'device.info.transformer.css.style'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter_info:openapi_com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter(Ctx) ->
    com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter(Ctx, #{}).

-spec com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter_info:openapi_com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'redirect.enabled', 'redirect.stats.enabled', 'redirect.extensions', 'redirect.paths'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_msm_impl_actions_content_copy_action_factory(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_msm_impl_actions_content_copy_action_factory_info:openapi_com_day_cq_wcm_msm_impl_actions_content_copy_action_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_msm_impl_actions_content_copy_action_factory(Ctx) ->
    com_day_cq_wcm_msm_impl_actions_content_copy_action_factory(Ctx, #{}).

-spec com_day_cq_wcm_msm_impl_actions_content_copy_action_factory(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_msm_impl_actions_content_copy_action_factory_info:openapi_com_day_cq_wcm_msm_impl_actions_content_copy_action_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_msm_impl_actions_content_copy_action_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.wcm.msm.action.excludednodetypes', 'cq.wcm.msm.action.excludedparagraphitems', 'cq.wcm.msm.action.excludedprops', 'contentcopyaction.order.style'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_msm_impl_actions_content_delete_action_factory(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_msm_impl_actions_content_delete_action_factory_info:openapi_com_day_cq_wcm_msm_impl_actions_content_delete_action_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_msm_impl_actions_content_delete_action_factory(Ctx) ->
    com_day_cq_wcm_msm_impl_actions_content_delete_action_factory(Ctx, #{}).

-spec com_day_cq_wcm_msm_impl_actions_content_delete_action_factory(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_msm_impl_actions_content_delete_action_factory_info:openapi_com_day_cq_wcm_msm_impl_actions_content_delete_action_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_msm_impl_actions_content_delete_action_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.wcm.msm.action.excludednodetypes', 'cq.wcm.msm.action.excludedparagraphitems', 'cq.wcm.msm.action.excludedprops'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_msm_impl_actions_content_update_action_factory(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_msm_impl_actions_content_update_action_factory_info:openapi_com_day_cq_wcm_msm_impl_actions_content_update_action_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_msm_impl_actions_content_update_action_factory(Ctx) ->
    com_day_cq_wcm_msm_impl_actions_content_update_action_factory(Ctx, #{}).

-spec com_day_cq_wcm_msm_impl_actions_content_update_action_factory(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_msm_impl_actions_content_update_action_factory_info:openapi_com_day_cq_wcm_msm_impl_actions_content_update_action_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_msm_impl_actions_content_update_action_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.wcm.msm.action.excludednodetypes', 'cq.wcm.msm.action.excludedparagraphitems', 'cq.wcm.msm.action.excludedprops', 'cq.wcm.msm.action.ignoredMixin'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_msm_impl_actions_order_children_action_factory(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_msm_impl_actions_order_children_action_factory_info:openapi_com_day_cq_wcm_msm_impl_actions_order_children_action_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_msm_impl_actions_order_children_action_factory(Ctx) ->
    com_day_cq_wcm_msm_impl_actions_order_children_action_factory(Ctx, #{}).

-spec com_day_cq_wcm_msm_impl_actions_order_children_action_factory(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_msm_impl_actions_order_children_action_factory_info:openapi_com_day_cq_wcm_msm_impl_actions_order_children_action_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_msm_impl_actions_order_children_action_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.wcm.msm.action.excludednodetypes', 'cq.wcm.msm.action.excludedparagraphitems', 'cq.wcm.msm.action.excludedprops'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_msm_impl_actions_page_move_action_factory(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_msm_impl_actions_page_move_action_factory_info:openapi_com_day_cq_wcm_msm_impl_actions_page_move_action_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_msm_impl_actions_page_move_action_factory(Ctx) ->
    com_day_cq_wcm_msm_impl_actions_page_move_action_factory(Ctx, #{}).

-spec com_day_cq_wcm_msm_impl_actions_page_move_action_factory(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_msm_impl_actions_page_move_action_factory_info:openapi_com_day_cq_wcm_msm_impl_actions_page_move_action_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_msm_impl_actions_page_move_action_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.wcm.msm.action.excludednodetypes', 'cq.wcm.msm.action.excludedparagraphitems', 'cq.wcm.msm.action.excludedprops', 'cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_msm_impl_actions_references_update_action_factory(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_msm_impl_actions_references_update_action_factory_info:openapi_com_day_cq_wcm_msm_impl_actions_references_update_action_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_msm_impl_actions_references_update_action_factory(Ctx) ->
    com_day_cq_wcm_msm_impl_actions_references_update_action_factory(Ctx, #{}).

-spec com_day_cq_wcm_msm_impl_actions_references_update_action_factory(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_msm_impl_actions_references_update_action_factory_info:openapi_com_day_cq_wcm_msm_impl_actions_references_update_action_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_msm_impl_actions_references_update_action_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.wcm.msm.action.excludednodetypes', 'cq.wcm.msm.action.excludedparagraphitems', 'cq.wcm.msm.action.excludedprops', 'cq.wcm.msm.impl.action.referencesupdate.prop_updateNested'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_msm_impl_actions_version_copy_action_factory(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_msm_impl_actions_version_copy_action_factory_info:openapi_com_day_cq_wcm_msm_impl_actions_version_copy_action_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_msm_impl_actions_version_copy_action_factory(Ctx) ->
    com_day_cq_wcm_msm_impl_actions_version_copy_action_factory(Ctx, #{}).

-spec com_day_cq_wcm_msm_impl_actions_version_copy_action_factory(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_msm_impl_actions_version_copy_action_factory_info:openapi_com_day_cq_wcm_msm_impl_actions_version_copy_action_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_msm_impl_actions_version_copy_action_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.wcm.msm.action.excludednodetypes', 'cq.wcm.msm.action.excludedparagraphitems', 'cq.wcm.msm.action.excludedprops'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_msm_impl_live_relationship_manager_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_msm_impl_live_relationship_manager_impl_info:openapi_com_day_cq_wcm_msm_impl_live_relationship_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_msm_impl_live_relationship_manager_impl(Ctx) ->
    com_day_cq_wcm_msm_impl_live_relationship_manager_impl(Ctx, #{}).

-spec com_day_cq_wcm_msm_impl_live_relationship_manager_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_msm_impl_live_relationship_manager_impl_info:openapi_com_day_cq_wcm_msm_impl_live_relationship_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_msm_impl_live_relationship_manager_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'liverelationshipmgr.relationsconfig.default'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_msm_impl_rollout_manager_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_msm_impl_rollout_manager_impl_info:openapi_com_day_cq_wcm_msm_impl_rollout_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_msm_impl_rollout_manager_impl(Ctx) ->
    com_day_cq_wcm_msm_impl_rollout_manager_impl(Ctx, #{}).

-spec com_day_cq_wcm_msm_impl_rollout_manager_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_msm_impl_rollout_manager_impl_info:openapi_com_day_cq_wcm_msm_impl_rollout_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_msm_impl_rollout_manager_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'event.filter', 'rolloutmgr.excludedprops.default', 'rolloutmgr.excludedparagraphprops.default', 'rolloutmgr.excludednodetypes.default', 'rolloutmgr.threadpool.maxsize', 'rolloutmgr.threadpool.maxshutdowntime', 'rolloutmgr.threadpool.priority', 'rolloutmgr.commit.size', 'rolloutmgr.conflicthandling.enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_msm_impl_servlets_audit_log_servlet(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_msm_impl_servlets_audit_log_servlet_info:openapi_com_day_cq_wcm_msm_impl_servlets_audit_log_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_msm_impl_servlets_audit_log_servlet(Ctx) ->
    com_day_cq_wcm_msm_impl_servlets_audit_log_servlet(Ctx, #{}).

-spec com_day_cq_wcm_msm_impl_servlets_audit_log_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_msm_impl_servlets_audit_log_servlet_info:openapi_com_day_cq_wcm_msm_impl_servlets_audit_log_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_msm_impl_servlets_audit_log_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'auditlogservlet.default.events.count', 'auditlogservlet.default.path'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_notification_email_impl_email_channel(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_notification_email_impl_email_channel_info:openapi_com_day_cq_wcm_notification_email_impl_email_channel_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_notification_email_impl_email_channel(Ctx) ->
    com_day_cq_wcm_notification_email_impl_email_channel(Ctx, #{}).

-spec com_day_cq_wcm_notification_email_impl_email_channel(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_notification_email_impl_email_channel_info:openapi_com_day_cq_wcm_notification_email_impl_email_channel_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_notification_email_impl_email_channel(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'email.from'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_notification_impl_notification_manager_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_notification_impl_notification_manager_impl_info:openapi_com_day_cq_wcm_notification_impl_notification_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_notification_impl_notification_manager_impl(Ctx) ->
    com_day_cq_wcm_notification_impl_notification_manager_impl(Ctx, #{}).

-spec com_day_cq_wcm_notification_impl_notification_manager_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_notification_impl_notification_manager_impl_info:openapi_com_day_cq_wcm_notification_impl_notification_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_notification_impl_notification_manager_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'event.topics'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_scripting_impl_bvp_manager(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_scripting_impl_bvp_manager_info:openapi_com_day_cq_wcm_scripting_impl_bvp_manager_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_scripting_impl_bvp_manager(Ctx) ->
    com_day_cq_wcm_scripting_impl_bvp_manager(Ctx, #{}).

-spec com_day_cq_wcm_scripting_impl_bvp_manager(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_scripting_impl_bvp_manager_info:openapi_com_day_cq_wcm_scripting_impl_bvp_manager_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_scripting_impl_bvp_manager(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'com.day.cq.wcm.scripting.bvp.script.engines'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_undo_undo_config(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_undo_undo_config_info:openapi_com_day_cq_wcm_undo_undo_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_undo_undo_config(Ctx) ->
    com_day_cq_wcm_undo_undo_config(Ctx, #{}).

-spec com_day_cq_wcm_undo_undo_config(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_undo_undo_config_info:openapi_com_day_cq_wcm_undo_undo_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_undo_undo_config(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.undo.UndoConfig"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cq.wcm.undo.enabled', 'cq.wcm.undo.path', 'cq.wcm.undo.validity', 'cq.wcm.undo.steps', 'cq.wcm.undo.persistence', 'cq.wcm.undo.persistence.mode', 'cq.wcm.undo.markermode', 'cq.wcm.undo.whitelist', 'cq.wcm.undo.blacklist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_webservicesupport_impl_replication_event_listener(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_webservicesupport_impl_replication_event_listener_info:openapi_com_day_cq_wcm_webservicesupport_impl_replication_event_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_webservicesupport_impl_replication_event_listener(Ctx) ->
    com_day_cq_wcm_webservicesupport_impl_replication_event_listener(Ctx, #{}).

-spec com_day_cq_wcm_webservicesupport_impl_replication_event_listener(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_webservicesupport_impl_replication_event_listener_info:openapi_com_day_cq_wcm_webservicesupport_impl_replication_event_listener_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_webservicesupport_impl_replication_event_listener(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'Flush agents'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl_info:openapi_com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl(Ctx) ->
    com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl(Ctx, #{}).

-spec com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl_info:openapi_com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'event.filter', 'minThreadPoolSize', 'maxThreadPoolSize', 'cq.wcm.workflow.terminate.on.activate', 'cq.wcm.worklfow.terminate.exclusion.list'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_wcm_workflow_impl_workflow_package_info_provider(ctx:ctx()) -> {ok, openapi_com_day_cq_wcm_workflow_impl_workflow_package_info_provider_info:openapi_com_day_cq_wcm_workflow_impl_workflow_package_info_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_workflow_impl_workflow_package_info_provider(Ctx) ->
    com_day_cq_wcm_workflow_impl_workflow_package_info_provider(Ctx, #{}).

-spec com_day_cq_wcm_workflow_impl_workflow_package_info_provider(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_wcm_workflow_impl_workflow_package_info_provider_info:openapi_com_day_cq_wcm_workflow_impl_workflow_package_info_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_wcm_workflow_impl_workflow_package_info_provider(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'workflowpackageinfoprovider.filter', 'workflowpackageinfoprovider.filter.rootpath'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_widget_impl_html_library_manager_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_widget_impl_html_library_manager_impl_info:openapi_com_day_cq_widget_impl_html_library_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_widget_impl_html_library_manager_impl(Ctx) ->
    com_day_cq_widget_impl_html_library_manager_impl(Ctx, #{}).

-spec com_day_cq_widget_impl_html_library_manager_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_widget_impl_html_library_manager_impl_info:openapi_com_day_cq_widget_impl_html_library_manager_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_widget_impl_html_library_manager_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'htmllibmanager.clientmanager', 'htmllibmanager.debug', 'htmllibmanager.debug.console', 'htmllibmanager.debug.init.js', 'htmllibmanager.defaultthemename', 'htmllibmanager.defaultuserthemename', 'htmllibmanager.firebuglite.path', 'htmllibmanager.forceCQUrlInfo', 'htmllibmanager.gzip', 'htmllibmanager.maxage', 'htmllibmanager.maxDataUriSize', 'htmllibmanager.minify', 'htmllibmanager.path.list', 'htmllibmanager.timing'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_widget_impl_widget_extension_provider_impl(ctx:ctx()) -> {ok, openapi_com_day_cq_widget_impl_widget_extension_provider_impl_info:openapi_com_day_cq_widget_impl_widget_extension_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_widget_impl_widget_extension_provider_impl(Ctx) ->
    com_day_cq_widget_impl_widget_extension_provider_impl(Ctx, #{}).

-spec com_day_cq_widget_impl_widget_extension_provider_impl(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_widget_impl_widget_extension_provider_impl_info:openapi_com_day_cq_widget_impl_widget_extension_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_widget_impl_widget_extension_provider_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'extendable.widgets', 'widgetextensionprovider.debug'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_workflow_impl_email_e_mail_notification_service(ctx:ctx()) -> {ok, openapi_com_day_cq_workflow_impl_email_e_mail_notification_service_info:openapi_com_day_cq_workflow_impl_email_e_mail_notification_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_workflow_impl_email_e_mail_notification_service(Ctx) ->
    com_day_cq_workflow_impl_email_e_mail_notification_service(Ctx, #{}).

-spec com_day_cq_workflow_impl_email_e_mail_notification_service(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_workflow_impl_email_e_mail_notification_service_info:openapi_com_day_cq_workflow_impl_email_e_mail_notification_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_workflow_impl_email_e_mail_notification_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'from.address', 'host.prefix', 'notify.onabort', 'notify.oncomplete', 'notify.oncontainercomplete', 'notify.useronly'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_cq_workflow_impl_email_task_e_mail_notification_service(ctx:ctx()) -> {ok, openapi_com_day_cq_workflow_impl_email_task_e_mail_notification_service_info:openapi_com_day_cq_workflow_impl_email_task_e_mail_notification_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_workflow_impl_email_task_e_mail_notification_service(Ctx) ->
    com_day_cq_workflow_impl_email_task_e_mail_notification_service(Ctx, #{}).

-spec com_day_cq_workflow_impl_email_task_e_mail_notification_service(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_cq_workflow_impl_email_task_e_mail_notification_service_info:openapi_com_day_cq_workflow_impl_email_task_e_mail_notification_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_cq_workflow_impl_email_task_e_mail_notification_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'notify.onupdate', 'notify.oncomplete'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_crx_security_token_impl_impl_token_authentication_handler(ctx:ctx()) -> {ok, openapi_com_day_crx_security_token_impl_impl_token_authentication_handler_info:openapi_com_day_crx_security_token_impl_impl_token_authentication_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_crx_security_token_impl_impl_token_authentication_handler(Ctx) ->
    com_day_crx_security_token_impl_impl_token_authentication_handler(Ctx, #{}).

-spec com_day_crx_security_token_impl_impl_token_authentication_handler(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_crx_security_token_impl_impl_token_authentication_handler_info:openapi_com_day_crx_security_token_impl_impl_token_authentication_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_crx_security_token_impl_impl_token_authentication_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'path', 'token.required.attr', 'token.alternate.url', 'token.encapsulated', 'skip.token.refresh'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec com_day_crx_security_token_impl_token_cleanup_task(ctx:ctx()) -> {ok, openapi_com_day_crx_security_token_impl_token_cleanup_task_info:openapi_com_day_crx_security_token_impl_token_cleanup_task_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_crx_security_token_impl_token_cleanup_task(Ctx) ->
    com_day_crx_security_token_impl_token_cleanup_task(Ctx, #{}).

-spec com_day_crx_security_token_impl_token_cleanup_task(ctx:ctx(), maps:map()) -> {ok, openapi_com_day_crx_security_token_impl_token_cleanup_task_info:openapi_com_day_crx_security_token_impl_token_cleanup_task_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
com_day_crx_security_token_impl_token_cleanup_task(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enable.token.cleanup.task', 'scheduler.expression', 'batch.size'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec guide_localization_service(ctx:ctx()) -> {ok, openapi_guide_localization_service_info:openapi_guide_localization_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
guide_localization_service(Ctx) ->
    guide_localization_service(Ctx, #{}).

-spec guide_localization_service(ctx:ctx(), maps:map()) -> {ok, openapi_guide_localization_service_info:openapi_guide_localization_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
guide_localization_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/Guide Localization Service"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'supportedLocales', 'Localizable Properties'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec messaging_user_component_factory(ctx:ctx()) -> {ok, openapi_messaging_user_component_factory_info:openapi_messaging_user_component_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
messaging_user_component_factory(Ctx) ->
    messaging_user_component_factory(Ctx, #{}).

-spec messaging_user_component_factory(ctx:ctx(), maps:map()) -> {ok, openapi_messaging_user_component_factory_info:openapi_messaging_user_component_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
messaging_user_component_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/MessagingUserComponentFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'priority'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_aries_jmx_framework_state_config(ctx:ctx()) -> {ok, openapi_org_apache_aries_jmx_framework_state_config_info:openapi_org_apache_aries_jmx_framework_state_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_aries_jmx_framework_state_config(Ctx) ->
    org_apache_aries_jmx_framework_state_config(Ctx, #{}).

-spec org_apache_aries_jmx_framework_state_config(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_aries_jmx_framework_state_config_info:openapi_org_apache_aries_jmx_framework_state_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_aries_jmx_framework_state_config(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.aries.jmx.framework.StateConfig"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'attributeChangeNotificationEnabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_felix_eventadmin_impl_event_admin(ctx:ctx()) -> {ok, openapi_org_apache_felix_eventadmin_impl_event_admin_info:openapi_org_apache_felix_eventadmin_impl_event_admin_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_eventadmin_impl_event_admin(Ctx) ->
    org_apache_felix_eventadmin_impl_event_admin(Ctx, #{}).

-spec org_apache_felix_eventadmin_impl_event_admin(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_felix_eventadmin_impl_event_admin_info:openapi_org_apache_felix_eventadmin_impl_event_admin_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_eventadmin_impl_event_admin(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'org.apache.felix.eventadmin.ThreadPoolSize', 'org.apache.felix.eventadmin.AsyncToSyncThreadRatio', 'org.apache.felix.eventadmin.Timeout', 'org.apache.felix.eventadmin.RequireTopic', 'org.apache.felix.eventadmin.IgnoreTimeout', 'org.apache.felix.eventadmin.IgnoreTopic'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_felix_http(ctx:ctx()) -> {ok, openapi_org_apache_felix_http_info:openapi_org_apache_felix_http_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_http(Ctx) ->
    org_apache_felix_http(Ctx, #{}).

-spec org_apache_felix_http(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_felix_http_info:openapi_org_apache_felix_http_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_http(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.felix.http"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'org.apache.felix.http.host', 'org.apache.felix.http.enable', 'org.osgi.service.http.port', 'org.apache.felix.http.timeout', 'org.apache.felix.https.enable', 'org.osgi.service.http.port.secure', 'org.apache.felix.https.keystore', 'org.apache.felix.https.keystore.password', 'org.apache.felix.https.keystore.key.password', 'org.apache.felix.https.truststore', 'org.apache.felix.https.truststore.password', 'org.apache.felix.https.clientcertificate', 'org.apache.felix.http.context_path', 'org.apache.felix.http.mbeans', 'org.apache.felix.http.session.timeout', 'org.apache.felix.http.jetty.threadpool.max', 'org.apache.felix.http.jetty.acceptors', 'org.apache.felix.http.jetty.selectors', 'org.apache.felix.http.jetty.headerBufferSize', 'org.apache.felix.http.jetty.requestBufferSize', 'org.apache.felix.http.jetty.responseBufferSize', 'org.apache.felix.http.jetty.maxFormSize', 'org.apache.felix.http.path_exclusions', 'org.apache.felix.https.jetty.ciphersuites.excluded', 'org.apache.felix.https.jetty.ciphersuites.included', 'org.apache.felix.http.jetty.sendServerHeader', 'org.apache.felix.https.jetty.protocols.included', 'org.apache.felix.https.jetty.protocols.excluded', 'org.apache.felix.proxy.load.balancer.connection.enable', 'org.apache.felix.https.jetty.renegotiateAllowed', 'org.apache.felix.https.jetty.session.cookie.httpOnly', 'org.apache.felix.https.jetty.session.cookie.secure', 'org.eclipse.jetty.servlet.SessionIdPathParameterName', 'org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding', 'org.eclipse.jetty.servlet.SessionCookie', 'org.eclipse.jetty.servlet.SessionDomain', 'org.eclipse.jetty.servlet.SessionPath', 'org.eclipse.jetty.servlet.MaxAge', 'org.apache.felix.http.name', 'org.apache.felix.jetty.gziphandler.enable', 'org.apache.felix.jetty.gzip.minGzipSize', 'org.apache.felix.jetty.gzip.compressionLevel', 'org.apache.felix.jetty.gzip.inflateBufferSize', 'org.apache.felix.jetty.gzip.syncFlush', 'org.apache.felix.jetty.gzip.excludedUserAgents', 'org.apache.felix.jetty.gzip.includedMethods', 'org.apache.felix.jetty.gzip.excludedMethods', 'org.apache.felix.jetty.gzip.includedPaths', 'org.apache.felix.jetty.gzip.excludedPaths', 'org.apache.felix.jetty.gzip.includedMimeTypes', 'org.apache.felix.jetty.gzip.excludedMimeTypes', 'org.apache.felix.http.session.invalidate', 'org.apache.felix.http.session.uniqueid'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_felix_http_sslfilter_ssl_filter(ctx:ctx()) -> {ok, openapi_org_apache_felix_http_sslfilter_ssl_filter_info:openapi_org_apache_felix_http_sslfilter_ssl_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_http_sslfilter_ssl_filter(Ctx) ->
    org_apache_felix_http_sslfilter_ssl_filter(Ctx, #{}).

-spec org_apache_felix_http_sslfilter_ssl_filter(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_felix_http_sslfilter_ssl_filter_info:openapi_org_apache_felix_http_sslfilter_ssl_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_http_sslfilter_ssl_filter(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'ssl-forward.header', 'ssl-forward.value', 'ssl-forward-cert.header', 'rewrite.absolute.urls'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_felix_jaas_configuration_factory(ctx:ctx()) -> {ok, openapi_org_apache_felix_jaas_configuration_factory_info:openapi_org_apache_felix_jaas_configuration_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_jaas_configuration_factory(Ctx) ->
    org_apache_felix_jaas_configuration_factory(Ctx, #{}).

-spec org_apache_felix_jaas_configuration_factory(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_felix_jaas_configuration_factory_info:openapi_org_apache_felix_jaas_configuration_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_jaas_configuration_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.felix.jaas.Configuration.factory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'jaas.controlFlag', 'jaas.ranking', 'jaas.realmName', 'jaas.classname', 'jaas.options'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_felix_jaas_configuration_spi(ctx:ctx()) -> {ok, openapi_org_apache_felix_jaas_configuration_spi_info:openapi_org_apache_felix_jaas_configuration_spi_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_jaas_configuration_spi(Ctx) ->
    org_apache_felix_jaas_configuration_spi(Ctx, #{}).

-spec org_apache_felix_jaas_configuration_spi(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_felix_jaas_configuration_spi_info:openapi_org_apache_felix_jaas_configuration_spi_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_jaas_configuration_spi(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'jaas.defaultRealmName', 'jaas.configProviderName', 'jaas.globalConfigPolicy'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_felix_scr_scr_service(ctx:ctx()) -> {ok, openapi_org_apache_felix_scr_scr_service_info:openapi_org_apache_felix_scr_scr_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_scr_scr_service(Ctx) ->
    org_apache_felix_scr_scr_service(Ctx, #{}).

-spec org_apache_felix_scr_scr_service(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_felix_scr_scr_service_info:openapi_org_apache_felix_scr_scr_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_scr_scr_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.felix.scr.ScrService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'ds.loglevel', 'ds.factory.enabled', 'ds.delayed.keepInstances', 'ds.lock.timeout.milliseconds', 'ds.stop.timeout.milliseconds', 'ds.global.extender'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_felix_systemready_impl_components_check(ctx:ctx()) -> {ok, openapi_org_apache_felix_systemready_impl_components_check_info:openapi_org_apache_felix_systemready_impl_components_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_systemready_impl_components_check(Ctx) ->
    org_apache_felix_systemready_impl_components_check(Ctx, #{}).

-spec org_apache_felix_systemready_impl_components_check(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_felix_systemready_impl_components_check_info:openapi_org_apache_felix_systemready_impl_components_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_systemready_impl_components_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'components.list', 'type'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_felix_systemready_impl_framework_start_check(ctx:ctx()) -> {ok, openapi_org_apache_felix_systemready_impl_framework_start_check_info:openapi_org_apache_felix_systemready_impl_framework_start_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_systemready_impl_framework_start_check(Ctx) ->
    org_apache_felix_systemready_impl_framework_start_check(Ctx, #{}).

-spec org_apache_felix_systemready_impl_framework_start_check(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_felix_systemready_impl_framework_start_check_info:openapi_org_apache_felix_systemready_impl_framework_start_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_systemready_impl_framework_start_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'timeout', 'target.start.level', 'target.start.level.prop.name', 'type'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_felix_systemready_impl_services_check(ctx:ctx()) -> {ok, openapi_org_apache_felix_systemready_impl_services_check_info:openapi_org_apache_felix_systemready_impl_services_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_systemready_impl_services_check(Ctx) ->
    org_apache_felix_systemready_impl_services_check(Ctx, #{}).

-spec org_apache_felix_systemready_impl_services_check(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_felix_systemready_impl_services_check_info:openapi_org_apache_felix_systemready_impl_services_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_systemready_impl_services_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'services.list', 'type'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_felix_systemready_impl_servlet_system_alive_servlet(ctx:ctx()) -> {ok, openapi_org_apache_felix_systemready_impl_servlet_system_alive_servlet_info:openapi_org_apache_felix_systemready_impl_servlet_system_alive_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_systemready_impl_servlet_system_alive_servlet(Ctx) ->
    org_apache_felix_systemready_impl_servlet_system_alive_servlet(Ctx, #{}).

-spec org_apache_felix_systemready_impl_servlet_system_alive_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_felix_systemready_impl_servlet_system_alive_servlet_info:openapi_org_apache_felix_systemready_impl_servlet_system_alive_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_systemready_impl_servlet_system_alive_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'osgi.http.whiteboard.servlet.pattern', 'osgi.http.whiteboard.context.select'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_felix_systemready_impl_servlet_system_ready_servlet(ctx:ctx()) -> {ok, openapi_org_apache_felix_systemready_impl_servlet_system_ready_servlet_info:openapi_org_apache_felix_systemready_impl_servlet_system_ready_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_systemready_impl_servlet_system_ready_servlet(Ctx) ->
    org_apache_felix_systemready_impl_servlet_system_ready_servlet(Ctx, #{}).

-spec org_apache_felix_systemready_impl_servlet_system_ready_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_felix_systemready_impl_servlet_system_ready_servlet_info:openapi_org_apache_felix_systemready_impl_servlet_system_ready_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_systemready_impl_servlet_system_ready_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'osgi.http.whiteboard.servlet.pattern', 'osgi.http.whiteboard.context.select'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_felix_systemready_system_ready_monitor(ctx:ctx()) -> {ok, openapi_org_apache_felix_systemready_system_ready_monitor_info:openapi_org_apache_felix_systemready_system_ready_monitor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_systemready_system_ready_monitor(Ctx) ->
    org_apache_felix_systemready_system_ready_monitor(Ctx, #{}).

-spec org_apache_felix_systemready_system_ready_monitor(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_felix_systemready_system_ready_monitor_info:openapi_org_apache_felix_systemready_system_ready_monitor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_systemready_system_ready_monitor(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'poll.interval'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_felix_webconsole_internal_servlet_osgi_manager(ctx:ctx()) -> {ok, openapi_org_apache_felix_webconsole_internal_servlet_osgi_manager_info:openapi_org_apache_felix_webconsole_internal_servlet_osgi_manager_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_webconsole_internal_servlet_osgi_manager(Ctx) ->
    org_apache_felix_webconsole_internal_servlet_osgi_manager(Ctx, #{}).

-spec org_apache_felix_webconsole_internal_servlet_osgi_manager(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_felix_webconsole_internal_servlet_osgi_manager_info:openapi_org_apache_felix_webconsole_internal_servlet_osgi_manager_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_webconsole_internal_servlet_osgi_manager(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'manager.root', 'http.service.filter', 'default.render', 'realm', 'username', 'password', 'category', 'locale', 'loglevel', 'plugins'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_felix_webconsole_plugins_event_internal_plugin_servlet(ctx:ctx()) -> {ok, openapi_org_apache_felix_webconsole_plugins_event_internal_plugin_servlet_info:openapi_org_apache_felix_webconsole_plugins_event_internal_plugin_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_webconsole_plugins_event_internal_plugin_servlet(Ctx) ->
    org_apache_felix_webconsole_plugins_event_internal_plugin_servlet(Ctx, #{}).

-spec org_apache_felix_webconsole_plugins_event_internal_plugin_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_felix_webconsole_plugins_event_internal_plugin_servlet_info:openapi_org_apache_felix_webconsole_plugins_event_internal_plugin_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_webconsole_plugins_event_internal_plugin_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'max.size'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co(ctx:ctx()) -> {ok, openapi_org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co_info:openapi_org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co(Ctx) ->
    org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co(Ctx, #{}).

-spec org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co_info:openapi_org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'felix.memoryusage.dump.threshold', 'felix.memoryusage.dump.interval', 'felix.memoryusage.dump.location'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_http_proxyconfigurator(ctx:ctx()) -> {ok, openapi_org_apache_http_proxyconfigurator_info:openapi_org_apache_http_proxyconfigurator_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_http_proxyconfigurator(Ctx) ->
    org_apache_http_proxyconfigurator(Ctx, #{}).

-spec org_apache_http_proxyconfigurator(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_http_proxyconfigurator_info:openapi_org_apache_http_proxyconfigurator_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_http_proxyconfigurator(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.http.proxyconfigurator"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'proxy.enabled', 'proxy.host', 'proxy.port', 'proxy.user', 'proxy.password', 'proxy.exceptions'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider_info:openapi_org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider(Ctx) ->
    org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider(Ctx, #{}).

-spec org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider_info:openapi_org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'dir'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store_info:openapi_org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store(Ctx) ->
    org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store(Ctx, #{}).

-spec org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store_info:openapi_org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'path'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_plugins_document_document_node_store_service(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_document_document_node_store_service_info:openapi_org_apache_jackrabbit_oak_plugins_document_document_node_store_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_document_document_node_store_service(Ctx) ->
    org_apache_jackrabbit_oak_plugins_document_document_node_store_service(Ctx, #{}).

-spec org_apache_jackrabbit_oak_plugins_document_document_node_store_service(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_document_document_node_store_service_info:openapi_org_apache_jackrabbit_oak_plugins_document_document_node_store_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_document_document_node_store_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'mongouri', 'db', 'socketKeepAlive', 'cache', 'nodeCachePercentage', 'prevDocCachePercentage', 'childrenCachePercentage', 'diffCachePercentage', 'cacheSegmentCount', 'cacheStackMoveDistance', 'blobCacheSize', 'persistentCache', 'journalCache', 'customBlobStore', 'journalGCInterval', 'journalGCMaxAge', 'prefetchExternalChanges', 'role', 'versionGcMaxAgeInSecs', 'versionGCExpression', 'versionGCTimeLimitInSecs', 'blobGcMaxAgeInSecs', 'blobTrackSnapshotIntervalInSecs', 'repository.home', 'maxReplicationLagInSecs', 'documentStoreType', 'bundlingDisabled', 'updateLimit', 'persistentCacheIncludes', 'leaseCheckMode'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre_info:openapi_org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre(Ctx) ->
    org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre(Ctx, #{}).

-spec org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre_info:openapi_org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'persistentCacheIncludes'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac_info:openapi_org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac(Ctx) ->
    org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac(Ctx, #{}).

-spec org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac_info:openapi_org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'includedPaths', 'enableAsyncObserver', 'observerQueueSize'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_plugins_index_async_indexer_service(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_index_async_indexer_service_info:openapi_org_apache_jackrabbit_oak_plugins_index_async_indexer_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_index_async_indexer_service(Ctx) ->
    org_apache_jackrabbit_oak_plugins_index_async_indexer_service(Ctx, #{}).

-spec org_apache_jackrabbit_oak_plugins_index_async_indexer_service(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_index_async_indexer_service_info:openapi_org_apache_jackrabbit_oak_plugins_index_async_indexer_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_index_async_indexer_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'asyncConfigs', 'leaseTimeOutMinutes', 'failingIndexTimeoutSeconds', 'errorWarnIntervalSeconds'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv_info:openapi_org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv(Ctx) ->
    org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv(Ctx, #{}).

-spec org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv_info:openapi_org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'disabled', 'debug', 'localIndexDir', 'enableOpenIndexAsync', 'threadPoolSize', 'prefetchIndexFiles', 'extractedTextCacheSizeInMB', 'extractedTextCacheExpiryInSecs', 'alwaysUsePreExtractedCache', 'booleanClauseLimit', 'enableHybridIndexing', 'hybridQueueSize', 'disableStoredIndexDefinition', 'deletedBlobsCollectionEnabled', 'propIndexCleanerIntervalInSecs', 'enableSingleBlobIndexFiles'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co_info:openapi_org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co(Ctx) ->
    org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co(Ctx, #{}).

-spec org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co_info:openapi_org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'solr.home.path', 'solr.core.name'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers_info:openapi_org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers(Ctx) ->
    org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers(Ctx, #{}).

-spec org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers_info:openapi_org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration_info:openapi_org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration(Ctx) ->
    org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration(Ctx, #{}).

-spec org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration_info:openapi_org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'path.desc.field', 'path.child.field', 'path.parent.field', 'path.exact.field', 'catch.all.field', 'collapsed.path.field', 'path.depth.field', 'commit.policy', 'rows', 'path.restrictions', 'property.restrictions', 'primarytypes.restrictions', 'ignored.properties', 'used.properties', 'type.mappings', 'property.mappings', 'collapse.jcrcontent.nodes'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf_info:openapi_org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf(Ctx) ->
    org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf(Ctx, #{}).

-spec org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf_info:openapi_org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'solr.http.url', 'solr.zk.host', 'solr.collection', 'solr.socket.timeout', 'solr.connection.timeout', 'solr.shards.no', 'solr.replication.factor', 'solr.conf.dir'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid_info:openapi_org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid(Ctx) ->
    org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid(Ctx, #{}).

-spec org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid_info:openapi_org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'query.aggregation'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se_info:openapi_org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se(Ctx) ->
    org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se(Ctx, #{}).

-spec org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se_info:openapi_org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'server.type'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory_info:openapi_org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory(Ctx) ->
    org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory(Ctx, #{}).

-spec org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory_info:openapi_org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'providerType'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_plugins_observation_change_collector_provider(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_observation_change_collector_provider_info:openapi_org_apache_jackrabbit_oak_plugins_observation_change_collector_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_observation_change_collector_provider(Ctx) ->
    org_apache_jackrabbit_oak_plugins_observation_change_collector_provider(Ctx, #{}).

-spec org_apache_jackrabbit_oak_plugins_observation_change_collector_provider(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_plugins_observation_change_collector_provider_info:openapi_org_apache_jackrabbit_oak_plugins_observation_change_collector_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_plugins_observation_change_collector_provider(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'maxItems', 'maxPathDepth', 'enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_query_query_engine_settings_service(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_query_query_engine_settings_service_info:openapi_org_apache_jackrabbit_oak_query_query_engine_settings_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_query_query_engine_settings_service(Ctx) ->
    org_apache_jackrabbit_oak_query_query_engine_settings_service(Ctx, #{}).

-spec org_apache_jackrabbit_oak_query_query_engine_settings_service(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_query_query_engine_settings_service_info:openapi_org_apache_jackrabbit_oak_query_query_engine_settings_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_query_query_engine_settings_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'queryLimitInMemory', 'queryLimitReads', 'queryFailTraversal', 'fastQuerySize'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_security_authentication_authentication_config(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_security_authentication_authentication_config_info:openapi_org_apache_jackrabbit_oak_security_authentication_authentication_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_security_authentication_authentication_config(Ctx) ->
    org_apache_jackrabbit_oak_security_authentication_authentication_config(Ctx, #{}).

-spec org_apache_jackrabbit_oak_security_authentication_authentication_config(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_security_authentication_authentication_config_info:openapi_org_apache_jackrabbit_oak_security_authentication_authentication_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_security_authentication_authentication_config(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'org.apache.jackrabbit.oak.authentication.appName', 'org.apache.jackrabbit.oak.authentication.configSpiName'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi_info:openapi_org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi(Ctx) ->
    org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi(Ctx, #{}).

-spec org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi_info:openapi_org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'provider.name', 'host.name', 'host.port', 'host.ssl', 'host.tls', 'host.noCertCheck', 'bind.dn', 'bind.password', 'searchTimeout', 'adminPool.maxActive', 'adminPool.lookupOnValidate', 'userPool.maxActive', 'userPool.lookupOnValidate', 'user.baseDN', 'user.objectclass', 'user.idAttribute', 'user.extraFilter', 'user.makeDnPath', 'group.baseDN', 'group.objectclass', 'group.nameAttribute', 'group.extraFilter', 'group.makeDnPath', 'group.memberAttribute', 'useUidForExtId', 'customattributes'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_security_authentication_token_token_configura(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_security_authentication_token_token_configura_info:openapi_org_apache_jackrabbit_oak_security_authentication_token_token_configura_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_security_authentication_token_token_configura(Ctx) ->
    org_apache_jackrabbit_oak_security_authentication_token_token_configura(Ctx, #{}).

-spec org_apache_jackrabbit_oak_security_authentication_token_token_configura(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_security_authentication_token_token_configura_info:openapi_org_apache_jackrabbit_oak_security_authentication_token_token_configura_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_security_authentication_token_token_configura(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'tokenExpiration', 'tokenLength', 'tokenRefresh', 'tokenCleanupThreshold', 'passwordHashAlgorithm', 'passwordHashIterations', 'passwordSaltSize'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_security_authorization_authorization_configur(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_security_authorization_authorization_configur_info:openapi_org_apache_jackrabbit_oak_security_authorization_authorization_configur_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_security_authorization_authorization_configur(Ctx) ->
    org_apache_jackrabbit_oak_security_authorization_authorization_configur(Ctx, #{}).

-spec org_apache_jackrabbit_oak_security_authorization_authorization_configur(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_security_authorization_authorization_configur_info:openapi_org_apache_jackrabbit_oak_security_authorization_authorization_configur_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_security_authorization_authorization_configur(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'permissionsJr2', 'importBehavior', 'readPaths', 'administrativePrincipals', 'configurationRanking'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_security_internal_security_provider_registrati(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_security_internal_security_provider_registrati_info:openapi_org_apache_jackrabbit_oak_security_internal_security_provider_registrati_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_security_internal_security_provider_registrati(Ctx) ->
    org_apache_jackrabbit_oak_security_internal_security_provider_registrati(Ctx, #{}).

-spec org_apache_jackrabbit_oak_security_internal_security_provider_registrati(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_security_internal_security_provider_registrati_info:openapi_org_apache_jackrabbit_oak_security_internal_security_provider_registrati_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_security_internal_security_provider_registrati(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'requiredServicePids', 'authorizationCompositionType'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_security_user_random_authorizable_node_name(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_security_user_random_authorizable_node_name_info:openapi_org_apache_jackrabbit_oak_security_user_random_authorizable_node_name_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_security_user_random_authorizable_node_name(Ctx) ->
    org_apache_jackrabbit_oak_security_user_random_authorizable_node_name(Ctx, #{}).

-spec org_apache_jackrabbit_oak_security_user_random_authorizable_node_name(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_security_user_random_authorizable_node_name_info:openapi_org_apache_jackrabbit_oak_security_user_random_authorizable_node_name_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_security_user_random_authorizable_node_name(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'length'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_security_user_user_configuration_impl(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_security_user_user_configuration_impl_info:openapi_org_apache_jackrabbit_oak_security_user_user_configuration_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_security_user_user_configuration_impl(Ctx) ->
    org_apache_jackrabbit_oak_security_user_user_configuration_impl(Ctx, #{}).

-spec org_apache_jackrabbit_oak_security_user_user_configuration_impl(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_security_user_user_configuration_impl_info:openapi_org_apache_jackrabbit_oak_security_user_user_configuration_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_security_user_user_configuration_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'usersPath', 'groupsPath', 'systemRelativePath', 'defaultDepth', 'importBehavior', 'passwordHashAlgorithm', 'passwordHashIterations', 'passwordSaltSize', 'omitAdminPw', 'supportAutoSave', 'passwordMaxAge', 'initialPasswordChange', 'passwordHistorySize', 'passwordExpiryForAdmin', 'cacheExpiration', 'enableRFC7613UsercaseMappedProfile'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service_info:openapi_org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service(Ctx) ->
    org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service(Ctx, #{}).

-spec org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service_info:openapi_org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'accountName', 'containerName', 'accessKey', 'rootPath', 'connectionURL'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_segment_segment_node_store_factory(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_segment_segment_node_store_factory_info:openapi_org_apache_jackrabbit_oak_segment_segment_node_store_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_segment_segment_node_store_factory(Ctx) ->
    org_apache_jackrabbit_oak_segment_segment_node_store_factory(Ctx, #{}).

-spec org_apache_jackrabbit_oak_segment_segment_node_store_factory(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_segment_segment_node_store_factory_info:openapi_org_apache_jackrabbit_oak_segment_segment_node_store_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_segment_segment_node_store_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'repository.home', 'tarmk.mode', 'tarmk.size', 'segmentCache.size', 'stringCache.size', 'templateCache.size', 'stringDeduplicationCache.size', 'templateDeduplicationCache.size', 'nodeDeduplicationCache.size', 'pauseCompaction', 'compaction.retryCount', 'compaction.force.timeout', 'compaction.sizeDeltaEstimation', 'compaction.disableEstimation', 'compaction.retainedGenerations', 'compaction.memoryThreshold', 'compaction.progressLog', 'standby', 'customBlobStore', 'customSegmentStore', 'splitPersistence', 'repository.backup.dir', 'blobGcMaxAgeInSecs', 'blobTrackSnapshotIntervalInSecs', 'role', 'registerDescriptors', 'dispatchChanges'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service_info:openapi_org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service(Ctx) ->
    org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service(Ctx, #{}).

-spec org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service_info:openapi_org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'commitsTrackerWriterGroups'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_segment_segment_node_store_service(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_segment_segment_node_store_service_info:openapi_org_apache_jackrabbit_oak_segment_segment_node_store_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_segment_segment_node_store_service(Ctx) ->
    org_apache_jackrabbit_oak_segment_segment_node_store_service(Ctx, #{}).

-spec org_apache_jackrabbit_oak_segment_segment_node_store_service(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_segment_segment_node_store_service_info:openapi_org_apache_jackrabbit_oak_segment_segment_node_store_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_segment_segment_node_store_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'repository.home', 'tarmk.mode', 'tarmk.size', 'segmentCache.size', 'stringCache.size', 'templateCache.size', 'stringDeduplicationCache.size', 'templateDeduplicationCache.size', 'nodeDeduplicationCache.size', 'pauseCompaction', 'compaction.retryCount', 'compaction.force.timeout', 'compaction.sizeDeltaEstimation', 'compaction.disableEstimation', 'compaction.retainedGenerations', 'compaction.memoryThreshold', 'compaction.progressLog', 'standby', 'customBlobStore', 'customSegmentStore', 'splitPersistence', 'repository.backup.dir', 'blobGcMaxAgeInSecs', 'blobTrackSnapshotIntervalInSecs'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_segment_standby_store_standby_store_service(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_segment_standby_store_standby_store_service_info:openapi_org_apache_jackrabbit_oak_segment_standby_store_standby_store_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_segment_standby_store_standby_store_service(Ctx) ->
    org_apache_jackrabbit_oak_segment_standby_store_standby_store_service(Ctx, #{}).

-spec org_apache_jackrabbit_oak_segment_standby_store_standby_store_service(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_segment_standby_store_standby_store_service_info:openapi_org_apache_jackrabbit_oak_segment_standby_store_standby_store_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_segment_standby_store_standby_store_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'org.apache.sling.installer.configuration.persist', 'mode', 'port', 'primary.host', 'interval', 'primary.allowed-client-ip-ranges', 'secure', 'standby.readtimeout', 'standby.autoclean'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de_info:openapi_org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de(Ctx) ->
    org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de(Ctx, #{}).

-spec org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de_info:openapi_org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'handler.name', 'user.expirationTime', 'user.autoMembership', 'user.propertyMapping', 'user.pathPrefix', 'user.membershipExpTime', 'user.membershipNestingDepth', 'user.dynamicMembership', 'user.disableMissing', 'group.expirationTime', 'group.autoMembership', 'group.propertyMapping', 'group.pathPrefix', 'enableRFC7613UsercaseMappedProfile'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex_info:openapi_org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex(Ctx) ->
    org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex(Ctx, #{}).

-spec org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex_info:openapi_org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'jaas.ranking', 'jaas.controlFlag', 'jaas.realmName', 'idp.name', 'sync.handlerName'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr_info:openapi_org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr(Ctx) ->
    org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr(Ctx, #{}).

-spec org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr_info:openapi_org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'protectExternalId'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi_info:openapi_org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi(Ctx) ->
    org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi(Ctx, #{}).

-spec org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi_info:openapi_org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'cugSupportedPaths', 'cugEnabled', 'configurationRanking'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu_info:openapi_org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu(Ctx) ->
    org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu(Ctx, #{}).

-spec org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu_info:openapi_org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'principalNames'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable_info:openapi_org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable(Ctx) ->
    org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable(Ctx, #{}).

-spec org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable_info:openapi_org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enabledActions', 'userPrivilegeNames', 'groupPrivilegeNames', 'constraint'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_vault_packaging_impl_packaging_impl(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_vault_packaging_impl_packaging_impl_info:openapi_org_apache_jackrabbit_vault_packaging_impl_packaging_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_vault_packaging_impl_packaging_impl(Ctx) ->
    org_apache_jackrabbit_vault_packaging_impl_packaging_impl(Ctx, #{}).

-spec org_apache_jackrabbit_vault_packaging_impl_packaging_impl(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_vault_packaging_impl_packaging_impl_info:openapi_org_apache_jackrabbit_vault_packaging_impl_packaging_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_vault_packaging_impl_packaging_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'packageRoots'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry(ctx:ctx()) -> {ok, openapi_org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry_info:openapi_org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry(Ctx) ->
    org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry(Ctx, #{}).

-spec org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry_info:openapi_org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'homePath'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_auth_core_impl_logout_servlet(ctx:ctx()) -> {ok, openapi_org_apache_sling_auth_core_impl_logout_servlet_info:openapi_org_apache_sling_auth_core_impl_logout_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_auth_core_impl_logout_servlet(Ctx) ->
    org_apache_sling_auth_core_impl_logout_servlet(Ctx, #{}).

-spec org_apache_sling_auth_core_impl_logout_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_auth_core_impl_logout_servlet_info:openapi_org_apache_sling_auth_core_impl_logout_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_auth_core_impl_logout_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'sling.servlet.methods', 'sling.servlet.paths'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_caconfig_impl_configuration_bindings_value_provider(ctx:ctx()) -> {ok, openapi_org_apache_sling_caconfig_impl_configuration_bindings_value_provider_info:openapi_org_apache_sling_caconfig_impl_configuration_bindings_value_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_caconfig_impl_configuration_bindings_value_provider(Ctx) ->
    org_apache_sling_caconfig_impl_configuration_bindings_value_provider(Ctx, #{}).

-spec org_apache_sling_caconfig_impl_configuration_bindings_value_provider(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_caconfig_impl_configuration_bindings_value_provider_info:openapi_org_apache_sling_caconfig_impl_configuration_bindings_value_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_caconfig_impl_configuration_bindings_value_provider(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_caconfig_impl_configuration_resolver_impl(ctx:ctx()) -> {ok, openapi_org_apache_sling_caconfig_impl_configuration_resolver_impl_info:openapi_org_apache_sling_caconfig_impl_configuration_resolver_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_caconfig_impl_configuration_resolver_impl(Ctx) ->
    org_apache_sling_caconfig_impl_configuration_resolver_impl(Ctx, #{}).

-spec org_apache_sling_caconfig_impl_configuration_resolver_impl(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_caconfig_impl_configuration_resolver_impl_info:openapi_org_apache_sling_caconfig_impl_configuration_resolver_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_caconfig_impl_configuration_resolver_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'configBucketNames'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra(ctx:ctx()) -> {ok, openapi_org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra_info:openapi_org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra(Ctx) ->
    org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra(Ctx, #{}).

-spec org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra_info:openapi_org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enabled', 'configPropertyInheritancePropertyNames'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra(ctx:ctx()) -> {ok, openapi_org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra_info:openapi_org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra(Ctx) ->
    org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra(Ctx, #{}).

-spec org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra_info:openapi_org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi(ctx:ctx()) -> {ok, openapi_org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi_info:openapi_org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi(Ctx) ->
    org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi(Ctx, #{}).

-spec org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi_info:openapi_org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'description', 'overrides', 'enabled', 'service.ranking'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_caconfig_impl_override_system_property_configuration_ove(ctx:ctx()) -> {ok, openapi_org_apache_sling_caconfig_impl_override_system_property_configuration_ove_info:openapi_org_apache_sling_caconfig_impl_override_system_property_configuration_ove_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_caconfig_impl_override_system_property_configuration_ove(Ctx) ->
    org_apache_sling_caconfig_impl_override_system_property_configuration_ove(Ctx, #{}).

-spec org_apache_sling_caconfig_impl_override_system_property_configuration_ove(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_caconfig_impl_override_system_property_configuration_ove_info:openapi_org_apache_sling_caconfig_impl_override_system_property_configuration_ove_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_caconfig_impl_override_system_property_configuration_ove(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enabled', 'service.ranking'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_caconfig_management_impl_configuration_management_setti(ctx:ctx()) -> {ok, openapi_org_apache_sling_caconfig_management_impl_configuration_management_setti_info:openapi_org_apache_sling_caconfig_management_impl_configuration_management_setti_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_caconfig_management_impl_configuration_management_setti(Ctx) ->
    org_apache_sling_caconfig_management_impl_configuration_management_setti(Ctx, #{}).

-spec org_apache_sling_caconfig_management_impl_configuration_management_setti(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_caconfig_management_impl_configuration_management_setti_info:openapi_org_apache_sling_caconfig_management_impl_configuration_management_setti_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_caconfig_management_impl_configuration_management_setti(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'ignorePropertyNameRegex', 'configCollectionPropertiesResourceNames'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_caconfig_resource_impl_def_default_configuration_resour(ctx:ctx()) -> {ok, openapi_org_apache_sling_caconfig_resource_impl_def_default_configuration_resour_info:openapi_org_apache_sling_caconfig_resource_impl_def_default_configuration_resour_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_caconfig_resource_impl_def_default_configuration_resour(Ctx) ->
    org_apache_sling_caconfig_resource_impl_def_default_configuration_resour(Ctx, #{}).

-spec org_apache_sling_caconfig_resource_impl_def_default_configuration_resour(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_caconfig_resource_impl_def_default_configuration_resour_info:openapi_org_apache_sling_caconfig_resource_impl_def_default_configuration_resour_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_caconfig_resource_impl_def_default_configuration_resour(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enabled', 'configPath', 'fallbackPaths', 'configCollectionInheritancePropertyNames'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy(ctx:ctx()) -> {ok, openapi_org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy_info:openapi_org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy(Ctx) ->
    org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy(Ctx, #{}).

-spec org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy_info:openapi_org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'enabled', 'configRefResourceNames', 'configRefPropertyNames', 'service.ranking'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_commons_html_internal_tagsoup_html_parser(ctx:ctx()) -> {ok, openapi_org_apache_sling_commons_html_internal_tagsoup_html_parser_info:openapi_org_apache_sling_commons_html_internal_tagsoup_html_parser_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_commons_html_internal_tagsoup_html_parser(Ctx) ->
    org_apache_sling_commons_html_internal_tagsoup_html_parser(Ctx, #{}).

-spec org_apache_sling_commons_html_internal_tagsoup_html_parser(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_commons_html_internal_tagsoup_html_parser_info:openapi_org_apache_sling_commons_html_internal_tagsoup_html_parser_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_commons_html_internal_tagsoup_html_parser(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'parser.features'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_commons_log_log_manager(ctx:ctx()) -> {ok, openapi_org_apache_sling_commons_log_log_manager_info:openapi_org_apache_sling_commons_log_log_manager_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_commons_log_log_manager(Ctx) ->
    org_apache_sling_commons_log_log_manager(Ctx, #{}).

-spec org_apache_sling_commons_log_log_manager(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_commons_log_log_manager_info:openapi_org_apache_sling_commons_log_log_manager_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_commons_log_log_manager(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.commons.log.LogManager"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'org.apache.sling.commons.log.level', 'org.apache.sling.commons.log.file', 'org.apache.sling.commons.log.file.number', 'org.apache.sling.commons.log.file.size', 'org.apache.sling.commons.log.pattern', 'org.apache.sling.commons.log.configurationFile', 'org.apache.sling.commons.log.packagingDataEnabled', 'org.apache.sling.commons.log.maxCallerDataDepth', 'org.apache.sling.commons.log.maxOldFileCountInDump', 'org.apache.sling.commons.log.numOfLines'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_commons_log_log_manager_factory_config(ctx:ctx()) -> {ok, openapi_org_apache_sling_commons_log_log_manager_factory_config_info:openapi_org_apache_sling_commons_log_log_manager_factory_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_commons_log_log_manager_factory_config(Ctx) ->
    org_apache_sling_commons_log_log_manager_factory_config(Ctx, #{}).

-spec org_apache_sling_commons_log_log_manager_factory_config(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_commons_log_log_manager_factory_config_info:openapi_org_apache_sling_commons_log_log_manager_factory_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_commons_log_log_manager_factory_config(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'org.apache.sling.commons.log.level', 'org.apache.sling.commons.log.file', 'org.apache.sling.commons.log.pattern', 'org.apache.sling.commons.log.names', 'org.apache.sling.commons.log.additiv'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_commons_log_log_manager_factory_writer(ctx:ctx()) -> {ok, openapi_org_apache_sling_commons_log_log_manager_factory_writer_info:openapi_org_apache_sling_commons_log_log_manager_factory_writer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_commons_log_log_manager_factory_writer(Ctx) ->
    org_apache_sling_commons_log_log_manager_factory_writer(Ctx, #{}).

-spec org_apache_sling_commons_log_log_manager_factory_writer(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_commons_log_log_manager_factory_writer_info:openapi_org_apache_sling_commons_log_log_manager_factory_writer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_commons_log_log_manager_factory_writer(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'org.apache.sling.commons.log.file', 'org.apache.sling.commons.log.file.number', 'org.apache.sling.commons.log.file.size', 'org.apache.sling.commons.log.file.buffered'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_commons_metrics_internal_log_reporter(ctx:ctx()) -> {ok, openapi_org_apache_sling_commons_metrics_internal_log_reporter_info:openapi_org_apache_sling_commons_metrics_internal_log_reporter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_commons_metrics_internal_log_reporter(Ctx) ->
    org_apache_sling_commons_metrics_internal_log_reporter(Ctx, #{}).

-spec org_apache_sling_commons_metrics_internal_log_reporter(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_commons_metrics_internal_log_reporter_info:openapi_org_apache_sling_commons_metrics_internal_log_reporter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_commons_metrics_internal_log_reporter(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'period', 'timeUnit', 'level', 'loggerName', 'prefix', 'pattern', 'registryName'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter(ctx:ctx()) -> {ok, openapi_org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter_info:openapi_org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter(Ctx) ->
    org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter(Ctx, #{}).

-spec org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter_info:openapi_org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'datasources', 'step', 'archives', 'path'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_commons_mime_internal_mime_type_service_impl(ctx:ctx()) -> {ok, openapi_org_apache_sling_commons_mime_internal_mime_type_service_impl_info:openapi_org_apache_sling_commons_mime_internal_mime_type_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_commons_mime_internal_mime_type_service_impl(Ctx) ->
    org_apache_sling_commons_mime_internal_mime_type_service_impl(Ctx, #{}).

-spec org_apache_sling_commons_mime_internal_mime_type_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_commons_mime_internal_mime_type_service_impl_info:openapi_org_apache_sling_commons_mime_internal_mime_type_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_commons_mime_internal_mime_type_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'mime.types'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_commons_scheduler_impl_quartz_scheduler(ctx:ctx()) -> {ok, openapi_org_apache_sling_commons_scheduler_impl_quartz_scheduler_info:openapi_org_apache_sling_commons_scheduler_impl_quartz_scheduler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_commons_scheduler_impl_quartz_scheduler(Ctx) ->
    org_apache_sling_commons_scheduler_impl_quartz_scheduler(Ctx, #{}).

-spec org_apache_sling_commons_scheduler_impl_quartz_scheduler(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_commons_scheduler_impl_quartz_scheduler_info:openapi_org_apache_sling_commons_scheduler_impl_quartz_scheduler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_commons_scheduler_impl_quartz_scheduler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'poolName', 'allowedPoolNames', 'scheduler.useleaderforsingle', 'metrics.filters', 'slowThresholdMillis'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_commons_scheduler_impl_scheduler_health_check(ctx:ctx()) -> {ok, openapi_org_apache_sling_commons_scheduler_impl_scheduler_health_check_info:openapi_org_apache_sling_commons_scheduler_impl_scheduler_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_commons_scheduler_impl_scheduler_health_check(Ctx) ->
    org_apache_sling_commons_scheduler_impl_scheduler_health_check(Ctx, #{}).

-spec org_apache_sling_commons_scheduler_impl_scheduler_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_commons_scheduler_impl_scheduler_health_check_info:openapi_org_apache_sling_commons_scheduler_impl_scheduler_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_commons_scheduler_impl_scheduler_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'max.quartzJob.duration.acceptable'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_commons_threads_impl_default_thread_pool_factory(ctx:ctx()) -> {ok, openapi_org_apache_sling_commons_threads_impl_default_thread_pool_factory_info:openapi_org_apache_sling_commons_threads_impl_default_thread_pool_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_commons_threads_impl_default_thread_pool_factory(Ctx) ->
    org_apache_sling_commons_threads_impl_default_thread_pool_factory(Ctx, #{}).

-spec org_apache_sling_commons_threads_impl_default_thread_pool_factory(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_commons_threads_impl_default_thread_pool_factory_info:openapi_org_apache_sling_commons_threads_impl_default_thread_pool_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_commons_threads_impl_default_thread_pool_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'minPoolSize', 'maxPoolSize', 'queueSize', 'maxThreadAge', 'keepAliveTime', 'blockPolicy', 'shutdownGraceful', 'daemon', 'shutdownWaitTime', 'priority'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_datasource_data_source_factory(ctx:ctx()) -> {ok, openapi_org_apache_sling_datasource_data_source_factory_info:openapi_org_apache_sling_datasource_data_source_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_datasource_data_source_factory(Ctx) ->
    org_apache_sling_datasource_data_source_factory(Ctx, #{}).

-spec org_apache_sling_datasource_data_source_factory(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_datasource_data_source_factory_info:openapi_org_apache_sling_datasource_data_source_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_datasource_data_source_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.datasource.DataSourceFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'datasource.name', 'datasource.svc.prop.name', 'driverClassName', 'url', 'username', 'password', 'defaultAutoCommit', 'defaultReadOnly', 'defaultTransactionIsolation', 'defaultCatalog', 'maxActive', 'maxIdle', 'minIdle', 'initialSize', 'maxWait', 'maxAge', 'testOnBorrow', 'testOnReturn', 'testWhileIdle', 'validationQuery', 'validationQueryTimeout', 'timeBetweenEvictionRunsMillis', 'minEvictableIdleTimeMillis', 'connectionProperties', 'initSQL', 'jdbcInterceptors', 'validationInterval', 'logValidationErrors', 'datasource.svc.properties'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_datasource_jndi_data_source_factory(ctx:ctx()) -> {ok, openapi_org_apache_sling_datasource_jndi_data_source_factory_info:openapi_org_apache_sling_datasource_jndi_data_source_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_datasource_jndi_data_source_factory(Ctx) ->
    org_apache_sling_datasource_jndi_data_source_factory(Ctx, #{}).

-spec org_apache_sling_datasource_jndi_data_source_factory(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_datasource_jndi_data_source_factory_info:openapi_org_apache_sling_datasource_jndi_data_source_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_datasource_jndi_data_source_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'datasource.name', 'datasource.svc.prop.name', 'datasource.jndi.name', 'jndi.properties'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_discovery_oak_config(ctx:ctx()) -> {ok, openapi_org_apache_sling_discovery_oak_config_info:openapi_org_apache_sling_discovery_oak_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_discovery_oak_config(Ctx) ->
    org_apache_sling_discovery_oak_config(Ctx, #{}).

-spec org_apache_sling_discovery_oak_config(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_discovery_oak_config_info:openapi_org_apache_sling_discovery_oak_config_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_discovery_oak_config(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.discovery.oak.Config"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'connectorPingTimeout', 'connectorPingInterval', 'discoveryLiteCheckInterval', 'clusterSyncServiceTimeout', 'clusterSyncServiceInterval', 'enableSyncToken', 'minEventDelay', 'socketConnectTimeout', 'soTimeout', 'topologyConnectorUrls', 'topologyConnectorWhitelist', 'autoStopLocalLoopEnabled', 'gzipConnectorRequestsEnabled', 'hmacEnabled', 'enableEncryption', 'sharedKey', 'hmacSharedKeyTTL', 'backoffStandbyFactor', 'backoffStableFactor'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_discovery_oak_synchronized_clocks_health_check(ctx:ctx()) -> {ok, openapi_org_apache_sling_discovery_oak_synchronized_clocks_health_check_info:openapi_org_apache_sling_discovery_oak_synchronized_clocks_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_discovery_oak_synchronized_clocks_health_check(Ctx) ->
    org_apache_sling_discovery_oak_synchronized_clocks_health_check(Ctx, #{}).

-spec org_apache_sling_discovery_oak_synchronized_clocks_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_discovery_oak_synchronized_clocks_health_check_info:openapi_org_apache_sling_discovery_oak_synchronized_clocks_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_discovery_oak_synchronized_clocks_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.name', 'hc.tags', 'hc.mbean.name'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto(ctx:ctx()) -> {ok, openapi_org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto_info:openapi_org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto(Ctx) ->
    org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto(Ctx, #{}).

-spec org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto_info:openapi_org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'title', 'details', 'enabled', 'serviceName', 'log.level', 'allowed.roots', 'queue.processing.enabled', 'packageImporter.endpoints', 'passiveQueues', 'priorityQueues', 'retry.strategy', 'retry.attempts', 'requestAuthorizationStrategy.target', 'transportSecretProvider.target', 'packageBuilder.target', 'triggers.target', 'queue.provider', 'async.delivery', 'http.conn.timeout'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_distribution_agent_impl_privilege_distribution_request_a(ctx:ctx()) -> {ok, openapi_org_apache_sling_distribution_agent_impl_privilege_distribution_request_a_info:openapi_org_apache_sling_distribution_agent_impl_privilege_distribution_request_a_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_agent_impl_privilege_distribution_request_a(Ctx) ->
    org_apache_sling_distribution_agent_impl_privilege_distribution_request_a(Ctx, #{}).

-spec org_apache_sling_distribution_agent_impl_privilege_distribution_request_a(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_distribution_agent_impl_privilege_distribution_request_a_info:openapi_org_apache_sling_distribution_agent_impl_privilege_distribution_request_a_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_agent_impl_privilege_distribution_request_a(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'jcrPrivilege'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory(ctx:ctx()) -> {ok, openapi_org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory_info:openapi_org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory(Ctx) ->
    org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory(Ctx, #{}).

-spec org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory_info:openapi_org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'title', 'details', 'enabled', 'serviceName', 'log.level', 'allowed.roots', 'requestAuthorizationStrategy.target', 'queueProviderFactory.target', 'packageBuilder.target', 'triggers.target', 'priorityQueues'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto(ctx:ctx()) -> {ok, openapi_org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto_info:openapi_org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto(Ctx) ->
    org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto(Ctx, #{}).

-spec org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto_info:openapi_org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'title', 'details', 'enabled', 'serviceName', 'log.level', 'queue.processing.enabled', 'packageExporter.endpoints', 'pull.items', 'http.conn.timeout', 'requestAuthorizationStrategy.target', 'transportSecretProvider.target', 'packageBuilder.target', 'triggers.target'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor(ctx:ctx()) -> {ok, openapi_org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor_info:openapi_org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor(Ctx) ->
    org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor(Ctx, #{}).

-spec org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor_info:openapi_org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'title', 'details', 'enabled', 'serviceName', 'log.level', 'queue.processing.enabled', 'packageExporter.target', 'packageImporter.target', 'requestAuthorizationStrategy.target', 'triggers.target'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory(ctx:ctx()) -> {ok, openapi_org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory_info:openapi_org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory(Ctx) ->
    org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory(Ctx, #{}).

-spec org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory_info:openapi_org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'title', 'details', 'enabled', 'serviceName', 'log.level', 'queue.processing.enabled', 'passiveQueues', 'packageExporter.endpoints', 'packageImporter.endpoints', 'retry.strategy', 'retry.attempts', 'pull.items', 'http.conn.timeout', 'requestAuthorizationStrategy.target', 'transportSecretProvider.target', 'packageBuilder.target', 'triggers.target'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_distribution_monitor_distribution_queue_health_check(ctx:ctx()) -> {ok, openapi_org_apache_sling_distribution_monitor_distribution_queue_health_check_info:openapi_org_apache_sling_distribution_monitor_distribution_queue_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_monitor_distribution_queue_health_check(Ctx) ->
    org_apache_sling_distribution_monitor_distribution_queue_health_check(Ctx, #{}).

-spec org_apache_sling_distribution_monitor_distribution_queue_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_distribution_monitor_distribution_queue_health_check_info:openapi_org_apache_sling_distribution_monitor_distribution_queue_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_monitor_distribution_queue_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.name', 'hc.tags', 'hc.mbean.name', 'numberOfRetriesAllowed'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_distribution_packaging_impl_exporter_agent_distributio(ctx:ctx()) -> {ok, openapi_org_apache_sling_distribution_packaging_impl_exporter_agent_distributio_info:openapi_org_apache_sling_distribution_packaging_impl_exporter_agent_distributio_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_packaging_impl_exporter_agent_distributio(Ctx) ->
    org_apache_sling_distribution_packaging_impl_exporter_agent_distributio(Ctx, #{}).

-spec org_apache_sling_distribution_packaging_impl_exporter_agent_distributio(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_distribution_packaging_impl_exporter_agent_distributio_info:openapi_org_apache_sling_distribution_packaging_impl_exporter_agent_distributio_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_packaging_impl_exporter_agent_distributio(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'queue', 'drop.invalid.items', 'agent.target'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_distribution_packaging_impl_exporter_local_distributio(ctx:ctx()) -> {ok, openapi_org_apache_sling_distribution_packaging_impl_exporter_local_distributio_info:openapi_org_apache_sling_distribution_packaging_impl_exporter_local_distributio_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_packaging_impl_exporter_local_distributio(Ctx) ->
    org_apache_sling_distribution_packaging_impl_exporter_local_distributio(Ctx, #{}).

-spec org_apache_sling_distribution_packaging_impl_exporter_local_distributio(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_distribution_packaging_impl_exporter_local_distributio_info:openapi_org_apache_sling_distribution_packaging_impl_exporter_local_distributio_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_packaging_impl_exporter_local_distributio(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'packageBuilder.target'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_distribution_packaging_impl_exporter_remote_distributi(ctx:ctx()) -> {ok, openapi_org_apache_sling_distribution_packaging_impl_exporter_remote_distributi_info:openapi_org_apache_sling_distribution_packaging_impl_exporter_remote_distributi_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_packaging_impl_exporter_remote_distributi(Ctx) ->
    org_apache_sling_distribution_packaging_impl_exporter_remote_distributi(Ctx, #{}).

-spec org_apache_sling_distribution_packaging_impl_exporter_remote_distributi(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_distribution_packaging_impl_exporter_remote_distributi_info:openapi_org_apache_sling_distribution_packaging_impl_exporter_remote_distributi_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_packaging_impl_exporter_remote_distributi(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'endpoints', 'pull.items', 'packageBuilder.target', 'transportSecretProvider.target'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_distribution_packaging_impl_importer_local_distributio(ctx:ctx()) -> {ok, openapi_org_apache_sling_distribution_packaging_impl_importer_local_distributio_info:openapi_org_apache_sling_distribution_packaging_impl_importer_local_distributio_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_packaging_impl_importer_local_distributio(Ctx) ->
    org_apache_sling_distribution_packaging_impl_importer_local_distributio(Ctx, #{}).

-spec org_apache_sling_distribution_packaging_impl_importer_local_distributio(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_distribution_packaging_impl_importer_local_distributio_info:openapi_org_apache_sling_distribution_packaging_impl_importer_local_distributio_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_packaging_impl_importer_local_distributio(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'packageBuilder.target'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_distribution_packaging_impl_importer_remote_distributi(ctx:ctx()) -> {ok, openapi_org_apache_sling_distribution_packaging_impl_importer_remote_distributi_info:openapi_org_apache_sling_distribution_packaging_impl_importer_remote_distributi_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_packaging_impl_importer_remote_distributi(Ctx) ->
    org_apache_sling_distribution_packaging_impl_importer_remote_distributi(Ctx, #{}).

-spec org_apache_sling_distribution_packaging_impl_importer_remote_distributi(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_distribution_packaging_impl_importer_remote_distributi_info:openapi_org_apache_sling_distribution_packaging_impl_importer_remote_distributi_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_packaging_impl_importer_remote_distributi(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'endpoints', 'transportSecretProvider.target'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_distribution_packaging_impl_importer_repository_distri(ctx:ctx()) -> {ok, openapi_org_apache_sling_distribution_packaging_impl_importer_repository_distri_info:openapi_org_apache_sling_distribution_packaging_impl_importer_repository_distri_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_packaging_impl_importer_repository_distri(Ctx) ->
    org_apache_sling_distribution_packaging_impl_importer_repository_distri(Ctx, #{}).

-spec org_apache_sling_distribution_packaging_impl_importer_repository_distri(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_distribution_packaging_impl_importer_repository_distri_info:openapi_org_apache_sling_distribution_packaging_impl_importer_repository_distri_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_packaging_impl_importer_repository_distri(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'service.name', 'path', 'privilege.name'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_distribution_resources_impl_distribution_configuration(ctx:ctx()) -> {ok, openapi_org_apache_sling_distribution_resources_impl_distribution_configuration_info:openapi_org_apache_sling_distribution_resources_impl_distribution_configuration_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_resources_impl_distribution_configuration(Ctx) ->
    org_apache_sling_distribution_resources_impl_distribution_configuration(Ctx, #{}).

-spec org_apache_sling_distribution_resources_impl_distribution_configuration(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_distribution_resources_impl_distribution_configuration_info:openapi_org_apache_sling_distribution_resources_impl_distribution_configuration_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_resources_impl_distribution_configuration(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'provider.roots', 'kind'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_distribution_resources_impl_distribution_service_resour(ctx:ctx()) -> {ok, openapi_org_apache_sling_distribution_resources_impl_distribution_service_resour_info:openapi_org_apache_sling_distribution_resources_impl_distribution_service_resour_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_resources_impl_distribution_service_resour(Ctx) ->
    org_apache_sling_distribution_resources_impl_distribution_service_resour(Ctx, #{}).

-spec org_apache_sling_distribution_resources_impl_distribution_service_resour(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_distribution_resources_impl_distribution_service_resour_info:openapi_org_apache_sling_distribution_resources_impl_distribution_service_resour_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_resources_impl_distribution_service_resour(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'provider.roots', 'kind'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_distribution_serialization_impl_distribution_package_bu(ctx:ctx()) -> {ok, openapi_org_apache_sling_distribution_serialization_impl_distribution_package_bu_info:openapi_org_apache_sling_distribution_serialization_impl_distribution_package_bu_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_serialization_impl_distribution_package_bu(Ctx) ->
    org_apache_sling_distribution_serialization_impl_distribution_package_bu(Ctx, #{}).

-spec org_apache_sling_distribution_serialization_impl_distribution_package_bu(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_distribution_serialization_impl_distribution_package_bu_info:openapi_org_apache_sling_distribution_serialization_impl_distribution_package_bu_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_serialization_impl_distribution_package_bu(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'type', 'format.target', 'tempFsFolder', 'fileThreshold', 'memoryUnit', 'useOffHeapMemory', 'digestAlgorithm', 'monitoringQueueSize', 'cleanupDelay', 'package.filters', 'property.filters'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_distribution_serialization_impl_vlt_vault_distribution(ctx:ctx()) -> {ok, openapi_org_apache_sling_distribution_serialization_impl_vlt_vault_distribution_info:openapi_org_apache_sling_distribution_serialization_impl_vlt_vault_distribution_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_serialization_impl_vlt_vault_distribution(Ctx) ->
    org_apache_sling_distribution_serialization_impl_vlt_vault_distribution(Ctx, #{}).

-spec org_apache_sling_distribution_serialization_impl_vlt_vault_distribution(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_distribution_serialization_impl_vlt_vault_distribution_info:openapi_org_apache_sling_distribution_serialization_impl_vlt_vault_distribution_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_serialization_impl_vlt_vault_distribution(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'type', 'importMode', 'aclHandling', 'package.roots', 'package.filters', 'property.filters', 'tempFsFolder', 'useBinaryReferences', 'autoSaveThreshold', 'cleanupDelay', 'fileThreshold', 'MEGA_BYTES', 'useOffHeapMemory', 'digestAlgorithm', 'monitoringQueueSize', 'pathsMapping', 'strictImport'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_distribution_transport_impl_user_credentials_distributi(ctx:ctx()) -> {ok, openapi_org_apache_sling_distribution_transport_impl_user_credentials_distributi_info:openapi_org_apache_sling_distribution_transport_impl_user_credentials_distributi_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_transport_impl_user_credentials_distributi(Ctx) ->
    org_apache_sling_distribution_transport_impl_user_credentials_distributi(Ctx, #{}).

-spec org_apache_sling_distribution_transport_impl_user_credentials_distributi(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_distribution_transport_impl_user_credentials_distributi_info:openapi_org_apache_sling_distribution_transport_impl_user_credentials_distributi_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_transport_impl_user_credentials_distributi(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'username', 'password'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_distribution_trigger_impl_distribution_event_distribute(ctx:ctx()) -> {ok, openapi_org_apache_sling_distribution_trigger_impl_distribution_event_distribute_info:openapi_org_apache_sling_distribution_trigger_impl_distribution_event_distribute_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_trigger_impl_distribution_event_distribute(Ctx) ->
    org_apache_sling_distribution_trigger_impl_distribution_event_distribute(Ctx, #{}).

-spec org_apache_sling_distribution_trigger_impl_distribution_event_distribute(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_distribution_trigger_impl_distribution_event_distribute_info:openapi_org_apache_sling_distribution_trigger_impl_distribution_event_distribute_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_trigger_impl_distribution_event_distribute(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'path'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger(ctx:ctx()) -> {ok, openapi_org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger_info:openapi_org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger(Ctx) ->
    org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger(Ctx, #{}).

-spec org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger_info:openapi_org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'path', 'ignoredPathsPatterns', 'serviceName', 'deep'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi(ctx:ctx()) -> {ok, openapi_org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi_info:openapi_org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi(Ctx) ->
    org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi(Ctx, #{}).

-spec org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi_info:openapi_org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'path', 'serviceName', 'nuggetsPath'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig(ctx:ctx()) -> {ok, openapi_org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig_info:openapi_org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig(Ctx) ->
    org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig(Ctx, #{}).

-spec org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig_info:openapi_org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'endpoint', 'transportSecretProvider.target'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr(ctx:ctx()) -> {ok, openapi_org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr_info:openapi_org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr(Ctx) ->
    org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr(Ctx, #{}).

-spec org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr_info:openapi_org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'path'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge(ctx:ctx()) -> {ok, openapi_org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge_info:openapi_org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge(Ctx) ->
    org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge(Ctx, #{}).

-spec org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge_info:openapi_org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'path', 'seconds', 'serviceName'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_engine_impl_auth_sling_authenticator(ctx:ctx()) -> {ok, openapi_org_apache_sling_engine_impl_auth_sling_authenticator_info:openapi_org_apache_sling_engine_impl_auth_sling_authenticator_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_engine_impl_auth_sling_authenticator(Ctx) ->
    org_apache_sling_engine_impl_auth_sling_authenticator(Ctx, #{}).

-spec org_apache_sling_engine_impl_auth_sling_authenticator(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_engine_impl_auth_sling_authenticator_info:openapi_org_apache_sling_engine_impl_auth_sling_authenticator_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_engine_impl_auth_sling_authenticator(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'osgi.http.whiteboard.context.select', 'osgi.http.whiteboard.listener', 'auth.sudo.cookie', 'auth.sudo.parameter', 'auth.annonymous', 'sling.auth.requirements', 'sling.auth.anonymous.user', 'sling.auth.anonymous.password', 'auth.http', 'auth.http.realm', 'auth.uri.suffix'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter(ctx:ctx()) -> {ok, openapi_org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter_info:openapi_org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter(Ctx) ->
    org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter(Ctx, #{}).

-spec org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter_info:openapi_org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'extensions', 'minDurationMs', 'maxDurationMs', 'compactLogFormat'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_engine_impl_log_request_logger(ctx:ctx()) -> {ok, openapi_org_apache_sling_engine_impl_log_request_logger_info:openapi_org_apache_sling_engine_impl_log_request_logger_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_engine_impl_log_request_logger(Ctx) ->
    org_apache_sling_engine_impl_log_request_logger(Ctx, #{}).

-spec org_apache_sling_engine_impl_log_request_logger(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_engine_impl_log_request_logger_info:openapi_org_apache_sling_engine_impl_log_request_logger_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_engine_impl_log_request_logger(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'request.log.output', 'request.log.outputtype', 'request.log.enabled', 'access.log.output', 'access.log.outputtype', 'access.log.enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_engine_impl_log_request_logger_service(ctx:ctx()) -> {ok, openapi_org_apache_sling_engine_impl_log_request_logger_service_info:openapi_org_apache_sling_engine_impl_log_request_logger_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_engine_impl_log_request_logger_service(Ctx) ->
    org_apache_sling_engine_impl_log_request_logger_service(Ctx, #{}).

-spec org_apache_sling_engine_impl_log_request_logger_service(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_engine_impl_log_request_logger_service_info:openapi_org_apache_sling_engine_impl_log_request_logger_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_engine_impl_log_request_logger_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'request.log.service.format', 'request.log.service.output', 'request.log.service.outputtype', 'request.log.service.onentry'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_engine_impl_sling_main_servlet(ctx:ctx()) -> {ok, openapi_org_apache_sling_engine_impl_sling_main_servlet_info:openapi_org_apache_sling_engine_impl_sling_main_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_engine_impl_sling_main_servlet(Ctx) ->
    org_apache_sling_engine_impl_sling_main_servlet(Ctx, #{}).

-spec org_apache_sling_engine_impl_sling_main_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_engine_impl_sling_main_servlet_info:openapi_org_apache_sling_engine_impl_sling_main_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_engine_impl_sling_main_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'sling.max.calls', 'sling.max.inclusions', 'sling.trace.allow', 'sling.max.record.requests', 'sling.store.pattern.requests', 'sling.serverinfo', 'sling.additional.response.headers'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_engine_parameters(ctx:ctx()) -> {ok, openapi_org_apache_sling_engine_parameters_info:openapi_org_apache_sling_engine_parameters_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_engine_parameters(Ctx) ->
    org_apache_sling_engine_parameters(Ctx, #{}).

-spec org_apache_sling_engine_parameters(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_engine_parameters_info:openapi_org_apache_sling_engine_parameters_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_engine_parameters(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.engine.parameters"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'sling.default.parameter.encoding', 'sling.default.max.parameters', 'file.location', 'file.threshold', 'file.max', 'request.max', 'sling.default.parameter.checkForAdditionalContainerParameters'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_event_impl_eventing_thread_pool(ctx:ctx()) -> {ok, openapi_org_apache_sling_event_impl_eventing_thread_pool_info:openapi_org_apache_sling_event_impl_eventing_thread_pool_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_event_impl_eventing_thread_pool(Ctx) ->
    org_apache_sling_event_impl_eventing_thread_pool(Ctx, #{}).

-spec org_apache_sling_event_impl_eventing_thread_pool(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_event_impl_eventing_thread_pool_info:openapi_org_apache_sling_event_impl_eventing_thread_pool_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_event_impl_eventing_thread_pool(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'minPoolSize'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_event_impl_jobs_default_job_manager(ctx:ctx()) -> {ok, openapi_org_apache_sling_event_impl_jobs_default_job_manager_info:openapi_org_apache_sling_event_impl_jobs_default_job_manager_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_event_impl_jobs_default_job_manager(Ctx) ->
    org_apache_sling_event_impl_jobs_default_job_manager(Ctx, #{}).

-spec org_apache_sling_event_impl_jobs_default_job_manager(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_event_impl_jobs_default_job_manager_info:openapi_org_apache_sling_event_impl_jobs_default_job_manager_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_event_impl_jobs_default_job_manager(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'queue.priority', 'queue.retries', 'queue.retrydelay', 'queue.maxparallel'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_event_impl_jobs_jcr_persistence_handler(ctx:ctx()) -> {ok, openapi_org_apache_sling_event_impl_jobs_jcr_persistence_handler_info:openapi_org_apache_sling_event_impl_jobs_jcr_persistence_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_event_impl_jobs_jcr_persistence_handler(Ctx) ->
    org_apache_sling_event_impl_jobs_jcr_persistence_handler(Ctx, #{}).

-spec org_apache_sling_event_impl_jobs_jcr_persistence_handler(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_event_impl_jobs_jcr_persistence_handler_info:openapi_org_apache_sling_event_impl_jobs_jcr_persistence_handler_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_event_impl_jobs_jcr_persistence_handler(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'job.consumermanager.disableDistribution', 'startup.delay', 'cleanup.period'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_event_impl_jobs_job_consumer_manager(ctx:ctx()) -> {ok, openapi_org_apache_sling_event_impl_jobs_job_consumer_manager_info:openapi_org_apache_sling_event_impl_jobs_job_consumer_manager_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_event_impl_jobs_job_consumer_manager(Ctx) ->
    org_apache_sling_event_impl_jobs_job_consumer_manager(Ctx, #{}).

-spec org_apache_sling_event_impl_jobs_job_consumer_manager(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_event_impl_jobs_job_consumer_manager_info:openapi_org_apache_sling_event_impl_jobs_job_consumer_manager_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_event_impl_jobs_job_consumer_manager(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'org.apache.sling.installer.configuration.persist', 'job.consumermanager.whitelist', 'job.consumermanager.blacklist'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_event_jobs_queue_configuration(ctx:ctx()) -> {ok, openapi_org_apache_sling_event_jobs_queue_configuration_info:openapi_org_apache_sling_event_jobs_queue_configuration_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_event_jobs_queue_configuration(Ctx) ->
    org_apache_sling_event_jobs_queue_configuration(Ctx, #{}).

-spec org_apache_sling_event_jobs_queue_configuration(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_event_jobs_queue_configuration_info:openapi_org_apache_sling_event_jobs_queue_configuration_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_event_jobs_queue_configuration(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'queue.name', 'queue.topics', 'queue.type', 'queue.priority', 'queue.retries', 'queue.retrydelay', 'queue.maxparallel', 'queue.keepJobs', 'queue.preferRunOnCreationInstance', 'queue.threadPoolSize', 'service.ranking'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w(ctx:ctx()) -> {ok, openapi_org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w_info:openapi_org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w(Ctx) ->
    org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w(Ctx, #{}).

-spec org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w_info:openapi_org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'users', 'groups'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_featureflags_feature(ctx:ctx()) -> {ok, openapi_org_apache_sling_featureflags_feature_info:openapi_org_apache_sling_featureflags_feature_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_featureflags_feature(Ctx) ->
    org_apache_sling_featureflags_feature(Ctx, #{}).

-spec org_apache_sling_featureflags_feature(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_featureflags_feature_info:openapi_org_apache_sling_featureflags_feature_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_featureflags_feature(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.featureflags.Feature"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'description', 'enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_featureflags_impl_configured_feature(ctx:ctx()) -> {ok, openapi_org_apache_sling_featureflags_impl_configured_feature_info:openapi_org_apache_sling_featureflags_impl_configured_feature_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_featureflags_impl_configured_feature(Ctx) ->
    org_apache_sling_featureflags_impl_configured_feature(Ctx, #{}).

-spec org_apache_sling_featureflags_impl_configured_feature(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_featureflags_impl_configured_feature_info:openapi_org_apache_sling_featureflags_impl_configured_feature_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_featureflags_impl_configured_feature(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'name', 'description', 'enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_hapi_impl_h_api_util_impl(ctx:ctx()) -> {ok, openapi_org_apache_sling_hapi_impl_h_api_util_impl_info:openapi_org_apache_sling_hapi_impl_h_api_util_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_hapi_impl_h_api_util_impl(Ctx) ->
    org_apache_sling_hapi_impl_h_api_util_impl(Ctx, #{}).

-spec org_apache_sling_hapi_impl_h_api_util_impl(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_hapi_impl_h_api_util_impl_info:openapi_org_apache_sling_hapi_impl_h_api_util_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_hapi_impl_h_api_util_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'org.apache.sling.hapi.tools.resourcetype', 'org.apache.sling.hapi.tools.collectionresourcetype', 'org.apache.sling.hapi.tools.searchpaths', 'org.apache.sling.hapi.tools.externalurl', 'org.apache.sling.hapi.tools.enabled'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_hc_core_impl_composite_health_check(ctx:ctx()) -> {ok, openapi_org_apache_sling_hc_core_impl_composite_health_check_info:openapi_org_apache_sling_hc_core_impl_composite_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_hc_core_impl_composite_health_check(Ctx) ->
    org_apache_sling_hc_core_impl_composite_health_check(Ctx, #{}).

-spec org_apache_sling_hc_core_impl_composite_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_hc_core_impl_composite_health_check_info:openapi_org_apache_sling_hc_core_impl_composite_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_hc_core_impl_composite_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.name', 'hc.tags', 'hc.mbean.name', 'filter.tags', 'filter.combineTagsWithOr'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_hc_core_impl_executor_health_check_executor_impl(ctx:ctx()) -> {ok, openapi_org_apache_sling_hc_core_impl_executor_health_check_executor_impl_info:openapi_org_apache_sling_hc_core_impl_executor_health_check_executor_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_hc_core_impl_executor_health_check_executor_impl(Ctx) ->
    org_apache_sling_hc_core_impl_executor_health_check_executor_impl(Ctx, #{}).

-spec org_apache_sling_hc_core_impl_executor_health_check_executor_impl(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_hc_core_impl_executor_health_check_executor_impl_info:openapi_org_apache_sling_hc_core_impl_executor_health_check_executor_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_hc_core_impl_executor_health_check_executor_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'timeoutInMs', 'longRunningFutureThresholdForCriticalMs', 'resultCacheTtlInMs'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_hc_core_impl_jmx_attribute_health_check(ctx:ctx()) -> {ok, openapi_org_apache_sling_hc_core_impl_jmx_attribute_health_check_info:openapi_org_apache_sling_hc_core_impl_jmx_attribute_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_hc_core_impl_jmx_attribute_health_check(Ctx) ->
    org_apache_sling_hc_core_impl_jmx_attribute_health_check(Ctx, #{}).

-spec org_apache_sling_hc_core_impl_jmx_attribute_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_hc_core_impl_jmx_attribute_health_check_info:openapi_org_apache_sling_hc_core_impl_jmx_attribute_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_hc_core_impl_jmx_attribute_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.name', 'hc.tags', 'hc.mbean.name', 'mbean.name', 'attribute.name', 'attribute.value.constraint'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_hc_core_impl_scriptable_health_check(ctx:ctx()) -> {ok, openapi_org_apache_sling_hc_core_impl_scriptable_health_check_info:openapi_org_apache_sling_hc_core_impl_scriptable_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_hc_core_impl_scriptable_health_check(Ctx) ->
    org_apache_sling_hc_core_impl_scriptable_health_check(Ctx, #{}).

-spec org_apache_sling_hc_core_impl_scriptable_health_check(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_hc_core_impl_scriptable_health_check_info:openapi_org_apache_sling_hc_core_impl_scriptable_health_check_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_hc_core_impl_scriptable_health_check(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'hc.name', 'hc.tags', 'hc.mbean.name', 'expression', 'language.extension'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet(ctx:ctx()) -> {ok, openapi_org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet_info:openapi_org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet(Ctx) ->
    org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet(Ctx, #{}).

-spec org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet_info:openapi_org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'servletPath', 'disabled', 'cors.accessControlAllowOrigin'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer(ctx:ctx()) -> {ok, openapi_org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer_info:openapi_org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer(Ctx) ->
    org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer(Ctx, #{}).

-spec org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer_info:openapi_org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'totalWidth', 'colWidthName', 'colWidthResult', 'colWidthTiming'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_i18n_impl_i18_n_filter(ctx:ctx()) -> {ok, openapi_org_apache_sling_i18n_impl_i18_n_filter_info:openapi_org_apache_sling_i18n_impl_i18_n_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_i18n_impl_i18_n_filter(Ctx) ->
    org_apache_sling_i18n_impl_i18_n_filter(Ctx, #{}).

-spec org_apache_sling_i18n_impl_i18_n_filter(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_i18n_impl_i18_n_filter_info:openapi_org_apache_sling_i18n_impl_i18_n_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_i18n_impl_i18_n_filter(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'sling.filter.scope'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_i18n_impl_jcr_resource_bundle_provider(ctx:ctx()) -> {ok, openapi_org_apache_sling_i18n_impl_jcr_resource_bundle_provider_info:openapi_org_apache_sling_i18n_impl_jcr_resource_bundle_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_i18n_impl_jcr_resource_bundle_provider(Ctx) ->
    org_apache_sling_i18n_impl_jcr_resource_bundle_provider(Ctx, #{}).

-spec org_apache_sling_i18n_impl_jcr_resource_bundle_provider(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_i18n_impl_jcr_resource_bundle_provider_info:openapi_org_apache_sling_i18n_impl_jcr_resource_bundle_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_i18n_impl_jcr_resource_bundle_provider(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'locale.default', 'preload.bundles', 'invalidation.delay'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_installer_provider_jcr_impl_jcr_installer(ctx:ctx()) -> {ok, openapi_org_apache_sling_installer_provider_jcr_impl_jcr_installer_info:openapi_org_apache_sling_installer_provider_jcr_impl_jcr_installer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_installer_provider_jcr_impl_jcr_installer(Ctx) ->
    org_apache_sling_installer_provider_jcr_impl_jcr_installer(Ctx, #{}).

-spec org_apache_sling_installer_provider_jcr_impl_jcr_installer(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_installer_provider_jcr_impl_jcr_installer_info:openapi_org_apache_sling_installer_provider_jcr_impl_jcr_installer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_installer_provider_jcr_impl_jcr_installer(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'handler.schemes', 'sling.jcrinstall.folder.name.regexp', 'sling.jcrinstall.folder.max.depth', 'sling.jcrinstall.search.path', 'sling.jcrinstall.new.config.path', 'sling.jcrinstall.signal.path', 'sling.jcrinstall.enable.writeback'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_jcr_base_internal_login_admin_whitelist(ctx:ctx()) -> {ok, openapi_org_apache_sling_jcr_base_internal_login_admin_whitelist_info:openapi_org_apache_sling_jcr_base_internal_login_admin_whitelist_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_base_internal_login_admin_whitelist(Ctx) ->
    org_apache_sling_jcr_base_internal_login_admin_whitelist(Ctx, #{}).

-spec org_apache_sling_jcr_base_internal_login_admin_whitelist(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_jcr_base_internal_login_admin_whitelist_info:openapi_org_apache_sling_jcr_base_internal_login_admin_whitelist_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_base_internal_login_admin_whitelist(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'whitelist.bypass', 'whitelist.bundles.regexp'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment(ctx:ctx()) -> {ok, openapi_org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment_info:openapi_org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment(Ctx) ->
    org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment(Ctx, #{}).

-spec org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment_info:openapi_org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'whitelist.name', 'whitelist.bundles'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet(ctx:ctx()) -> {ok, openapi_org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet_info:openapi_org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet(Ctx) ->
    org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet(Ctx, #{}).

-spec org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet_info:openapi_org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'alias', 'dav.create-absolute-uri', 'dav.protectedhandlers'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_jcr_jackrabbit_server_jndi_registration_support(ctx:ctx()) -> {ok, openapi_org_apache_sling_jcr_jackrabbit_server_jndi_registration_support_info:openapi_org_apache_sling_jcr_jackrabbit_server_jndi_registration_support_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_jackrabbit_server_jndi_registration_support(Ctx) ->
    org_apache_sling_jcr_jackrabbit_server_jndi_registration_support(Ctx, #{}).

-spec org_apache_sling_jcr_jackrabbit_server_jndi_registration_support(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_jcr_jackrabbit_server_jndi_registration_support_info:openapi_org_apache_sling_jcr_jackrabbit_server_jndi_registration_support_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_jackrabbit_server_jndi_registration_support(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'java.naming.factory.initial', 'java.naming.provider.url'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_jcr_jackrabbit_server_rmi_registration_support(ctx:ctx()) -> {ok, openapi_org_apache_sling_jcr_jackrabbit_server_rmi_registration_support_info:openapi_org_apache_sling_jcr_jackrabbit_server_rmi_registration_support_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_jackrabbit_server_rmi_registration_support(Ctx) ->
    org_apache_sling_jcr_jackrabbit_server_rmi_registration_support(Ctx, #{}).

-spec org_apache_sling_jcr_jackrabbit_server_rmi_registration_support(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_jcr_jackrabbit_server_rmi_registration_support_info:openapi_org_apache_sling_jcr_jackrabbit_server_rmi_registration_support_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_jackrabbit_server_rmi_registration_support(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'port'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_jcr_repoinit_impl_repository_initializer(ctx:ctx()) -> {ok, openapi_org_apache_sling_jcr_repoinit_impl_repository_initializer_info:openapi_org_apache_sling_jcr_repoinit_impl_repository_initializer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_repoinit_impl_repository_initializer(Ctx) ->
    org_apache_sling_jcr_repoinit_impl_repository_initializer(Ctx, #{}).

-spec org_apache_sling_jcr_repoinit_impl_repository_initializer(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_jcr_repoinit_impl_repository_initializer_info:openapi_org_apache_sling_jcr_repoinit_impl_repository_initializer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_repoinit_impl_repository_initializer(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'references'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_jcr_repoinit_repository_initializer(ctx:ctx()) -> {ok, openapi_org_apache_sling_jcr_repoinit_repository_initializer_info:openapi_org_apache_sling_jcr_repoinit_repository_initializer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_repoinit_repository_initializer(Ctx) ->
    org_apache_sling_jcr_repoinit_repository_initializer(Ctx, #{}).

-spec org_apache_sling_jcr_repoinit_repository_initializer(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_jcr_repoinit_repository_initializer_info:openapi_org_apache_sling_jcr_repoinit_repository_initializer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_repoinit_repository_initializer(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'references', 'scripts'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl(ctx:ctx()) -> {ok, openapi_org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl_info:openapi_org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl(Ctx) ->
    org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl(Ctx, #{}).

-spec org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl_info:openapi_org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'resource.resolver.searchpath', 'resource.resolver.manglenamespaces', 'resource.resolver.allowDirect', 'resource.resolver.required.providers', 'resource.resolver.required.providernames', 'resource.resolver.virtual', 'resource.resolver.mapping', 'resource.resolver.map.location', 'resource.resolver.map.observation', 'resource.resolver.default.vanity.redirect.status', 'resource.resolver.enable.vanitypath', 'resource.resolver.vanitypath.maxEntries', 'resource.resolver.vanitypath.maxEntries.startup', 'resource.resolver.vanitypath.bloomfilter.maxBytes', 'resource.resolver.optimize.alias.resolution', 'resource.resolver.vanitypath.whitelist', 'resource.resolver.vanitypath.blacklist', 'resource.resolver.vanity.precedence', 'resource.resolver.providerhandling.paranoid', 'resource.resolver.log.closing', 'resource.resolver.log.unclosed'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_jcr_resource_internal_jcr_system_user_validator(ctx:ctx()) -> {ok, openapi_org_apache_sling_jcr_resource_internal_jcr_system_user_validator_info:openapi_org_apache_sling_jcr_resource_internal_jcr_system_user_validator_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_resource_internal_jcr_system_user_validator(Ctx) ->
    org_apache_sling_jcr_resource_internal_jcr_system_user_validator(Ctx, #{}).

-spec org_apache_sling_jcr_resource_internal_jcr_system_user_validator(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_jcr_resource_internal_jcr_system_user_validator_info:openapi_org_apache_sling_jcr_resource_internal_jcr_system_user_validator_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_resource_internal_jcr_system_user_validator(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'allow.only.system.user'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory(ctx:ctx()) -> {ok, openapi_org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory_info:openapi_org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory(Ctx) ->
    org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory(Ctx, #{}).

-spec org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory_info:openapi_org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'path', 'checkpath.prefix', 'jcrPath'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_jcr_webdav_impl_handler_default_handler_service(ctx:ctx()) -> {ok, openapi_org_apache_sling_jcr_webdav_impl_handler_default_handler_service_info:openapi_org_apache_sling_jcr_webdav_impl_handler_default_handler_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_webdav_impl_handler_default_handler_service(Ctx) ->
    org_apache_sling_jcr_webdav_impl_handler_default_handler_service(Ctx, #{}).

-spec org_apache_sling_jcr_webdav_impl_handler_default_handler_service(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_jcr_webdav_impl_handler_default_handler_service_info:openapi_org_apache_sling_jcr_webdav_impl_handler_default_handler_service_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_webdav_impl_handler_default_handler_service(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'type.collections', 'type.noncollections', 'type.content'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic(ctx:ctx()) -> {ok, openapi_org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic_info:openapi_org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic(Ctx) ->
    org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic(Ctx, #{}).

-spec org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic_info:openapi_org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet(ctx:ctx()) -> {ok, openapi_org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet_info:openapi_org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet(Ctx) ->
    org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet(Ctx, #{}).

-spec org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet_info:openapi_org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'dav.root', 'dav.create-absolute-uri', 'dav.realm', 'collection.types', 'filter.prefixes', 'filter.types', 'filter.uris', 'type.collections', 'type.noncollections', 'type.content'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_jmx_provider_impl_jmx_resource_provider(ctx:ctx()) -> {ok, openapi_org_apache_sling_jmx_provider_impl_jmx_resource_provider_info:openapi_org_apache_sling_jmx_provider_impl_jmx_resource_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jmx_provider_impl_jmx_resource_provider(Ctx) ->
    org_apache_sling_jmx_provider_impl_jmx_resource_provider(Ctx, #{}).

-spec org_apache_sling_jmx_provider_impl_jmx_resource_provider(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_jmx_provider_impl_jmx_resource_provider_info:openapi_org_apache_sling_jmx_provider_impl_jmx_resource_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_jmx_provider_impl_jmx_resource_provider(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'provider.roots'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_models_impl_model_adapter_factory(ctx:ctx()) -> {ok, openapi_org_apache_sling_models_impl_model_adapter_factory_info:openapi_org_apache_sling_models_impl_model_adapter_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_models_impl_model_adapter_factory(Ctx) ->
    org_apache_sling_models_impl_model_adapter_factory(Ctx, #{}).

-spec org_apache_sling_models_impl_model_adapter_factory(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_models_impl_model_adapter_factory_info:openapi_org_apache_sling_models_impl_model_adapter_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_models_impl_model_adapter_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'osgi.http.whiteboard.listener', 'osgi.http.whiteboard.context.select', 'max.recursion.depth', 'cleanup.job.period'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_models_jacksonexporter_impl_resource_module_provider(ctx:ctx()) -> {ok, openapi_org_apache_sling_models_jacksonexporter_impl_resource_module_provider_info:openapi_org_apache_sling_models_jacksonexporter_impl_resource_module_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_models_jacksonexporter_impl_resource_module_provider(Ctx) ->
    org_apache_sling_models_jacksonexporter_impl_resource_module_provider(Ctx, #{}).

-spec org_apache_sling_models_jacksonexporter_impl_resource_module_provider(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_models_jacksonexporter_impl_resource_module_provider_info:openapi_org_apache_sling_models_jacksonexporter_impl_resource_module_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_models_jacksonexporter_impl_resource_module_provider(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'max.recursion.levels'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto(ctx:ctx()) -> {ok, openapi_org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto_info:openapi_org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto(Ctx) ->
    org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto(Ctx, #{}).

-spec org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto_info:openapi_org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'felix.inventory.printer.name', 'felix.inventory.printer.title', 'path'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_resourcemerger_impl_merged_resource_provider_factory(ctx:ctx()) -> {ok, openapi_org_apache_sling_resourcemerger_impl_merged_resource_provider_factory_info:openapi_org_apache_sling_resourcemerger_impl_merged_resource_provider_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_resourcemerger_impl_merged_resource_provider_factory(Ctx) ->
    org_apache_sling_resourcemerger_impl_merged_resource_provider_factory(Ctx, #{}).

-spec org_apache_sling_resourcemerger_impl_merged_resource_provider_factory(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_resourcemerger_impl_merged_resource_provider_factory_info:openapi_org_apache_sling_resourcemerger_impl_merged_resource_provider_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_resourcemerger_impl_merged_resource_provider_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'merge.root', 'merge.readOnly'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_resourcemerger_picker_overriding(ctx:ctx()) -> {ok, openapi_org_apache_sling_resourcemerger_picker_overriding_info:openapi_org_apache_sling_resourcemerger_picker_overriding_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_resourcemerger_picker_overriding(Ctx) ->
    org_apache_sling_resourcemerger_picker_overriding(Ctx, #{}).

-spec org_apache_sling_resourcemerger_picker_overriding(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_resourcemerger_picker_overriding_info:openapi_org_apache_sling_resourcemerger_picker_overriding_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_resourcemerger_picker_overriding(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'merge.root', 'merge.readOnly'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_scripting_core_impl_script_cache_impl(ctx:ctx()) -> {ok, openapi_org_apache_sling_scripting_core_impl_script_cache_impl_info:openapi_org_apache_sling_scripting_core_impl_script_cache_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_scripting_core_impl_script_cache_impl(Ctx) ->
    org_apache_sling_scripting_core_impl_script_cache_impl(Ctx, #{}).

-spec org_apache_sling_scripting_core_impl_script_cache_impl(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_scripting_core_impl_script_cache_impl_info:openapi_org_apache_sling_scripting_core_impl_script_cache_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_scripting_core_impl_script_cache_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'org.apache.sling.scripting.cache.size', 'org.apache.sling.scripting.cache.additional_extensions'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider(ctx:ctx()) -> {ok, openapi_org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider_info:openapi_org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider(Ctx) ->
    org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider(Ctx, #{}).

-spec org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider_info:openapi_org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'log.stacktrace.onclose'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_scripting_java_impl_java_script_engine_factory(ctx:ctx()) -> {ok, openapi_org_apache_sling_scripting_java_impl_java_script_engine_factory_info:openapi_org_apache_sling_scripting_java_impl_java_script_engine_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_scripting_java_impl_java_script_engine_factory(Ctx) ->
    org_apache_sling_scripting_java_impl_java_script_engine_factory(Ctx, #{}).

-spec org_apache_sling_scripting_java_impl_java_script_engine_factory(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_scripting_java_impl_java_script_engine_factory_info:openapi_org_apache_sling_scripting_java_impl_java_script_engine_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_scripting_java_impl_java_script_engine_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'java.classdebuginfo', 'java.javaEncoding', 'java.compilerSourceVM', 'java.compilerTargetVM'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa(ctx:ctx()) -> {ok, openapi_org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa_info:openapi_org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa(Ctx) ->
    org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa(Ctx, #{}).

-spec org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa_info:openapi_org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'org.apache.sling.scripting.javascript.rhino.optLevel'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_scripting_jsp_jsp_script_engine_factory(ctx:ctx()) -> {ok, openapi_org_apache_sling_scripting_jsp_jsp_script_engine_factory_info:openapi_org_apache_sling_scripting_jsp_jsp_script_engine_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_scripting_jsp_jsp_script_engine_factory(Ctx) ->
    org_apache_sling_scripting_jsp_jsp_script_engine_factory(Ctx, #{}).

-spec org_apache_sling_scripting_jsp_jsp_script_engine_factory(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_scripting_jsp_jsp_script_engine_factory_info:openapi_org_apache_sling_scripting_jsp_jsp_script_engine_factory_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_scripting_jsp_jsp_script_engine_factory(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'jasper.compilerTargetVM', 'jasper.compilerSourceVM', 'jasper.classdebuginfo', 'jasper.enablePooling', 'jasper.ieClassId', 'jasper.genStringAsCharArray', 'jasper.keepgenerated', 'jasper.mappedfile', 'jasper.trimSpaces', 'jasper.displaySourceFragments', 'default.is.session'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov(ctx:ctx()) -> {ok, openapi_org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov_info:openapi_org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov(Ctx) ->
    org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov(Ctx, #{}).

-spec org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov_info:openapi_org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'org.apache.sling.scripting.sightly.js.bindings'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_security_impl_content_disposition_filter(ctx:ctx()) -> {ok, openapi_org_apache_sling_security_impl_content_disposition_filter_info:openapi_org_apache_sling_security_impl_content_disposition_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_security_impl_content_disposition_filter(Ctx) ->
    org_apache_sling_security_impl_content_disposition_filter(Ctx, #{}).

-spec org_apache_sling_security_impl_content_disposition_filter(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_security_impl_content_disposition_filter_info:openapi_org_apache_sling_security_impl_content_disposition_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_security_impl_content_disposition_filter(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'sling.content.disposition.paths', 'sling.content.disposition.excluded.paths', 'sling.content.disposition.all.paths'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_security_impl_referrer_filter(ctx:ctx()) -> {ok, openapi_org_apache_sling_security_impl_referrer_filter_info:openapi_org_apache_sling_security_impl_referrer_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_security_impl_referrer_filter(Ctx) ->
    org_apache_sling_security_impl_referrer_filter(Ctx, #{}).

-spec org_apache_sling_security_impl_referrer_filter(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_security_impl_referrer_filter_info:openapi_org_apache_sling_security_impl_referrer_filter_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_security_impl_referrer_filter(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'allow.empty', 'allow.hosts', 'allow.hosts.regexp', 'filter.methods', 'exclude.agents.regexp'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_serviceusermapping_impl_service_user_mapper_impl(ctx:ctx()) -> {ok, openapi_org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_info:openapi_org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_serviceusermapping_impl_service_user_mapper_impl(Ctx) ->
    org_apache_sling_serviceusermapping_impl_service_user_mapper_impl(Ctx, #{}).

-spec org_apache_sling_serviceusermapping_impl_service_user_mapper_impl(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_info:openapi_org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_serviceusermapping_impl_service_user_mapper_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'user.mapping', 'user.default', 'user.enable.default.mapping', 'require.validation'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended(ctx:ctx()) -> {ok, openapi_org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended_info:openapi_org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended(Ctx) ->
    org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended(Ctx, #{}).

-spec org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended_info:openapi_org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'service.ranking', 'user.mapping'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_servlets_get_default_get_servlet(ctx:ctx()) -> {ok, openapi_org_apache_sling_servlets_get_default_get_servlet_info:openapi_org_apache_sling_servlets_get_default_get_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_servlets_get_default_get_servlet(Ctx) ->
    org_apache_sling_servlets_get_default_get_servlet(Ctx, #{}).

-spec org_apache_sling_servlets_get_default_get_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_servlets_get_default_get_servlet_info:openapi_org_apache_sling_servlets_get_default_get_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_servlets_get_default_get_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'aliases', 'index', 'index.files', 'enable.html', 'enable.json', 'enable.txt', 'enable.xml', 'json.maximumresults', 'ecmaSuport'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_servlets_get_impl_version_version_info_servlet(ctx:ctx()) -> {ok, openapi_org_apache_sling_servlets_get_impl_version_version_info_servlet_info:openapi_org_apache_sling_servlets_get_impl_version_version_info_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_servlets_get_impl_version_version_info_servlet(Ctx) ->
    org_apache_sling_servlets_get_impl_version_version_info_servlet(Ctx, #{}).

-spec org_apache_sling_servlets_get_impl_version_version_info_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_servlets_get_impl_version_version_info_servlet_info:openapi_org_apache_sling_servlets_get_impl_version_version_info_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_servlets_get_impl_version_version_info_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'sling.servlet.selectors', 'ecmaSuport'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task(ctx:ctx()) -> {ok, openapi_org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task_info:openapi_org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task(Ctx) ->
    org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task(Ctx, #{}).

-spec org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task_info:openapi_org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'scheduler.expression', 'scheduler.concurrent', 'chunk.cleanup.age'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_servlets_post_impl_sling_post_servlet(ctx:ctx()) -> {ok, openapi_org_apache_sling_servlets_post_impl_sling_post_servlet_info:openapi_org_apache_sling_servlets_post_impl_sling_post_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_servlets_post_impl_sling_post_servlet(Ctx) ->
    org_apache_sling_servlets_post_impl_sling_post_servlet(Ctx, #{}).

-spec org_apache_sling_servlets_post_impl_sling_post_servlet(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_servlets_post_impl_sling_post_servlet_info:openapi_org_apache_sling_servlets_post_impl_sling_post_servlet_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_servlets_post_impl_sling_post_servlet(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'servlet.post.dateFormats', 'servlet.post.nodeNameHints', 'servlet.post.nodeNameMaxLength', 'servlet.post.checkinNewVersionableNodes', 'servlet.post.autoCheckout', 'servlet.post.autoCheckin', 'servlet.post.ignorePattern'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_servlets_resolver_sling_servlet_resolver(ctx:ctx()) -> {ok, openapi_org_apache_sling_servlets_resolver_sling_servlet_resolver_info:openapi_org_apache_sling_servlets_resolver_sling_servlet_resolver_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_servlets_resolver_sling_servlet_resolver(Ctx) ->
    org_apache_sling_servlets_resolver_sling_servlet_resolver(Ctx, #{}).

-spec org_apache_sling_servlets_resolver_sling_servlet_resolver(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_servlets_resolver_sling_servlet_resolver_info:openapi_org_apache_sling_servlets_resolver_sling_servlet_resolver_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_servlets_resolver_sling_servlet_resolver(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'servletresolver.servletRoot', 'servletresolver.cacheSize', 'servletresolver.paths', 'servletresolver.defaultExtensions'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_settings_impl_sling_settings_service_impl(ctx:ctx()) -> {ok, openapi_org_apache_sling_settings_impl_sling_settings_service_impl_info:openapi_org_apache_sling_settings_impl_sling_settings_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_settings_impl_sling_settings_service_impl(Ctx) ->
    org_apache_sling_settings_impl_sling_settings_service_impl(Ctx, #{}).

-spec org_apache_sling_settings_impl_sling_settings_service_impl(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_settings_impl_sling_settings_service_impl_info:openapi_org_apache_sling_settings_impl_sling_settings_service_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_settings_impl_sling_settings_service_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'sling.name', 'sling.description'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_startupfilter_impl_startup_filter_impl(ctx:ctx()) -> {ok, openapi_org_apache_sling_startupfilter_impl_startup_filter_impl_info:openapi_org_apache_sling_startupfilter_impl_startup_filter_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_startupfilter_impl_startup_filter_impl(Ctx) ->
    org_apache_sling_startupfilter_impl_startup_filter_impl(Ctx, #{}).

-spec org_apache_sling_startupfilter_impl_startup_filter_impl(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_startupfilter_impl_startup_filter_impl_info:openapi_org_apache_sling_startupfilter_impl_startup_filter_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_startupfilter_impl_startup_filter_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'active.by.default', 'default.message'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_tenant_internal_tenant_provider_impl(ctx:ctx()) -> {ok, openapi_org_apache_sling_tenant_internal_tenant_provider_impl_info:openapi_org_apache_sling_tenant_internal_tenant_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_tenant_internal_tenant_provider_impl(Ctx) ->
    org_apache_sling_tenant_internal_tenant_provider_impl(Ctx, #{}).

-spec org_apache_sling_tenant_internal_tenant_provider_impl(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_tenant_internal_tenant_provider_impl_info:openapi_org_apache_sling_tenant_internal_tenant_provider_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_tenant_internal_tenant_provider_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'tenant.root', 'tenant.path.matcher'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_tracer_internal_log_tracer(ctx:ctx()) -> {ok, openapi_org_apache_sling_tracer_internal_log_tracer_info:openapi_org_apache_sling_tracer_internal_log_tracer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_tracer_internal_log_tracer(Ctx) ->
    org_apache_sling_tracer_internal_log_tracer(Ctx, #{}).

-spec org_apache_sling_tracer_internal_log_tracer(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_tracer_internal_log_tracer_info:openapi_org_apache_sling_tracer_internal_log_tracer_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_tracer_internal_log_tracer(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.tracer.internal.LogTracer"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'tracerSets', 'enabled', 'servletEnabled', 'recordingCacheSizeInMB', 'recordingCacheDurationInSecs', 'recordingCompressionEnabled', 'gzipResponse'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).

%% @doc 
%% 
-spec org_apache_sling_xss_impl_xss_filter_impl(ctx:ctx()) -> {ok, openapi_org_apache_sling_xss_impl_xss_filter_impl_info:openapi_org_apache_sling_xss_impl_xss_filter_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_xss_impl_xss_filter_impl(Ctx) ->
    org_apache_sling_xss_impl_xss_filter_impl(Ctx, #{}).

-spec org_apache_sling_xss_impl_xss_filter_impl(ctx:ctx(), maps:map()) -> {ok, openapi_org_apache_sling_xss_impl_xss_filter_impl_info:openapi_org_apache_sling_xss_impl_xss_filter_impl_info(), openapi_utils:response_info()} | {ok, hackney:client_ref()} | {error, term(), openapi_utils:response_info()}.
org_apache_sling_xss_impl_xss_filter_impl(Ctx, Optional) ->
    _OptionalParams = maps:get(params, Optional, #{}),
    Cfg = maps:get(cfg, Optional, application:get_env(kuberl, config, #{})),

    Method = post,
    Path = ["/system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl"],
    QS = lists:flatten([])++openapi_utils:optional_params(['post', 'apply', 'delete', 'action', '$location', 'propertylist', 'policyPath'], _OptionalParams),
    Headers = [],
    Body1 = [],
    ContentTypeHeader = openapi_utils:select_header_content_type([]),
    Opts = maps:get(hackney_opts, Optional, []),

    openapi_utils:request(Ctx, Method, [?BASE_URL, Path], QS, ContentTypeHeader++Headers, Body1, Opts, Cfg).


