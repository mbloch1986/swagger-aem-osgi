/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeCqProjectsPurgeSchedulerProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqProjectsPurgeSchedulerProperties :  IEquatable<ComAdobeCqProjectsPurgeSchedulerProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeCqProjectsPurgeSchedulerProperties" /> class.
        /// </summary>
        /// <param name="scheduledpurgeName">scheduledpurgeName.</param>
        /// <param name="scheduledpurgePurgeActive">scheduledpurgePurgeActive.</param>
        /// <param name="scheduledpurgeTemplates">scheduledpurgeTemplates.</param>
        /// <param name="scheduledpurgePurgeGroups">scheduledpurgePurgeGroups.</param>
        /// <param name="scheduledpurgePurgeAssets">scheduledpurgePurgeAssets.</param>
        /// <param name="scheduledpurgeTerminateRunningWorkflows">scheduledpurgeTerminateRunningWorkflows.</param>
        /// <param name="scheduledpurgeDaysold">scheduledpurgeDaysold.</param>
        /// <param name="scheduledpurgeSaveThreshold">scheduledpurgeSaveThreshold.</param>
        public ComAdobeCqProjectsPurgeSchedulerProperties(ConfigNodePropertyString scheduledpurgeName = default(ConfigNodePropertyString), ConfigNodePropertyBoolean scheduledpurgePurgeActive = default(ConfigNodePropertyBoolean), ConfigNodePropertyArray scheduledpurgeTemplates = default(ConfigNodePropertyArray), ConfigNodePropertyBoolean scheduledpurgePurgeGroups = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean scheduledpurgePurgeAssets = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean scheduledpurgeTerminateRunningWorkflows = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger scheduledpurgeDaysold = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger scheduledpurgeSaveThreshold = default(ConfigNodePropertyInteger))
        {
            this.ScheduledpurgeName = scheduledpurgeName;
            this.ScheduledpurgePurgeActive = scheduledpurgePurgeActive;
            this.ScheduledpurgeTemplates = scheduledpurgeTemplates;
            this.ScheduledpurgePurgeGroups = scheduledpurgePurgeGroups;
            this.ScheduledpurgePurgeAssets = scheduledpurgePurgeAssets;
            this.ScheduledpurgeTerminateRunningWorkflows = scheduledpurgeTerminateRunningWorkflows;
            this.ScheduledpurgeDaysold = scheduledpurgeDaysold;
            this.ScheduledpurgeSaveThreshold = scheduledpurgeSaveThreshold;
        }
        
        /// <summary>
        /// Gets or Sets ScheduledpurgeName
        /// </summary>
        [DataMember(Name="scheduledpurge.name", EmitDefaultValue=false)]
        public ConfigNodePropertyString ScheduledpurgeName { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledpurgePurgeActive
        /// </summary>
        [DataMember(Name="scheduledpurge.purgeActive", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ScheduledpurgePurgeActive { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledpurgeTemplates
        /// </summary>
        [DataMember(Name="scheduledpurge.templates", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ScheduledpurgeTemplates { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledpurgePurgeGroups
        /// </summary>
        [DataMember(Name="scheduledpurge.purgeGroups", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ScheduledpurgePurgeGroups { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledpurgePurgeAssets
        /// </summary>
        [DataMember(Name="scheduledpurge.purgeAssets", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ScheduledpurgePurgeAssets { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledpurgeTerminateRunningWorkflows
        /// </summary>
        [DataMember(Name="scheduledpurge.terminateRunningWorkflows", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ScheduledpurgeTerminateRunningWorkflows { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledpurgeDaysold
        /// </summary>
        [DataMember(Name="scheduledpurge.daysold", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ScheduledpurgeDaysold { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledpurgeSaveThreshold
        /// </summary>
        [DataMember(Name="scheduledpurge.saveThreshold", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ScheduledpurgeSaveThreshold { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqProjectsPurgeSchedulerProperties {\n");
            sb.Append("  ScheduledpurgeName: ").Append(ScheduledpurgeName).Append("\n");
            sb.Append("  ScheduledpurgePurgeActive: ").Append(ScheduledpurgePurgeActive).Append("\n");
            sb.Append("  ScheduledpurgeTemplates: ").Append(ScheduledpurgeTemplates).Append("\n");
            sb.Append("  ScheduledpurgePurgeGroups: ").Append(ScheduledpurgePurgeGroups).Append("\n");
            sb.Append("  ScheduledpurgePurgeAssets: ").Append(ScheduledpurgePurgeAssets).Append("\n");
            sb.Append("  ScheduledpurgeTerminateRunningWorkflows: ").Append(ScheduledpurgeTerminateRunningWorkflows).Append("\n");
            sb.Append("  ScheduledpurgeDaysold: ").Append(ScheduledpurgeDaysold).Append("\n");
            sb.Append("  ScheduledpurgeSaveThreshold: ").Append(ScheduledpurgeSaveThreshold).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeCqProjectsPurgeSchedulerProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeCqProjectsPurgeSchedulerProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeCqProjectsPurgeSchedulerProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqProjectsPurgeSchedulerProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScheduledpurgeName == input.ScheduledpurgeName ||
                    (this.ScheduledpurgeName != null &&
                    this.ScheduledpurgeName.Equals(input.ScheduledpurgeName))
                ) && 
                (
                    this.ScheduledpurgePurgeActive == input.ScheduledpurgePurgeActive ||
                    (this.ScheduledpurgePurgeActive != null &&
                    this.ScheduledpurgePurgeActive.Equals(input.ScheduledpurgePurgeActive))
                ) && 
                (
                    this.ScheduledpurgeTemplates == input.ScheduledpurgeTemplates ||
                    (this.ScheduledpurgeTemplates != null &&
                    this.ScheduledpurgeTemplates.Equals(input.ScheduledpurgeTemplates))
                ) && 
                (
                    this.ScheduledpurgePurgeGroups == input.ScheduledpurgePurgeGroups ||
                    (this.ScheduledpurgePurgeGroups != null &&
                    this.ScheduledpurgePurgeGroups.Equals(input.ScheduledpurgePurgeGroups))
                ) && 
                (
                    this.ScheduledpurgePurgeAssets == input.ScheduledpurgePurgeAssets ||
                    (this.ScheduledpurgePurgeAssets != null &&
                    this.ScheduledpurgePurgeAssets.Equals(input.ScheduledpurgePurgeAssets))
                ) && 
                (
                    this.ScheduledpurgeTerminateRunningWorkflows == input.ScheduledpurgeTerminateRunningWorkflows ||
                    (this.ScheduledpurgeTerminateRunningWorkflows != null &&
                    this.ScheduledpurgeTerminateRunningWorkflows.Equals(input.ScheduledpurgeTerminateRunningWorkflows))
                ) && 
                (
                    this.ScheduledpurgeDaysold == input.ScheduledpurgeDaysold ||
                    (this.ScheduledpurgeDaysold != null &&
                    this.ScheduledpurgeDaysold.Equals(input.ScheduledpurgeDaysold))
                ) && 
                (
                    this.ScheduledpurgeSaveThreshold == input.ScheduledpurgeSaveThreshold ||
                    (this.ScheduledpurgeSaveThreshold != null &&
                    this.ScheduledpurgeSaveThreshold.Equals(input.ScheduledpurgeSaveThreshold))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScheduledpurgeName != null)
                    hashCode = hashCode * 59 + this.ScheduledpurgeName.GetHashCode();
                if (this.ScheduledpurgePurgeActive != null)
                    hashCode = hashCode * 59 + this.ScheduledpurgePurgeActive.GetHashCode();
                if (this.ScheduledpurgeTemplates != null)
                    hashCode = hashCode * 59 + this.ScheduledpurgeTemplates.GetHashCode();
                if (this.ScheduledpurgePurgeGroups != null)
                    hashCode = hashCode * 59 + this.ScheduledpurgePurgeGroups.GetHashCode();
                if (this.ScheduledpurgePurgeAssets != null)
                    hashCode = hashCode * 59 + this.ScheduledpurgePurgeAssets.GetHashCode();
                if (this.ScheduledpurgeTerminateRunningWorkflows != null)
                    hashCode = hashCode * 59 + this.ScheduledpurgeTerminateRunningWorkflows.GetHashCode();
                if (this.ScheduledpurgeDaysold != null)
                    hashCode = hashCode * 59 + this.ScheduledpurgeDaysold.GetHashCode();
                if (this.ScheduledpurgeSaveThreshold != null)
                    hashCode = hashCode * 59 + this.ScheduledpurgeSaveThreshold.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
