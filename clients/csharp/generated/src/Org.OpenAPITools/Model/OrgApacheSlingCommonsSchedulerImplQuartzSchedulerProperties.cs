/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties :  IEquatable<OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties" /> class.
        /// </summary>
        /// <param name="poolName">poolName.</param>
        /// <param name="allowedPoolNames">allowedPoolNames.</param>
        /// <param name="schedulerUseleaderforsingle">schedulerUseleaderforsingle.</param>
        /// <param name="metricsFilters">metricsFilters.</param>
        /// <param name="slowThresholdMillis">slowThresholdMillis.</param>
        public OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties(ConfigNodePropertyString poolName = default(ConfigNodePropertyString), ConfigNodePropertyArray allowedPoolNames = default(ConfigNodePropertyArray), ConfigNodePropertyBoolean schedulerUseleaderforsingle = default(ConfigNodePropertyBoolean), ConfigNodePropertyArray metricsFilters = default(ConfigNodePropertyArray), ConfigNodePropertyInteger slowThresholdMillis = default(ConfigNodePropertyInteger))
        {
            this.PoolName = poolName;
            this.AllowedPoolNames = allowedPoolNames;
            this.SchedulerUseleaderforsingle = schedulerUseleaderforsingle;
            this.MetricsFilters = metricsFilters;
            this.SlowThresholdMillis = slowThresholdMillis;
        }
        
        /// <summary>
        /// Gets or Sets PoolName
        /// </summary>
        [DataMember(Name="poolName", EmitDefaultValue=false)]
        public ConfigNodePropertyString PoolName { get; set; }

        /// <summary>
        /// Gets or Sets AllowedPoolNames
        /// </summary>
        [DataMember(Name="allowedPoolNames", EmitDefaultValue=false)]
        public ConfigNodePropertyArray AllowedPoolNames { get; set; }

        /// <summary>
        /// Gets or Sets SchedulerUseleaderforsingle
        /// </summary>
        [DataMember(Name="scheduler.useleaderforsingle", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean SchedulerUseleaderforsingle { get; set; }

        /// <summary>
        /// Gets or Sets MetricsFilters
        /// </summary>
        [DataMember(Name="metrics.filters", EmitDefaultValue=false)]
        public ConfigNodePropertyArray MetricsFilters { get; set; }

        /// <summary>
        /// Gets or Sets SlowThresholdMillis
        /// </summary>
        [DataMember(Name="slowThresholdMillis", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger SlowThresholdMillis { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties {\n");
            sb.Append("  PoolName: ").Append(PoolName).Append("\n");
            sb.Append("  AllowedPoolNames: ").Append(AllowedPoolNames).Append("\n");
            sb.Append("  SchedulerUseleaderforsingle: ").Append(SchedulerUseleaderforsingle).Append("\n");
            sb.Append("  MetricsFilters: ").Append(MetricsFilters).Append("\n");
            sb.Append("  SlowThresholdMillis: ").Append(SlowThresholdMillis).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PoolName == input.PoolName ||
                    (this.PoolName != null &&
                    this.PoolName.Equals(input.PoolName))
                ) && 
                (
                    this.AllowedPoolNames == input.AllowedPoolNames ||
                    (this.AllowedPoolNames != null &&
                    this.AllowedPoolNames.Equals(input.AllowedPoolNames))
                ) && 
                (
                    this.SchedulerUseleaderforsingle == input.SchedulerUseleaderforsingle ||
                    (this.SchedulerUseleaderforsingle != null &&
                    this.SchedulerUseleaderforsingle.Equals(input.SchedulerUseleaderforsingle))
                ) && 
                (
                    this.MetricsFilters == input.MetricsFilters ||
                    (this.MetricsFilters != null &&
                    this.MetricsFilters.Equals(input.MetricsFilters))
                ) && 
                (
                    this.SlowThresholdMillis == input.SlowThresholdMillis ||
                    (this.SlowThresholdMillis != null &&
                    this.SlowThresholdMillis.Equals(input.SlowThresholdMillis))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PoolName != null)
                    hashCode = hashCode * 59 + this.PoolName.GetHashCode();
                if (this.AllowedPoolNames != null)
                    hashCode = hashCode * 59 + this.AllowedPoolNames.GetHashCode();
                if (this.SchedulerUseleaderforsingle != null)
                    hashCode = hashCode * 59 + this.SchedulerUseleaderforsingle.GetHashCode();
                if (this.MetricsFilters != null)
                    hashCode = hashCode * 59 + this.MetricsFilters.GetHashCode();
                if (this.SlowThresholdMillis != null)
                    hashCode = hashCode * 59 + this.SlowThresholdMillis.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
