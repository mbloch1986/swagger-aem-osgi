/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqSearchImplBuilderQueryBuilderImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqSearchImplBuilderQueryBuilderImplProperties::ComDayCqSearchImplBuilderQueryBuilderImplProperties()
{
    m_Excerpt_propertiesIsSet = false;
    m_Cache_max_entriesIsSet = false;
    m_Cache_entry_lifetimeIsSet = false;
    m_Xpath_unionIsSet = false;
}

ComDayCqSearchImplBuilderQueryBuilderImplProperties::~ComDayCqSearchImplBuilderQueryBuilderImplProperties()
{
}

void ComDayCqSearchImplBuilderQueryBuilderImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqSearchImplBuilderQueryBuilderImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Excerpt_propertiesIsSet)
    {
        val[utility::conversions::to_string_t("excerpt.properties")] = ModelBase::toJson(m_Excerpt_properties);
    }
    if(m_Cache_max_entriesIsSet)
    {
        val[utility::conversions::to_string_t("cache.max.entries")] = ModelBase::toJson(m_Cache_max_entries);
    }
    if(m_Cache_entry_lifetimeIsSet)
    {
        val[utility::conversions::to_string_t("cache.entry.lifetime")] = ModelBase::toJson(m_Cache_entry_lifetime);
    }
    if(m_Xpath_unionIsSet)
    {
        val[utility::conversions::to_string_t("xpath.union")] = ModelBase::toJson(m_Xpath_union);
    }

    return val;
}

void ComDayCqSearchImplBuilderQueryBuilderImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("excerpt.properties")))
    {
        if(!val[utility::conversions::to_string_t("excerpt.properties")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("excerpt.properties")]);
            setExcerptProperties( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cache.max.entries")))
    {
        if(!val[utility::conversions::to_string_t("cache.max.entries")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cache.max.entries")]);
            setCacheMaxEntries( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cache.entry.lifetime")))
    {
        if(!val[utility::conversions::to_string_t("cache.entry.lifetime")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cache.entry.lifetime")]);
            setCacheEntryLifetime( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("xpath.union")))
    {
        if(!val[utility::conversions::to_string_t("xpath.union")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("xpath.union")]);
            setXpathUnion( newItem );
        }
    }
}

void ComDayCqSearchImplBuilderQueryBuilderImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Excerpt_propertiesIsSet)
    {
        if (m_Excerpt_properties.get())
        {
            m_Excerpt_properties->toMultipart(multipart, utility::conversions::to_string_t("excerpt.properties."));
        }
    }
    if(m_Cache_max_entriesIsSet)
    {
        if (m_Cache_max_entries.get())
        {
            m_Cache_max_entries->toMultipart(multipart, utility::conversions::to_string_t("cache.max.entries."));
        }
    }
    if(m_Cache_entry_lifetimeIsSet)
    {
        if (m_Cache_entry_lifetime.get())
        {
            m_Cache_entry_lifetime->toMultipart(multipart, utility::conversions::to_string_t("cache.entry.lifetime."));
        }
    }
    if(m_Xpath_unionIsSet)
    {
        if (m_Xpath_union.get())
        {
            m_Xpath_union->toMultipart(multipart, utility::conversions::to_string_t("xpath.union."));
        }
    }
}

void ComDayCqSearchImplBuilderQueryBuilderImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("excerpt.properties")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("excerpt.properties")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("excerpt.properties."));
            setExcerptProperties( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cache.max.entries")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cache.max.entries")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cache.max.entries."));
            setCacheMaxEntries( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cache.entry.lifetime")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cache.entry.lifetime")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cache.entry.lifetime."));
            setCacheEntryLifetime( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("xpath.union")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("xpath.union")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("xpath.union."));
            setXpathUnion( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqSearchImplBuilderQueryBuilderImplProperties::getExcerptProperties() const
{
    return m_Excerpt_properties;
}


void ComDayCqSearchImplBuilderQueryBuilderImplProperties::setExcerptProperties(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Excerpt_properties = value;
    m_Excerpt_propertiesIsSet = true;
}
bool ComDayCqSearchImplBuilderQueryBuilderImplProperties::excerptPropertiesIsSet() const
{
    return m_Excerpt_propertiesIsSet;
}

void ComDayCqSearchImplBuilderQueryBuilderImplProperties::unsetExcerpt_properties()
{
    m_Excerpt_propertiesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqSearchImplBuilderQueryBuilderImplProperties::getCacheMaxEntries() const
{
    return m_Cache_max_entries;
}


void ComDayCqSearchImplBuilderQueryBuilderImplProperties::setCacheMaxEntries(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cache_max_entries = value;
    m_Cache_max_entriesIsSet = true;
}
bool ComDayCqSearchImplBuilderQueryBuilderImplProperties::cacheMaxEntriesIsSet() const
{
    return m_Cache_max_entriesIsSet;
}

void ComDayCqSearchImplBuilderQueryBuilderImplProperties::unsetCache_max_entries()
{
    m_Cache_max_entriesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqSearchImplBuilderQueryBuilderImplProperties::getCacheEntryLifetime() const
{
    return m_Cache_entry_lifetime;
}


void ComDayCqSearchImplBuilderQueryBuilderImplProperties::setCacheEntryLifetime(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cache_entry_lifetime = value;
    m_Cache_entry_lifetimeIsSet = true;
}
bool ComDayCqSearchImplBuilderQueryBuilderImplProperties::cacheEntryLifetimeIsSet() const
{
    return m_Cache_entry_lifetimeIsSet;
}

void ComDayCqSearchImplBuilderQueryBuilderImplProperties::unsetCache_entry_lifetime()
{
    m_Cache_entry_lifetimeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqSearchImplBuilderQueryBuilderImplProperties::getXpathUnion() const
{
    return m_Xpath_union;
}


void ComDayCqSearchImplBuilderQueryBuilderImplProperties::setXpathUnion(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Xpath_union = value;
    m_Xpath_unionIsSet = true;
}
bool ComDayCqSearchImplBuilderQueryBuilderImplProperties::xpathUnionIsSet() const
{
    return m_Xpath_unionIsSet;
}

void ComDayCqSearchImplBuilderQueryBuilderImplProperties::unsetXpath_union()
{
    m_Xpath_unionIsSet = false;
}

}
}
}
}

