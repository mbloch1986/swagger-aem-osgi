/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqDamCoreImplDamEventPurgeServiceProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::OAIComDayCqDamCoreImplDamEventPurgeServiceProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::OAIComDayCqDamCoreImplDamEventPurgeServiceProperties() {
    this->init();
}

OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::~OAIComDayCqDamCoreImplDamEventPurgeServiceProperties() {
    
}

void
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::init() {
    m_scheduler_expression_isSet = false;
    m_max_saved_activities_isSet = false;
    m_save_interval_isSet = false;
    m_enable_activity_purge_isSet = false;
    m_event_types_isSet = false;
}

void
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(scheduler_expression, json[QString("scheduler.expression")]);
    
    ::OpenAPI::fromJsonValue(max_saved_activities, json[QString("maxSavedActivities")]);
    
    ::OpenAPI::fromJsonValue(save_interval, json[QString("saveInterval")]);
    
    ::OpenAPI::fromJsonValue(enable_activity_purge, json[QString("enableActivityPurge")]);
    
    ::OpenAPI::fromJsonValue(event_types, json[QString("eventTypes")]);
    
}

QString
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::asJsonObject() const {
    QJsonObject obj;
	if(scheduler_expression.isSet()){
        obj.insert(QString("scheduler.expression"), ::OpenAPI::toJsonValue(scheduler_expression));
    }
	if(max_saved_activities.isSet()){
        obj.insert(QString("maxSavedActivities"), ::OpenAPI::toJsonValue(max_saved_activities));
    }
	if(save_interval.isSet()){
        obj.insert(QString("saveInterval"), ::OpenAPI::toJsonValue(save_interval));
    }
	if(enable_activity_purge.isSet()){
        obj.insert(QString("enableActivityPurge"), ::OpenAPI::toJsonValue(enable_activity_purge));
    }
	if(event_types.isSet()){
        obj.insert(QString("eventTypes"), ::OpenAPI::toJsonValue(event_types));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::getSchedulerExpression() const {
    return scheduler_expression;
}
void
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::setSchedulerExpression(const OAIConfigNodePropertyString &scheduler_expression) {
    this->scheduler_expression = scheduler_expression;
    this->m_scheduler_expression_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::getMaxSavedActivities() const {
    return max_saved_activities;
}
void
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::setMaxSavedActivities(const OAIConfigNodePropertyInteger &max_saved_activities) {
    this->max_saved_activities = max_saved_activities;
    this->m_max_saved_activities_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::getSaveInterval() const {
    return save_interval;
}
void
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::setSaveInterval(const OAIConfigNodePropertyInteger &save_interval) {
    this->save_interval = save_interval;
    this->m_save_interval_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::getEnableActivityPurge() const {
    return enable_activity_purge;
}
void
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::setEnableActivityPurge(const OAIConfigNodePropertyBoolean &enable_activity_purge) {
    this->enable_activity_purge = enable_activity_purge;
    this->m_enable_activity_purge_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::getEventTypes() const {
    return event_types;
}
void
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::setEventTypes(const OAIConfigNodePropertyDropDown &event_types) {
    this->event_types = event_types;
    this->m_event_types_isSet = true;
}


bool
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(scheduler_expression.isSet()){ isObjectUpdated = true; break;}
    
        if(max_saved_activities.isSet()){ isObjectUpdated = true; break;}
    
        if(save_interval.isSet()){ isObjectUpdated = true; break;}
    
        if(enable_activity_purge.isSet()){ isObjectUpdated = true; break;}
    
        if(event_types.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

