/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties()
{
    m_Service_rankingIsSet = false;
    m_Global_sizeIsSet = false;
    m_Max_disk_usageIsSet = false;
    m_Persistence_enabledIsSet = false;
    m_Thread_pool_max_sizeIsSet = false;
    m_Scheduled_thread_pool_max_sizeIsSet = false;
    m_Graceful_shutdown_timeoutIsSet = false;
    m_QueuesIsSet = false;
    m_TopicsIsSet = false;
    m_Addresses_max_delivery_attemptsIsSet = false;
    m_Addresses_expiry_delayIsSet = false;
    m_Addresses_address_full_message_policyIsSet = false;
    m_Addresses_max_size_bytesIsSet = false;
    m_Addresses_page_size_bytesIsSet = false;
    m_Addresses_page_cache_max_sizeIsSet = false;
    m_Cluster_userIsSet = false;
    m_Cluster_passwordIsSet = false;
    m_Cluster_call_timeoutIsSet = false;
    m_Cluster_call_failover_timeoutIsSet = false;
    m_Cluster_client_failure_check_periodIsSet = false;
    m_Cluster_notification_attemptsIsSet = false;
    m_Cluster_notification_intervalIsSet = false;
    m_Id_cache_sizeIsSet = false;
    m_Cluster_confirmation_window_sizeIsSet = false;
    m_Cluster_connection_ttlIsSet = false;
    m_Cluster_duplicate_detectionIsSet = false;
    m_Cluster_initial_connect_attemptsIsSet = false;
    m_Cluster_max_retry_intervalIsSet = false;
    m_Cluster_min_large_message_sizeIsSet = false;
    m_Cluster_producer_window_sizeIsSet = false;
    m_Cluster_reconnect_attemptsIsSet = false;
    m_Cluster_retry_intervalIsSet = false;
    m_Cluster_retry_interval_multiplierIsSet = false;
    
}

ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::~ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties()
{
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Service_rankingIsSet)
    {
        val["service.ranking"] = ModelBase::toJson(m_Service_ranking);
    }
    if(m_Global_sizeIsSet)
    {
        val["global.size"] = ModelBase::toJson(m_Global_size);
    }
    if(m_Max_disk_usageIsSet)
    {
        val["max.disk.usage"] = ModelBase::toJson(m_Max_disk_usage);
    }
    if(m_Persistence_enabledIsSet)
    {
        val["persistence.enabled"] = ModelBase::toJson(m_Persistence_enabled);
    }
    if(m_Thread_pool_max_sizeIsSet)
    {
        val["thread.pool.max.size"] = ModelBase::toJson(m_Thread_pool_max_size);
    }
    if(m_Scheduled_thread_pool_max_sizeIsSet)
    {
        val["scheduled.thread.pool.max.size"] = ModelBase::toJson(m_Scheduled_thread_pool_max_size);
    }
    if(m_Graceful_shutdown_timeoutIsSet)
    {
        val["graceful.shutdown.timeout"] = ModelBase::toJson(m_Graceful_shutdown_timeout);
    }
    if(m_QueuesIsSet)
    {
        val["queues"] = ModelBase::toJson(m_Queues);
    }
    if(m_TopicsIsSet)
    {
        val["topics"] = ModelBase::toJson(m_Topics);
    }
    if(m_Addresses_max_delivery_attemptsIsSet)
    {
        val["addresses.max.delivery.attempts"] = ModelBase::toJson(m_Addresses_max_delivery_attempts);
    }
    if(m_Addresses_expiry_delayIsSet)
    {
        val["addresses.expiry.delay"] = ModelBase::toJson(m_Addresses_expiry_delay);
    }
    if(m_Addresses_address_full_message_policyIsSet)
    {
        val["addresses.address.full.message.policy"] = ModelBase::toJson(m_Addresses_address_full_message_policy);
    }
    if(m_Addresses_max_size_bytesIsSet)
    {
        val["addresses.max.size.bytes"] = ModelBase::toJson(m_Addresses_max_size_bytes);
    }
    if(m_Addresses_page_size_bytesIsSet)
    {
        val["addresses.page.size.bytes"] = ModelBase::toJson(m_Addresses_page_size_bytes);
    }
    if(m_Addresses_page_cache_max_sizeIsSet)
    {
        val["addresses.page.cache.max.size"] = ModelBase::toJson(m_Addresses_page_cache_max_size);
    }
    if(m_Cluster_userIsSet)
    {
        val["cluster.user"] = ModelBase::toJson(m_Cluster_user);
    }
    if(m_Cluster_passwordIsSet)
    {
        val["cluster.password"] = ModelBase::toJson(m_Cluster_password);
    }
    if(m_Cluster_call_timeoutIsSet)
    {
        val["cluster.call.timeout"] = ModelBase::toJson(m_Cluster_call_timeout);
    }
    if(m_Cluster_call_failover_timeoutIsSet)
    {
        val["cluster.call.failover.timeout"] = ModelBase::toJson(m_Cluster_call_failover_timeout);
    }
    if(m_Cluster_client_failure_check_periodIsSet)
    {
        val["cluster.client.failure.check.period"] = ModelBase::toJson(m_Cluster_client_failure_check_period);
    }
    if(m_Cluster_notification_attemptsIsSet)
    {
        val["cluster.notification.attempts"] = ModelBase::toJson(m_Cluster_notification_attempts);
    }
    if(m_Cluster_notification_intervalIsSet)
    {
        val["cluster.notification.interval"] = ModelBase::toJson(m_Cluster_notification_interval);
    }
    if(m_Id_cache_sizeIsSet)
    {
        val["id.cache.size"] = ModelBase::toJson(m_Id_cache_size);
    }
    if(m_Cluster_confirmation_window_sizeIsSet)
    {
        val["cluster.confirmation.window.size"] = ModelBase::toJson(m_Cluster_confirmation_window_size);
    }
    if(m_Cluster_connection_ttlIsSet)
    {
        val["cluster.connection.ttl"] = ModelBase::toJson(m_Cluster_connection_ttl);
    }
    if(m_Cluster_duplicate_detectionIsSet)
    {
        val["cluster.duplicate.detection"] = ModelBase::toJson(m_Cluster_duplicate_detection);
    }
    if(m_Cluster_initial_connect_attemptsIsSet)
    {
        val["cluster.initial.connect.attempts"] = ModelBase::toJson(m_Cluster_initial_connect_attempts);
    }
    if(m_Cluster_max_retry_intervalIsSet)
    {
        val["cluster.max.retry.interval"] = ModelBase::toJson(m_Cluster_max_retry_interval);
    }
    if(m_Cluster_min_large_message_sizeIsSet)
    {
        val["cluster.min.large.message.size"] = ModelBase::toJson(m_Cluster_min_large_message_size);
    }
    if(m_Cluster_producer_window_sizeIsSet)
    {
        val["cluster.producer.window.size"] = ModelBase::toJson(m_Cluster_producer_window_size);
    }
    if(m_Cluster_reconnect_attemptsIsSet)
    {
        val["cluster.reconnect.attempts"] = ModelBase::toJson(m_Cluster_reconnect_attempts);
    }
    if(m_Cluster_retry_intervalIsSet)
    {
        val["cluster.retry.interval"] = ModelBase::toJson(m_Cluster_retry_interval);
    }
    if(m_Cluster_retry_interval_multiplierIsSet)
    {
        val["cluster.retry.interval.multiplier"] = ModelBase::toJson(m_Cluster_retry_interval_multiplier);
    }
    

    return val;
}

void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::fromJson(nlohmann::json& val)
{
    if(val.find("service.ranking") != val.end())
    {
        if(!val["service.ranking"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["service.ranking"]);
            setServiceRanking( newItem );
        }
        
    }
    if(val.find("global.size") != val.end())
    {
        if(!val["global.size"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["global.size"]);
            setGlobalSize( newItem );
        }
        
    }
    if(val.find("max.disk.usage") != val.end())
    {
        if(!val["max.disk.usage"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["max.disk.usage"]);
            setMaxDiskUsage( newItem );
        }
        
    }
    if(val.find("persistence.enabled") != val.end())
    {
        if(!val["persistence.enabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["persistence.enabled"]);
            setPersistenceEnabled( newItem );
        }
        
    }
    if(val.find("thread.pool.max.size") != val.end())
    {
        if(!val["thread.pool.max.size"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["thread.pool.max.size"]);
            setThreadPoolMaxSize( newItem );
        }
        
    }
    if(val.find("scheduled.thread.pool.max.size") != val.end())
    {
        if(!val["scheduled.thread.pool.max.size"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["scheduled.thread.pool.max.size"]);
            setScheduledThreadPoolMaxSize( newItem );
        }
        
    }
    if(val.find("graceful.shutdown.timeout") != val.end())
    {
        if(!val["graceful.shutdown.timeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["graceful.shutdown.timeout"]);
            setGracefulShutdownTimeout( newItem );
        }
        
    }
    if(val.find("queues") != val.end())
    {
        if(!val["queues"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["queues"]);
            setQueues( newItem );
        }
        
    }
    if(val.find("topics") != val.end())
    {
        if(!val["topics"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["topics"]);
            setTopics( newItem );
        }
        
    }
    if(val.find("addresses.max.delivery.attempts") != val.end())
    {
        if(!val["addresses.max.delivery.attempts"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["addresses.max.delivery.attempts"]);
            setAddressesMaxDeliveryAttempts( newItem );
        }
        
    }
    if(val.find("addresses.expiry.delay") != val.end())
    {
        if(!val["addresses.expiry.delay"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["addresses.expiry.delay"]);
            setAddressesExpiryDelay( newItem );
        }
        
    }
    if(val.find("addresses.address.full.message.policy") != val.end())
    {
        if(!val["addresses.address.full.message.policy"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["addresses.address.full.message.policy"]);
            setAddressesAddressFullMessagePolicy( newItem );
        }
        
    }
    if(val.find("addresses.max.size.bytes") != val.end())
    {
        if(!val["addresses.max.size.bytes"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["addresses.max.size.bytes"]);
            setAddressesMaxSizeBytes( newItem );
        }
        
    }
    if(val.find("addresses.page.size.bytes") != val.end())
    {
        if(!val["addresses.page.size.bytes"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["addresses.page.size.bytes"]);
            setAddressesPageSizeBytes( newItem );
        }
        
    }
    if(val.find("addresses.page.cache.max.size") != val.end())
    {
        if(!val["addresses.page.cache.max.size"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["addresses.page.cache.max.size"]);
            setAddressesPageCacheMaxSize( newItem );
        }
        
    }
    if(val.find("cluster.user") != val.end())
    {
        if(!val["cluster.user"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["cluster.user"]);
            setClusterUser( newItem );
        }
        
    }
    if(val.find("cluster.password") != val.end())
    {
        if(!val["cluster.password"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["cluster.password"]);
            setClusterPassword( newItem );
        }
        
    }
    if(val.find("cluster.call.timeout") != val.end())
    {
        if(!val["cluster.call.timeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cluster.call.timeout"]);
            setClusterCallTimeout( newItem );
        }
        
    }
    if(val.find("cluster.call.failover.timeout") != val.end())
    {
        if(!val["cluster.call.failover.timeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cluster.call.failover.timeout"]);
            setClusterCallFailoverTimeout( newItem );
        }
        
    }
    if(val.find("cluster.client.failure.check.period") != val.end())
    {
        if(!val["cluster.client.failure.check.period"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cluster.client.failure.check.period"]);
            setClusterClientFailureCheckPeriod( newItem );
        }
        
    }
    if(val.find("cluster.notification.attempts") != val.end())
    {
        if(!val["cluster.notification.attempts"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cluster.notification.attempts"]);
            setClusterNotificationAttempts( newItem );
        }
        
    }
    if(val.find("cluster.notification.interval") != val.end())
    {
        if(!val["cluster.notification.interval"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cluster.notification.interval"]);
            setClusterNotificationInterval( newItem );
        }
        
    }
    if(val.find("id.cache.size") != val.end())
    {
        if(!val["id.cache.size"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["id.cache.size"]);
            setIdCacheSize( newItem );
        }
        
    }
    if(val.find("cluster.confirmation.window.size") != val.end())
    {
        if(!val["cluster.confirmation.window.size"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cluster.confirmation.window.size"]);
            setClusterConfirmationWindowSize( newItem );
        }
        
    }
    if(val.find("cluster.connection.ttl") != val.end())
    {
        if(!val["cluster.connection.ttl"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cluster.connection.ttl"]);
            setClusterConnectionTtl( newItem );
        }
        
    }
    if(val.find("cluster.duplicate.detection") != val.end())
    {
        if(!val["cluster.duplicate.detection"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["cluster.duplicate.detection"]);
            setClusterDuplicateDetection( newItem );
        }
        
    }
    if(val.find("cluster.initial.connect.attempts") != val.end())
    {
        if(!val["cluster.initial.connect.attempts"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cluster.initial.connect.attempts"]);
            setClusterInitialConnectAttempts( newItem );
        }
        
    }
    if(val.find("cluster.max.retry.interval") != val.end())
    {
        if(!val["cluster.max.retry.interval"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cluster.max.retry.interval"]);
            setClusterMaxRetryInterval( newItem );
        }
        
    }
    if(val.find("cluster.min.large.message.size") != val.end())
    {
        if(!val["cluster.min.large.message.size"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cluster.min.large.message.size"]);
            setClusterMinLargeMessageSize( newItem );
        }
        
    }
    if(val.find("cluster.producer.window.size") != val.end())
    {
        if(!val["cluster.producer.window.size"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cluster.producer.window.size"]);
            setClusterProducerWindowSize( newItem );
        }
        
    }
    if(val.find("cluster.reconnect.attempts") != val.end())
    {
        if(!val["cluster.reconnect.attempts"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cluster.reconnect.attempts"]);
            setClusterReconnectAttempts( newItem );
        }
        
    }
    if(val.find("cluster.retry.interval") != val.end())
    {
        if(!val["cluster.retry.interval"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cluster.retry.interval"]);
            setClusterRetryInterval( newItem );
        }
        
    }
    if(val.find("cluster.retry.interval.multiplier") != val.end())
    {
        if(!val["cluster.retry.interval.multiplier"].is_null())
        {
            ConfigNodePropertyFloat newItem;
            newItem.fromJson(val["cluster.retry.interval.multiplier"]);
            setClusterRetryIntervalMultiplier( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getServiceRanking() const
{
    return m_Service_ranking;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setServiceRanking(ConfigNodePropertyInteger const& value)
{
    m_Service_ranking = value;
    m_Service_rankingIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::serviceRankingIsSet() const
{
    return m_Service_rankingIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetService_ranking()
{
    m_Service_rankingIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getGlobalSize() const
{
    return m_Global_size;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setGlobalSize(ConfigNodePropertyInteger const& value)
{
    m_Global_size = value;
    m_Global_sizeIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::globalSizeIsSet() const
{
    return m_Global_sizeIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetGlobal_size()
{
    m_Global_sizeIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getMaxDiskUsage() const
{
    return m_Max_disk_usage;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setMaxDiskUsage(ConfigNodePropertyInteger const& value)
{
    m_Max_disk_usage = value;
    m_Max_disk_usageIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::maxDiskUsageIsSet() const
{
    return m_Max_disk_usageIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetMax_disk_usage()
{
    m_Max_disk_usageIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getPersistenceEnabled() const
{
    return m_Persistence_enabled;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setPersistenceEnabled(ConfigNodePropertyBoolean const& value)
{
    m_Persistence_enabled = value;
    m_Persistence_enabledIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::persistenceEnabledIsSet() const
{
    return m_Persistence_enabledIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetPersistence_enabled()
{
    m_Persistence_enabledIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getThreadPoolMaxSize() const
{
    return m_Thread_pool_max_size;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setThreadPoolMaxSize(ConfigNodePropertyInteger const& value)
{
    m_Thread_pool_max_size = value;
    m_Thread_pool_max_sizeIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::threadPoolMaxSizeIsSet() const
{
    return m_Thread_pool_max_sizeIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetThread_pool_max_size()
{
    m_Thread_pool_max_sizeIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getScheduledThreadPoolMaxSize() const
{
    return m_Scheduled_thread_pool_max_size;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setScheduledThreadPoolMaxSize(ConfigNodePropertyInteger const& value)
{
    m_Scheduled_thread_pool_max_size = value;
    m_Scheduled_thread_pool_max_sizeIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::scheduledThreadPoolMaxSizeIsSet() const
{
    return m_Scheduled_thread_pool_max_sizeIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetScheduled_thread_pool_max_size()
{
    m_Scheduled_thread_pool_max_sizeIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getGracefulShutdownTimeout() const
{
    return m_Graceful_shutdown_timeout;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setGracefulShutdownTimeout(ConfigNodePropertyInteger const& value)
{
    m_Graceful_shutdown_timeout = value;
    m_Graceful_shutdown_timeoutIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::gracefulShutdownTimeoutIsSet() const
{
    return m_Graceful_shutdown_timeoutIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetGraceful_shutdown_timeout()
{
    m_Graceful_shutdown_timeoutIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getQueues() const
{
    return m_Queues;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setQueues(ConfigNodePropertyArray const& value)
{
    m_Queues = value;
    m_QueuesIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::queuesIsSet() const
{
    return m_QueuesIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetQueues()
{
    m_QueuesIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getTopics() const
{
    return m_Topics;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setTopics(ConfigNodePropertyArray const& value)
{
    m_Topics = value;
    m_TopicsIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::topicsIsSet() const
{
    return m_TopicsIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetTopics()
{
    m_TopicsIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getAddressesMaxDeliveryAttempts() const
{
    return m_Addresses_max_delivery_attempts;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setAddressesMaxDeliveryAttempts(ConfigNodePropertyInteger const& value)
{
    m_Addresses_max_delivery_attempts = value;
    m_Addresses_max_delivery_attemptsIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::addressesMaxDeliveryAttemptsIsSet() const
{
    return m_Addresses_max_delivery_attemptsIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetAddresses_max_delivery_attempts()
{
    m_Addresses_max_delivery_attemptsIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getAddressesExpiryDelay() const
{
    return m_Addresses_expiry_delay;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setAddressesExpiryDelay(ConfigNodePropertyInteger const& value)
{
    m_Addresses_expiry_delay = value;
    m_Addresses_expiry_delayIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::addressesExpiryDelayIsSet() const
{
    return m_Addresses_expiry_delayIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetAddresses_expiry_delay()
{
    m_Addresses_expiry_delayIsSet = false;
}
ConfigNodePropertyDropDown ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getAddressesAddressFullMessagePolicy() const
{
    return m_Addresses_address_full_message_policy;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setAddressesAddressFullMessagePolicy(ConfigNodePropertyDropDown const& value)
{
    m_Addresses_address_full_message_policy = value;
    m_Addresses_address_full_message_policyIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::addressesAddressFullMessagePolicyIsSet() const
{
    return m_Addresses_address_full_message_policyIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetAddresses_address_full_message_policy()
{
    m_Addresses_address_full_message_policyIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getAddressesMaxSizeBytes() const
{
    return m_Addresses_max_size_bytes;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setAddressesMaxSizeBytes(ConfigNodePropertyInteger const& value)
{
    m_Addresses_max_size_bytes = value;
    m_Addresses_max_size_bytesIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::addressesMaxSizeBytesIsSet() const
{
    return m_Addresses_max_size_bytesIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetAddresses_max_size_bytes()
{
    m_Addresses_max_size_bytesIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getAddressesPageSizeBytes() const
{
    return m_Addresses_page_size_bytes;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setAddressesPageSizeBytes(ConfigNodePropertyInteger const& value)
{
    m_Addresses_page_size_bytes = value;
    m_Addresses_page_size_bytesIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::addressesPageSizeBytesIsSet() const
{
    return m_Addresses_page_size_bytesIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetAddresses_page_size_bytes()
{
    m_Addresses_page_size_bytesIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getAddressesPageCacheMaxSize() const
{
    return m_Addresses_page_cache_max_size;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setAddressesPageCacheMaxSize(ConfigNodePropertyInteger const& value)
{
    m_Addresses_page_cache_max_size = value;
    m_Addresses_page_cache_max_sizeIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::addressesPageCacheMaxSizeIsSet() const
{
    return m_Addresses_page_cache_max_sizeIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetAddresses_page_cache_max_size()
{
    m_Addresses_page_cache_max_sizeIsSet = false;
}
ConfigNodePropertyString ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterUser() const
{
    return m_Cluster_user;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterUser(ConfigNodePropertyString const& value)
{
    m_Cluster_user = value;
    m_Cluster_userIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterUserIsSet() const
{
    return m_Cluster_userIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_user()
{
    m_Cluster_userIsSet = false;
}
ConfigNodePropertyString ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterPassword() const
{
    return m_Cluster_password;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterPassword(ConfigNodePropertyString const& value)
{
    m_Cluster_password = value;
    m_Cluster_passwordIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterPasswordIsSet() const
{
    return m_Cluster_passwordIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_password()
{
    m_Cluster_passwordIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterCallTimeout() const
{
    return m_Cluster_call_timeout;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterCallTimeout(ConfigNodePropertyInteger const& value)
{
    m_Cluster_call_timeout = value;
    m_Cluster_call_timeoutIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterCallTimeoutIsSet() const
{
    return m_Cluster_call_timeoutIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_call_timeout()
{
    m_Cluster_call_timeoutIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterCallFailoverTimeout() const
{
    return m_Cluster_call_failover_timeout;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterCallFailoverTimeout(ConfigNodePropertyInteger const& value)
{
    m_Cluster_call_failover_timeout = value;
    m_Cluster_call_failover_timeoutIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterCallFailoverTimeoutIsSet() const
{
    return m_Cluster_call_failover_timeoutIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_call_failover_timeout()
{
    m_Cluster_call_failover_timeoutIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterClientFailureCheckPeriod() const
{
    return m_Cluster_client_failure_check_period;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterClientFailureCheckPeriod(ConfigNodePropertyInteger const& value)
{
    m_Cluster_client_failure_check_period = value;
    m_Cluster_client_failure_check_periodIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterClientFailureCheckPeriodIsSet() const
{
    return m_Cluster_client_failure_check_periodIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_client_failure_check_period()
{
    m_Cluster_client_failure_check_periodIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterNotificationAttempts() const
{
    return m_Cluster_notification_attempts;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterNotificationAttempts(ConfigNodePropertyInteger const& value)
{
    m_Cluster_notification_attempts = value;
    m_Cluster_notification_attemptsIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterNotificationAttemptsIsSet() const
{
    return m_Cluster_notification_attemptsIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_notification_attempts()
{
    m_Cluster_notification_attemptsIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterNotificationInterval() const
{
    return m_Cluster_notification_interval;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterNotificationInterval(ConfigNodePropertyInteger const& value)
{
    m_Cluster_notification_interval = value;
    m_Cluster_notification_intervalIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterNotificationIntervalIsSet() const
{
    return m_Cluster_notification_intervalIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_notification_interval()
{
    m_Cluster_notification_intervalIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getIdCacheSize() const
{
    return m_Id_cache_size;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setIdCacheSize(ConfigNodePropertyInteger const& value)
{
    m_Id_cache_size = value;
    m_Id_cache_sizeIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::idCacheSizeIsSet() const
{
    return m_Id_cache_sizeIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetId_cache_size()
{
    m_Id_cache_sizeIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterConfirmationWindowSize() const
{
    return m_Cluster_confirmation_window_size;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterConfirmationWindowSize(ConfigNodePropertyInteger const& value)
{
    m_Cluster_confirmation_window_size = value;
    m_Cluster_confirmation_window_sizeIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterConfirmationWindowSizeIsSet() const
{
    return m_Cluster_confirmation_window_sizeIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_confirmation_window_size()
{
    m_Cluster_confirmation_window_sizeIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterConnectionTtl() const
{
    return m_Cluster_connection_ttl;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterConnectionTtl(ConfigNodePropertyInteger const& value)
{
    m_Cluster_connection_ttl = value;
    m_Cluster_connection_ttlIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterConnectionTtlIsSet() const
{
    return m_Cluster_connection_ttlIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_connection_ttl()
{
    m_Cluster_connection_ttlIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterDuplicateDetection() const
{
    return m_Cluster_duplicate_detection;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterDuplicateDetection(ConfigNodePropertyBoolean const& value)
{
    m_Cluster_duplicate_detection = value;
    m_Cluster_duplicate_detectionIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterDuplicateDetectionIsSet() const
{
    return m_Cluster_duplicate_detectionIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_duplicate_detection()
{
    m_Cluster_duplicate_detectionIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterInitialConnectAttempts() const
{
    return m_Cluster_initial_connect_attempts;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterInitialConnectAttempts(ConfigNodePropertyInteger const& value)
{
    m_Cluster_initial_connect_attempts = value;
    m_Cluster_initial_connect_attemptsIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterInitialConnectAttemptsIsSet() const
{
    return m_Cluster_initial_connect_attemptsIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_initial_connect_attempts()
{
    m_Cluster_initial_connect_attemptsIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterMaxRetryInterval() const
{
    return m_Cluster_max_retry_interval;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterMaxRetryInterval(ConfigNodePropertyInteger const& value)
{
    m_Cluster_max_retry_interval = value;
    m_Cluster_max_retry_intervalIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterMaxRetryIntervalIsSet() const
{
    return m_Cluster_max_retry_intervalIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_max_retry_interval()
{
    m_Cluster_max_retry_intervalIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterMinLargeMessageSize() const
{
    return m_Cluster_min_large_message_size;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterMinLargeMessageSize(ConfigNodePropertyInteger const& value)
{
    m_Cluster_min_large_message_size = value;
    m_Cluster_min_large_message_sizeIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterMinLargeMessageSizeIsSet() const
{
    return m_Cluster_min_large_message_sizeIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_min_large_message_size()
{
    m_Cluster_min_large_message_sizeIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterProducerWindowSize() const
{
    return m_Cluster_producer_window_size;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterProducerWindowSize(ConfigNodePropertyInteger const& value)
{
    m_Cluster_producer_window_size = value;
    m_Cluster_producer_window_sizeIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterProducerWindowSizeIsSet() const
{
    return m_Cluster_producer_window_sizeIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_producer_window_size()
{
    m_Cluster_producer_window_sizeIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterReconnectAttempts() const
{
    return m_Cluster_reconnect_attempts;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterReconnectAttempts(ConfigNodePropertyInteger const& value)
{
    m_Cluster_reconnect_attempts = value;
    m_Cluster_reconnect_attemptsIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterReconnectAttemptsIsSet() const
{
    return m_Cluster_reconnect_attemptsIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_reconnect_attempts()
{
    m_Cluster_reconnect_attemptsIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterRetryInterval() const
{
    return m_Cluster_retry_interval;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterRetryInterval(ConfigNodePropertyInteger const& value)
{
    m_Cluster_retry_interval = value;
    m_Cluster_retry_intervalIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterRetryIntervalIsSet() const
{
    return m_Cluster_retry_intervalIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_retry_interval()
{
    m_Cluster_retry_intervalIsSet = false;
}
ConfigNodePropertyFloat ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::getClusterRetryIntervalMultiplier() const
{
    return m_Cluster_retry_interval_multiplier;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::setClusterRetryIntervalMultiplier(ConfigNodePropertyFloat const& value)
{
    m_Cluster_retry_interval_multiplier = value;
    m_Cluster_retry_interval_multiplierIsSet = true;
}
bool ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::clusterRetryIntervalMultiplierIsSet() const
{
    return m_Cluster_retry_interval_multiplierIsSet;
}
void ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties::unsetCluster_retry_interval_multiplier()
{
    m_Cluster_retry_interval_multiplierIsSet = false;
}

}
}
}
}

