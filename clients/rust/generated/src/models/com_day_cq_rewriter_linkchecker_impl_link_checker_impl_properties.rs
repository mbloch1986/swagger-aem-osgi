/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties {
  #[serde(rename = "scheduler.period")]
  scheduler_period: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "scheduler.concurrent")]
  scheduler_concurrent: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "service.bad_link_tolerance_interval")]
  service_bad_link_tolerance_interval: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "service.check_override_patterns")]
  service_check_override_patterns: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "service.cache_broken_internal_links")]
  service_cache_broken_internal_links: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "service.special_link_prefix")]
  service_special_link_prefix: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "service.special_link_patterns")]
  service_special_link_patterns: Option<::models::ConfigNodePropertyArray>
}

impl ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties {
  pub fn new() -> ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties {
    ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties {
      scheduler_period: None,
      scheduler_concurrent: None,
      service_bad_link_tolerance_interval: None,
      service_check_override_patterns: None,
      service_cache_broken_internal_links: None,
      service_special_link_prefix: None,
      service_special_link_patterns: None
    }
  }

  pub fn set_scheduler_period(&mut self, scheduler_period: ::models::ConfigNodePropertyInteger) {
    self.scheduler_period = Some(scheduler_period);
  }

  pub fn with_scheduler_period(mut self, scheduler_period: ::models::ConfigNodePropertyInteger) -> ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties {
    self.scheduler_period = Some(scheduler_period);
    self
  }

  pub fn scheduler_period(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.scheduler_period.as_ref()
  }

  pub fn reset_scheduler_period(&mut self) {
    self.scheduler_period = None;
  }

  pub fn set_scheduler_concurrent(&mut self, scheduler_concurrent: ::models::ConfigNodePropertyBoolean) {
    self.scheduler_concurrent = Some(scheduler_concurrent);
  }

  pub fn with_scheduler_concurrent(mut self, scheduler_concurrent: ::models::ConfigNodePropertyBoolean) -> ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties {
    self.scheduler_concurrent = Some(scheduler_concurrent);
    self
  }

  pub fn scheduler_concurrent(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.scheduler_concurrent.as_ref()
  }

  pub fn reset_scheduler_concurrent(&mut self) {
    self.scheduler_concurrent = None;
  }

  pub fn set_service_bad_link_tolerance_interval(&mut self, service_bad_link_tolerance_interval: ::models::ConfigNodePropertyInteger) {
    self.service_bad_link_tolerance_interval = Some(service_bad_link_tolerance_interval);
  }

  pub fn with_service_bad_link_tolerance_interval(mut self, service_bad_link_tolerance_interval: ::models::ConfigNodePropertyInteger) -> ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties {
    self.service_bad_link_tolerance_interval = Some(service_bad_link_tolerance_interval);
    self
  }

  pub fn service_bad_link_tolerance_interval(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.service_bad_link_tolerance_interval.as_ref()
  }

  pub fn reset_service_bad_link_tolerance_interval(&mut self) {
    self.service_bad_link_tolerance_interval = None;
  }

  pub fn set_service_check_override_patterns(&mut self, service_check_override_patterns: ::models::ConfigNodePropertyArray) {
    self.service_check_override_patterns = Some(service_check_override_patterns);
  }

  pub fn with_service_check_override_patterns(mut self, service_check_override_patterns: ::models::ConfigNodePropertyArray) -> ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties {
    self.service_check_override_patterns = Some(service_check_override_patterns);
    self
  }

  pub fn service_check_override_patterns(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.service_check_override_patterns.as_ref()
  }

  pub fn reset_service_check_override_patterns(&mut self) {
    self.service_check_override_patterns = None;
  }

  pub fn set_service_cache_broken_internal_links(&mut self, service_cache_broken_internal_links: ::models::ConfigNodePropertyBoolean) {
    self.service_cache_broken_internal_links = Some(service_cache_broken_internal_links);
  }

  pub fn with_service_cache_broken_internal_links(mut self, service_cache_broken_internal_links: ::models::ConfigNodePropertyBoolean) -> ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties {
    self.service_cache_broken_internal_links = Some(service_cache_broken_internal_links);
    self
  }

  pub fn service_cache_broken_internal_links(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.service_cache_broken_internal_links.as_ref()
  }

  pub fn reset_service_cache_broken_internal_links(&mut self) {
    self.service_cache_broken_internal_links = None;
  }

  pub fn set_service_special_link_prefix(&mut self, service_special_link_prefix: ::models::ConfigNodePropertyArray) {
    self.service_special_link_prefix = Some(service_special_link_prefix);
  }

  pub fn with_service_special_link_prefix(mut self, service_special_link_prefix: ::models::ConfigNodePropertyArray) -> ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties {
    self.service_special_link_prefix = Some(service_special_link_prefix);
    self
  }

  pub fn service_special_link_prefix(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.service_special_link_prefix.as_ref()
  }

  pub fn reset_service_special_link_prefix(&mut self) {
    self.service_special_link_prefix = None;
  }

  pub fn set_service_special_link_patterns(&mut self, service_special_link_patterns: ::models::ConfigNodePropertyArray) {
    self.service_special_link_patterns = Some(service_special_link_patterns);
  }

  pub fn with_service_special_link_patterns(mut self, service_special_link_patterns: ::models::ConfigNodePropertyArray) -> ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties {
    self.service_special_link_patterns = Some(service_special_link_patterns);
    self
  }

  pub fn service_special_link_patterns(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.service_special_link_patterns.as_ref()
  }

  pub fn reset_service_special_link_patterns(&mut self) {
    self.service_special_link_patterns = None;
  }

}



