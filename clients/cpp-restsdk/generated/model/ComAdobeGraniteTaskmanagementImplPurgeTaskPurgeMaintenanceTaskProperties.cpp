/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties()
{
    m_PurgeCompletedIsSet = false;
    m_CompletedAgeIsSet = false;
    m_PurgeActiveIsSet = false;
    m_ActiveAgeIsSet = false;
    m_SaveThresholdIsSet = false;
}

ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::~ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties()
{
}

void ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_PurgeCompletedIsSet)
    {
        val[utility::conversions::to_string_t("purgeCompleted")] = ModelBase::toJson(m_PurgeCompleted);
    }
    if(m_CompletedAgeIsSet)
    {
        val[utility::conversions::to_string_t("completedAge")] = ModelBase::toJson(m_CompletedAge);
    }
    if(m_PurgeActiveIsSet)
    {
        val[utility::conversions::to_string_t("purgeActive")] = ModelBase::toJson(m_PurgeActive);
    }
    if(m_ActiveAgeIsSet)
    {
        val[utility::conversions::to_string_t("activeAge")] = ModelBase::toJson(m_ActiveAge);
    }
    if(m_SaveThresholdIsSet)
    {
        val[utility::conversions::to_string_t("saveThreshold")] = ModelBase::toJson(m_SaveThreshold);
    }

    return val;
}

void ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("purgeCompleted")))
    {
        if(!val[utility::conversions::to_string_t("purgeCompleted")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("purgeCompleted")]);
            setPurgeCompleted( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("completedAge")))
    {
        if(!val[utility::conversions::to_string_t("completedAge")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("completedAge")]);
            setCompletedAge( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("purgeActive")))
    {
        if(!val[utility::conversions::to_string_t("purgeActive")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("purgeActive")]);
            setPurgeActive( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("activeAge")))
    {
        if(!val[utility::conversions::to_string_t("activeAge")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("activeAge")]);
            setActiveAge( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("saveThreshold")))
    {
        if(!val[utility::conversions::to_string_t("saveThreshold")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("saveThreshold")]);
            setSaveThreshold( newItem );
        }
    }
}

void ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_PurgeCompletedIsSet)
    {
        if (m_PurgeCompleted.get())
        {
            m_PurgeCompleted->toMultipart(multipart, utility::conversions::to_string_t("purgeCompleted."));
        }
    }
    if(m_CompletedAgeIsSet)
    {
        if (m_CompletedAge.get())
        {
            m_CompletedAge->toMultipart(multipart, utility::conversions::to_string_t("completedAge."));
        }
    }
    if(m_PurgeActiveIsSet)
    {
        if (m_PurgeActive.get())
        {
            m_PurgeActive->toMultipart(multipart, utility::conversions::to_string_t("purgeActive."));
        }
    }
    if(m_ActiveAgeIsSet)
    {
        if (m_ActiveAge.get())
        {
            m_ActiveAge->toMultipart(multipart, utility::conversions::to_string_t("activeAge."));
        }
    }
    if(m_SaveThresholdIsSet)
    {
        if (m_SaveThreshold.get())
        {
            m_SaveThreshold->toMultipart(multipart, utility::conversions::to_string_t("saveThreshold."));
        }
    }
}

void ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("purgeCompleted")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("purgeCompleted")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("purgeCompleted."));
            setPurgeCompleted( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("completedAge")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("completedAge")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("completedAge."));
            setCompletedAge( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("purgeActive")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("purgeActive")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("purgeActive."));
            setPurgeActive( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("activeAge")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("activeAge")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("activeAge."));
            setActiveAge( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("saveThreshold")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("saveThreshold")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("saveThreshold."));
            setSaveThreshold( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::getPurgeCompleted() const
{
    return m_PurgeCompleted;
}


void ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::setPurgeCompleted(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_PurgeCompleted = value;
    m_PurgeCompletedIsSet = true;
}
bool ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::purgeCompletedIsSet() const
{
    return m_PurgeCompletedIsSet;
}

void ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::unsetPurgeCompleted()
{
    m_PurgeCompletedIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::getCompletedAge() const
{
    return m_CompletedAge;
}


void ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::setCompletedAge(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_CompletedAge = value;
    m_CompletedAgeIsSet = true;
}
bool ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::completedAgeIsSet() const
{
    return m_CompletedAgeIsSet;
}

void ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::unsetCompletedAge()
{
    m_CompletedAgeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::getPurgeActive() const
{
    return m_PurgeActive;
}


void ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::setPurgeActive(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_PurgeActive = value;
    m_PurgeActiveIsSet = true;
}
bool ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::purgeActiveIsSet() const
{
    return m_PurgeActiveIsSet;
}

void ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::unsetPurgeActive()
{
    m_PurgeActiveIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::getActiveAge() const
{
    return m_ActiveAge;
}


void ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::setActiveAge(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ActiveAge = value;
    m_ActiveAgeIsSet = true;
}
bool ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::activeAgeIsSet() const
{
    return m_ActiveAgeIsSet;
}

void ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::unsetActiveAge()
{
    m_ActiveAgeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::getSaveThreshold() const
{
    return m_SaveThreshold;
}


void ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::setSaveThreshold(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_SaveThreshold = value;
    m_SaveThresholdIsSet = true;
}
bool ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::saveThresholdIsSet() const
{
    return m_SaveThresholdIsSet;
}

void ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::unsetSaveThreshold()
{
    m_SaveThresholdIsSet = false;
}

}
}
}
}

