/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties() {
    init();
}

OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::~OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties() {
    this->cleanup();
}

void
OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::init() {
    max_connections = new OAIConfigNodePropertyString();
    m_max_connections_isSet = false;
    max_requests = new OAIConfigNodePropertyString();
    m_max_requests_isSet = false;
    request_timeout = new OAIConfigNodePropertyString();
    m_request_timeout_isSet = false;
    log_dir = new OAIConfigNodePropertyString();
    m_log_dir_isSet = false;
}

void
OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::cleanup() {
    if(max_connections != nullptr) { 
        delete max_connections;
    }
    if(max_requests != nullptr) { 
        delete max_requests;
    }
    if(request_timeout != nullptr) { 
        delete request_timeout;
    }
    if(log_dir != nullptr) { 
        delete log_dir;
    }
}

OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties*
OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&max_connections, pJson["maxConnections"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&max_requests, pJson["maxRequests"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&request_timeout, pJson["requestTimeout"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&log_dir, pJson["logDir"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::asJsonObject() {
    QJsonObject obj;
    if((max_connections != nullptr) && (max_connections->isSet())){
        toJsonValue(QString("maxConnections"), max_connections, obj, QString("OAIConfigNodePropertyString"));
    }
    if((max_requests != nullptr) && (max_requests->isSet())){
        toJsonValue(QString("maxRequests"), max_requests, obj, QString("OAIConfigNodePropertyString"));
    }
    if((request_timeout != nullptr) && (request_timeout->isSet())){
        toJsonValue(QString("requestTimeout"), request_timeout, obj, QString("OAIConfigNodePropertyString"));
    }
    if((log_dir != nullptr) && (log_dir->isSet())){
        toJsonValue(QString("logDir"), log_dir, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::getMaxConnections() {
    return max_connections;
}
void
OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::setMaxConnections(OAIConfigNodePropertyString* max_connections) {
    this->max_connections = max_connections;
    this->m_max_connections_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::getMaxRequests() {
    return max_requests;
}
void
OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::setMaxRequests(OAIConfigNodePropertyString* max_requests) {
    this->max_requests = max_requests;
    this->m_max_requests_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::getRequestTimeout() {
    return request_timeout;
}
void
OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::setRequestTimeout(OAIConfigNodePropertyString* request_timeout) {
    this->request_timeout = request_timeout;
    this->m_request_timeout_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::getLogDir() {
    return log_dir;
}
void
OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::setLogDir(OAIConfigNodePropertyString* log_dir) {
    this->log_dir = log_dir;
    this->m_log_dir_isSet = true;
}


bool
OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(max_connections != nullptr && max_connections->isSet()){ isObjectUpdated = true; break;}
        if(max_requests != nullptr && max_requests->isSet()){ isObjectUpdated = true; break;}
        if(request_timeout != nullptr && request_timeout->isSet()){ isObjectUpdated = true; break;}
        if(log_dir != nullptr && log_dir->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

