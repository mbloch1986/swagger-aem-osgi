// Models.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case HttpError(statusCode: Int, data: Data?, error: Error)
    case DecodeError(response: Data?, decodeError: DecodeError)
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

public enum Decoded<ValueType> {
    case success(ValueType)
    case failure(DecodeError)
}

public extension Decoded {
    var value: ValueType? {
        switch self {
        case let .success(value):
            return value
        case .failure:
            return nil
        }
    }
}

public enum DecodeError {
    case typeMismatch(expected: String, actual: String)
    case missingKey(key: String)
    case parseError(message: String)
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject, AnyObject?) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject, AnyObject?) -> Decoded<T>)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0, $1) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> Decoded<T> {
        let key = discriminator
        if let decoder = decoders[key], let value = decoder(source, nil) as? Decoded<T> {
            return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> Decoded<[T]> {
        if let sourceArray = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in sourceArray {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value):
                    values.append(value)
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject) -> Decoded<T> {
        switch Decoders.decode(clazz: T.self, source: source, instance: nil) {
    	    case let .success(value):
                return .success(value)
            case let .failure(error):
                return .failure(error)
        }
    }

    static open func decode<T: RawRepresentable>(clazz: T.Type, source: AnyObject) -> Decoded<T> {
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> Decoded<[Key:T]> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value):
                    dictionary[key] = value
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decodeOptional<T: RawRepresentable>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        guard !(source is NSNull), source != nil else { return .success(nil) }
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject, instance: AnyObject?) -> Decoded<T> {
        initialize()
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int32.Type {
            return .success(value)
        }
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int64.Type {
     	    return .success(value)
        }
        if let intermediate = source as? String, let value = UUID(uuidString: intermediate) as? T, source is String, T.self is UUID.Type {
            return .success(value)
        }
        if let value = source as? T {
            return .success(value)
        }
        if let intermediate = source as? String, let value = Data(base64Encoded: intermediate) as? T {
            return .success(value)
        }

        let key = "\(T.self)"
        if let decoder = decoders[key], let value = decoder(source, instance) as? Decoded<T> {
           return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    //Convert a Decoded so that its value is optional. DO WE STILL NEED THIS?
    static func toOptional<T>(decoded: Decoded<T>) -> Decoded<T?> {
        return .success(decoded.value)
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        if let source = source, !(source is NSNull) {
            switch Decoders.decode(clazz: clazz, source: source, instance: nil) {
            case let .success(value): return .success(value)
            case let .failure(error): return .failure(error)
            }
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> where T: RawRepresentable {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decodeOptional(clazz: T.self, source: sourceValue) {
                case let .success(value): if let value = value { values.append(value) }
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value): values.append(value)
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> Decoded<[Key:T]?> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value): dictionary[key] = value
                case let .failure(error): return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T: RawRepresentable, U: AnyObject>(clazz: T, source: AnyObject) -> Decoded<T?> where T.RawValue == U {
        if let value = source as? U {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "String", actual: String(describing: type(of: source))))
        }
    }


    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.locale = Locale(identifier: "en_US_POSIX")
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Date> in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return .success(date)
                    }
                }
            }
            if let sourceInt = source as? Int {
                // treat as a java date
                return .success(Date(timeIntervalSince1970: Double(sourceInt / 1000) ))
            }
            if source is String || source is Int {
                return .failure(.parseError(message: "Could not decode date"))
            } else {
                return .failure(.typeMismatch(expected: "String or Int", actual: "\(source)"))
            }
        }

        // Decoder for ISOFullDate
        Decoders.addDecoder(clazz: ISOFullDate.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ISOFullDate> in
            if let string = source as? String,
               let isoDate = ISOFullDate.from(string: string) {
                return .success(isoDate)
            } else {
            	return .failure(.typeMismatch(expected: "ISO date", actual: "\(source)"))
            }
        }

        // Decoder for [AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo]
        Decoders.addDecoder(clazz: [AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo]> in
            return Decoders.decode(clazz: [AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo].self, source: source)
        }

        // Decoder for AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo
        Decoders.addDecoder(clazz: AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo() : instance as! AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo", actual: "\(source)"))
            }
        }
        // Decoder for [AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties]
        Decoders.addDecoder(clazz: [AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties]> in
            return Decoders.decode(clazz: [AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties].self, source: source)
        }

        // Decoder for AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties
        Decoders.addDecoder(clazz: AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties() : instance as! AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["showPlaceholder"] as AnyObject?) {
                
                case let .success(value): _result.showPlaceholder = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maximumCacheEntries"] as AnyObject?) {
                
                case let .success(value): _result.maximumCacheEntries = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["af.scripting.compatversion"] as AnyObject?) {
                
                case let .success(value): _result.afScriptingCompatversion = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["makeFileNameUnique"] as AnyObject?) {
                
                case let .success(value): _result.makeFileNameUnique = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["generatingCompliantData"] as AnyObject?) {
                
                case let .success(value): _result.generatingCompliantData = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties", actual: "\(source)"))
            }
        }
        // Decoder for [AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo]
        Decoders.addDecoder(clazz: [AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo]> in
            return Decoders.decode(clazz: [AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo].self, source: source)
        }

        // Decoder for AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo
        Decoders.addDecoder(clazz: AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo() : instance as! AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo", actual: "\(source)"))
            }
        }
        // Decoder for [AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties]
        Decoders.addDecoder(clazz: [AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties]> in
            return Decoders.decode(clazz: [AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties].self, source: source)
        }

        // Decoder for AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties
        Decoders.addDecoder(clazz: AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties() : instance as! AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fontList"] as AnyObject?) {
                
                case let .success(value): _result.fontList = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties", actual: "\(source)"))
            }
        }
        // Decoder for [AnalyticsComponentQueryCacheServiceInfo]
        Decoders.addDecoder(clazz: [AnalyticsComponentQueryCacheServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[AnalyticsComponentQueryCacheServiceInfo]> in
            return Decoders.decode(clazz: [AnalyticsComponentQueryCacheServiceInfo].self, source: source)
        }

        // Decoder for AnalyticsComponentQueryCacheServiceInfo
        Decoders.addDecoder(clazz: AnalyticsComponentQueryCacheServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<AnalyticsComponentQueryCacheServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? AnalyticsComponentQueryCacheServiceInfo() : instance as! AnalyticsComponentQueryCacheServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: AnalyticsComponentQueryCacheServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "AnalyticsComponentQueryCacheServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [AnalyticsComponentQueryCacheServiceProperties]
        Decoders.addDecoder(clazz: [AnalyticsComponentQueryCacheServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[AnalyticsComponentQueryCacheServiceProperties]> in
            return Decoders.decode(clazz: [AnalyticsComponentQueryCacheServiceProperties].self, source: source)
        }

        // Decoder for AnalyticsComponentQueryCacheServiceProperties
        Decoders.addDecoder(clazz: AnalyticsComponentQueryCacheServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<AnalyticsComponentQueryCacheServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? AnalyticsComponentQueryCacheServiceProperties() : instance as! AnalyticsComponentQueryCacheServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.analytics.component.query.cache.size"] as AnyObject?) {
                
                case let .success(value): _result.cqAnalyticsComponentQueryCacheSize = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "AnalyticsComponentQueryCacheServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ApacheSlingHealthCheckResultHTMLSerializerInfo]
        Decoders.addDecoder(clazz: [ApacheSlingHealthCheckResultHTMLSerializerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ApacheSlingHealthCheckResultHTMLSerializerInfo]> in
            return Decoders.decode(clazz: [ApacheSlingHealthCheckResultHTMLSerializerInfo].self, source: source)
        }

        // Decoder for ApacheSlingHealthCheckResultHTMLSerializerInfo
        Decoders.addDecoder(clazz: ApacheSlingHealthCheckResultHTMLSerializerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ApacheSlingHealthCheckResultHTMLSerializerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ApacheSlingHealthCheckResultHTMLSerializerInfo() : instance as! ApacheSlingHealthCheckResultHTMLSerializerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ApacheSlingHealthCheckResultHTMLSerializerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ApacheSlingHealthCheckResultHTMLSerializerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ApacheSlingHealthCheckResultHTMLSerializerProperties]
        Decoders.addDecoder(clazz: [ApacheSlingHealthCheckResultHTMLSerializerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ApacheSlingHealthCheckResultHTMLSerializerProperties]> in
            return Decoders.decode(clazz: [ApacheSlingHealthCheckResultHTMLSerializerProperties].self, source: source)
        }

        // Decoder for ApacheSlingHealthCheckResultHTMLSerializerProperties
        Decoders.addDecoder(clazz: ApacheSlingHealthCheckResultHTMLSerializerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ApacheSlingHealthCheckResultHTMLSerializerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ApacheSlingHealthCheckResultHTMLSerializerProperties() : instance as! ApacheSlingHealthCheckResultHTMLSerializerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["styleString"] as AnyObject?) {
                
                case let .success(value): _result.styleString = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ApacheSlingHealthCheckResultHTMLSerializerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo]
        Decoders.addDecoder(clazz: [ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo]> in
            return Decoders.decode(clazz: [ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo].self, source: source)
        }

        // Decoder for ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo
        Decoders.addDecoder(clazz: ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo() : instance as! ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationProperties]
        Decoders.addDecoder(clazz: [ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationProperties]> in
            return Decoders.decode(clazz: [ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationProperties].self, source: source)
        }

        // Decoder for ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationProperties
        Decoders.addDecoder(clazz: ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationProperties() : instance as! ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["formsManagerConfig.includeOOTBTemplates"] as AnyObject?) {
                
                case let .success(value): _result.formsManagerConfigIncludeOOTBTemplates = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["formsManagerConfig.includeDeprecatedTemplates"] as AnyObject?) {
                
                case let .success(value): _result.formsManagerConfigIncludeDeprecatedTemplates = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeAemTransactionCoreImplTransactionRecorderInfo]
        Decoders.addDecoder(clazz: [ComAdobeAemTransactionCoreImplTransactionRecorderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeAemTransactionCoreImplTransactionRecorderInfo]> in
            return Decoders.decode(clazz: [ComAdobeAemTransactionCoreImplTransactionRecorderInfo].self, source: source)
        }

        // Decoder for ComAdobeAemTransactionCoreImplTransactionRecorderInfo
        Decoders.addDecoder(clazz: ComAdobeAemTransactionCoreImplTransactionRecorderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeAemTransactionCoreImplTransactionRecorderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeAemTransactionCoreImplTransactionRecorderInfo() : instance as! ComAdobeAemTransactionCoreImplTransactionRecorderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeAemTransactionCoreImplTransactionRecorderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeAemTransactionCoreImplTransactionRecorderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeAemTransactionCoreImplTransactionRecorderProperties]
        Decoders.addDecoder(clazz: [ComAdobeAemTransactionCoreImplTransactionRecorderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeAemTransactionCoreImplTransactionRecorderProperties]> in
            return Decoders.decode(clazz: [ComAdobeAemTransactionCoreImplTransactionRecorderProperties].self, source: source)
        }

        // Decoder for ComAdobeAemTransactionCoreImplTransactionRecorderProperties
        Decoders.addDecoder(clazz: ComAdobeAemTransactionCoreImplTransactionRecorderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeAemTransactionCoreImplTransactionRecorderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeAemTransactionCoreImplTransactionRecorderProperties() : instance as! ComAdobeAemTransactionCoreImplTransactionRecorderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["isTransactionRecordingEnabled"] as AnyObject?) {
                
                case let .success(value): _result.isTransactionRecordingEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeAemTransactionCoreImplTransactionRecorderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo]
        Decoders.addDecoder(clazz: [ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo]> in
            return Decoders.decode(clazz: [ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo].self, source: source)
        }

        // Decoder for ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo
        Decoders.addDecoder(clazz: ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo() : instance as! ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCProperties]
        Decoders.addDecoder(clazz: [ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCProperties]> in
            return Decoders.decode(clazz: [ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCProperties].self, source: source)
        }

        // Decoder for ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCProperties
        Decoders.addDecoder(clazz: ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCProperties() : instance as! ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.name"] as AnyObject?) {
                
                case let .success(value): _result.hcName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.mbean.name"] as AnyObject?) {
                
                case let .success(value): _result.hcMbeanName = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo]
        Decoders.addDecoder(clazz: [ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo]> in
            return Decoders.decode(clazz: [ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo].self, source: source)
        }

        // Decoder for ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo
        Decoders.addDecoder(clazz: ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo() : instance as! ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCProperties]
        Decoders.addDecoder(clazz: [ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCProperties]> in
            return Decoders.decode(clazz: [ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCProperties].self, source: source)
        }

        // Decoder for ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCProperties
        Decoders.addDecoder(clazz: ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCProperties() : instance as! ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.name"] as AnyObject?) {
                
                case let .success(value): _result.hcName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.mbean.name"] as AnyObject?) {
                
                case let .success(value): _result.hcMbeanName = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo].self, source: source)
        }

        // Decoder for ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo
        Decoders.addDecoder(clazz: ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo() : instance as! ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties].self, source: source)
        }

        // Decoder for ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties
        Decoders.addDecoder(clazz: ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties() : instance as! ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["pre-upgrade.maintenance.tasks"] as AnyObject?) {
                
                case let .success(value): _result.preUpgradeMaintenanceTasks = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["pre-upgrade.hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.preUpgradeHcTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo].self, source: source)
        }

        // Decoder for ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo
        Decoders.addDecoder(clazz: ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo() : instance as! ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties].self, source: source)
        }

        // Decoder for ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties
        Decoders.addDecoder(clazz: ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties() : instance as! ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["root.path"] as AnyObject?) {
                
                case let .success(value): _result.rootPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["fix.inconsistencies"] as AnyObject?) {
                
                case let .success(value): _result.fixInconsistencies = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqAccountApiAccountManagementServiceInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqAccountApiAccountManagementServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqAccountApiAccountManagementServiceInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqAccountApiAccountManagementServiceInfo].self, source: source)
        }

        // Decoder for ComAdobeCqAccountApiAccountManagementServiceInfo
        Decoders.addDecoder(clazz: ComAdobeCqAccountApiAccountManagementServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqAccountApiAccountManagementServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqAccountApiAccountManagementServiceInfo() : instance as! ComAdobeCqAccountApiAccountManagementServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqAccountApiAccountManagementServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"] as AnyObject?) {
                
                case let .success(value): _result.additionalProperties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqAccountApiAccountManagementServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqAccountApiAccountManagementServiceProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqAccountApiAccountManagementServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqAccountApiAccountManagementServiceProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqAccountApiAccountManagementServiceProperties].self, source: source)
        }

        // Decoder for ComAdobeCqAccountApiAccountManagementServiceProperties
        Decoders.addDecoder(clazz: ComAdobeCqAccountApiAccountManagementServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqAccountApiAccountManagementServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqAccountApiAccountManagementServiceProperties() : instance as! ComAdobeCqAccountApiAccountManagementServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.accountmanager.token.validity.period"] as AnyObject?) {
                
                case let .success(value): _result.cqAccountmanagerTokenValidityPeriod = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.accountmanager.config.requestnewaccount.mail"] as AnyObject?) {
                
                case let .success(value): _result.cqAccountmanagerConfigRequestnewaccountMail = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.accountmanager.config.requestnewpwd.mail"] as AnyObject?) {
                
                case let .success(value): _result.cqAccountmanagerConfigRequestnewpwdMail = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqAccountApiAccountManagementServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqAccountImplAccountManagementServletInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqAccountImplAccountManagementServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqAccountImplAccountManagementServletInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqAccountImplAccountManagementServletInfo].self, source: source)
        }

        // Decoder for ComAdobeCqAccountImplAccountManagementServletInfo
        Decoders.addDecoder(clazz: ComAdobeCqAccountImplAccountManagementServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqAccountImplAccountManagementServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqAccountImplAccountManagementServletInfo() : instance as! ComAdobeCqAccountImplAccountManagementServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqAccountImplAccountManagementServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqAccountImplAccountManagementServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqAccountImplAccountManagementServletProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqAccountImplAccountManagementServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqAccountImplAccountManagementServletProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqAccountImplAccountManagementServletProperties].self, source: source)
        }

        // Decoder for ComAdobeCqAccountImplAccountManagementServletProperties
        Decoders.addDecoder(clazz: ComAdobeCqAccountImplAccountManagementServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqAccountImplAccountManagementServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqAccountImplAccountManagementServletProperties() : instance as! ComAdobeCqAccountImplAccountManagementServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.accountmanager.config.informnewaccount.mail"] as AnyObject?) {
                
                case let .success(value): _result.cqAccountmanagerConfigInformnewaccountMail = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.accountmanager.config.informnewpwd.mail"] as AnyObject?) {
                
                case let .success(value): _result.cqAccountmanagerConfigInformnewpwdMail = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqAccountImplAccountManagementServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqAddressImplLocationLocationListServletInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqAddressImplLocationLocationListServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqAddressImplLocationLocationListServletInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqAddressImplLocationLocationListServletInfo].self, source: source)
        }

        // Decoder for ComAdobeCqAddressImplLocationLocationListServletInfo
        Decoders.addDecoder(clazz: ComAdobeCqAddressImplLocationLocationListServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqAddressImplLocationLocationListServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqAddressImplLocationLocationListServletInfo() : instance as! ComAdobeCqAddressImplLocationLocationListServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqAddressImplLocationLocationListServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqAddressImplLocationLocationListServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqAddressImplLocationLocationListServletProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqAddressImplLocationLocationListServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqAddressImplLocationLocationListServletProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqAddressImplLocationLocationListServletProperties].self, source: source)
        }

        // Decoder for ComAdobeCqAddressImplLocationLocationListServletProperties
        Decoders.addDecoder(clazz: ComAdobeCqAddressImplLocationLocationListServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqAddressImplLocationLocationListServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqAddressImplLocationLocationListServletProperties() : instance as! ComAdobeCqAddressImplLocationLocationListServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.address.location.default.maxResults"] as AnyObject?) {
                
                case let .success(value): _result.cqAddressLocationDefaultMaxResults = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqAddressImplLocationLocationListServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqAuditPurgeDamInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqAuditPurgeDamInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqAuditPurgeDamInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqAuditPurgeDamInfo].self, source: source)
        }

        // Decoder for ComAdobeCqAuditPurgeDamInfo
        Decoders.addDecoder(clazz: ComAdobeCqAuditPurgeDamInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqAuditPurgeDamInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqAuditPurgeDamInfo() : instance as! ComAdobeCqAuditPurgeDamInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqAuditPurgeDamProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqAuditPurgeDamInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqAuditPurgeDamProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqAuditPurgeDamProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqAuditPurgeDamProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqAuditPurgeDamProperties].self, source: source)
        }

        // Decoder for ComAdobeCqAuditPurgeDamProperties
        Decoders.addDecoder(clazz: ComAdobeCqAuditPurgeDamProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqAuditPurgeDamProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqAuditPurgeDamProperties() : instance as! ComAdobeCqAuditPurgeDamProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auditlog.rule.name"] as AnyObject?) {
                
                case let .success(value): _result.auditlogRuleName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auditlog.rule.contentpath"] as AnyObject?) {
                
                case let .success(value): _result.auditlogRuleContentpath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["auditlog.rule.minimumage"] as AnyObject?) {
                
                case let .success(value): _result.auditlogRuleMinimumage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["auditlog.rule.types"] as AnyObject?) {
                
                case let .success(value): _result.auditlogRuleTypes = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqAuditPurgeDamProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqAuditPurgePagesInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqAuditPurgePagesInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqAuditPurgePagesInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqAuditPurgePagesInfo].self, source: source)
        }

        // Decoder for ComAdobeCqAuditPurgePagesInfo
        Decoders.addDecoder(clazz: ComAdobeCqAuditPurgePagesInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqAuditPurgePagesInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqAuditPurgePagesInfo() : instance as! ComAdobeCqAuditPurgePagesInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqAuditPurgePagesProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqAuditPurgePagesInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqAuditPurgePagesProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqAuditPurgePagesProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqAuditPurgePagesProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqAuditPurgePagesProperties].self, source: source)
        }

        // Decoder for ComAdobeCqAuditPurgePagesProperties
        Decoders.addDecoder(clazz: ComAdobeCqAuditPurgePagesProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqAuditPurgePagesProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqAuditPurgePagesProperties() : instance as! ComAdobeCqAuditPurgePagesProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auditlog.rule.name"] as AnyObject?) {
                
                case let .success(value): _result.auditlogRuleName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auditlog.rule.contentpath"] as AnyObject?) {
                
                case let .success(value): _result.auditlogRuleContentpath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["auditlog.rule.minimumage"] as AnyObject?) {
                
                case let .success(value): _result.auditlogRuleMinimumage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["auditlog.rule.types"] as AnyObject?) {
                
                case let .success(value): _result.auditlogRuleTypes = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqAuditPurgePagesProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqAuditPurgeReplicationInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqAuditPurgeReplicationInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqAuditPurgeReplicationInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqAuditPurgeReplicationInfo].self, source: source)
        }

        // Decoder for ComAdobeCqAuditPurgeReplicationInfo
        Decoders.addDecoder(clazz: ComAdobeCqAuditPurgeReplicationInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqAuditPurgeReplicationInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqAuditPurgeReplicationInfo() : instance as! ComAdobeCqAuditPurgeReplicationInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqAuditPurgeReplicationProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqAuditPurgeReplicationInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqAuditPurgeReplicationProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqAuditPurgeReplicationProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqAuditPurgeReplicationProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqAuditPurgeReplicationProperties].self, source: source)
        }

        // Decoder for ComAdobeCqAuditPurgeReplicationProperties
        Decoders.addDecoder(clazz: ComAdobeCqAuditPurgeReplicationProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqAuditPurgeReplicationProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqAuditPurgeReplicationProperties() : instance as! ComAdobeCqAuditPurgeReplicationProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auditlog.rule.name"] as AnyObject?) {
                
                case let .success(value): _result.auditlogRuleName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auditlog.rule.contentpath"] as AnyObject?) {
                
                case let .success(value): _result.auditlogRuleContentpath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["auditlog.rule.minimumage"] as AnyObject?) {
                
                case let .success(value): _result.auditlogRuleMinimumage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["auditlog.rule.types"] as AnyObject?) {
                
                case let .success(value): _result.auditlogRuleTypes = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqAuditPurgeReplicationProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo].self, source: source)
        }

        // Decoder for ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo
        Decoders.addDecoder(clazz: ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo() : instance as! ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties].self, source: source)
        }

        // Decoder for ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties
        Decoders.addDecoder(clazz: ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties() : instance as! ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["keypair.id"] as AnyObject?) {
                
                case let .success(value): _result.keypairId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["keypair.alias"] as AnyObject?) {
                
                case let .success(value): _result.keypairAlias = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cdnrewriter.attributes"] as AnyObject?) {
                
                case let .success(value): _result.cdnrewriterAttributes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cdn.rewriter.distribution.domain"] as AnyObject?) {
                
                case let .success(value): _result.cdnRewriterDistributionDomain = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo() : instance as! ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties() : instance as! ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cdn.config.distribution.domain"] as AnyObject?) {
                
                case let .success(value): _result.cdnConfigDistributionDomain = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cdn.config.enable.rewriting"] as AnyObject?) {
                
                case let .success(value): _result.cdnConfigEnableRewriting = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cdn.config.path.prefixes"] as AnyObject?) {
                
                case let .success(value): _result.cdnConfigPathPrefixes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cdn.config.cdnttl"] as AnyObject?) {
                
                case let .success(value): _result.cdnConfigCdnttl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cdn.config.application.protocol"] as AnyObject?) {
                
                case let .success(value): _result.cdnConfigApplicationProtocol = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqCdnRewriterImplCDNRewriterInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqCdnRewriterImplCDNRewriterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqCdnRewriterImplCDNRewriterInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqCdnRewriterImplCDNRewriterInfo].self, source: source)
        }

        // Decoder for ComAdobeCqCdnRewriterImplCDNRewriterInfo
        Decoders.addDecoder(clazz: ComAdobeCqCdnRewriterImplCDNRewriterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqCdnRewriterImplCDNRewriterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqCdnRewriterImplCDNRewriterInfo() : instance as! ComAdobeCqCdnRewriterImplCDNRewriterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqCdnRewriterImplCDNRewriterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqCdnRewriterImplCDNRewriterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqCdnRewriterImplCDNRewriterProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqCdnRewriterImplCDNRewriterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqCdnRewriterImplCDNRewriterProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqCdnRewriterImplCDNRewriterProperties].self, source: source)
        }

        // Decoder for ComAdobeCqCdnRewriterImplCDNRewriterProperties
        Decoders.addDecoder(clazz: ComAdobeCqCdnRewriterImplCDNRewriterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqCdnRewriterImplCDNRewriterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqCdnRewriterImplCDNRewriterProperties() : instance as! ComAdobeCqCdnRewriterImplCDNRewriterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cdnrewriter.attributes"] as AnyObject?) {
                
                case let .success(value): _result.cdnrewriterAttributes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cdn.rewriter.distribution.domain"] as AnyObject?) {
                
                case let .success(value): _result.cdnRewriterDistributionDomain = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqCdnRewriterImplCDNRewriterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo].self, source: source)
        }

        // Decoder for ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo
        Decoders.addDecoder(clazz: ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo() : instance as! ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties].self, source: source)
        }

        // Decoder for ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties
        Decoders.addDecoder(clazz: ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties() : instance as! ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["flush.agents"] as AnyObject?) {
                
                case let .success(value): _result.flushAgents = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo].self, source: source)
        }

        // Decoder for ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo
        Decoders.addDecoder(clazz: ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo() : instance as! ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties].self, source: source)
        }

        // Decoder for ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties
        Decoders.addDecoder(clazz: ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties() : instance as! ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.commerce.asset.handler.active"] as AnyObject?) {
                
                case let .success(value): _result.cqCommerceAssetHandlerActive = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.commerce.asset.handler.name"] as AnyObject?) {
                
                case let .success(value): _result.cqCommerceAssetHandlerName = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo() : instance as! ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties() : instance as! ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.commerce.asset.handler.fallback"] as AnyObject?) {
                
                case let .success(value): _result.cqCommerceAssetHandlerFallback = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqCommerceImplAssetStaticImageHandlerInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqCommerceImplAssetStaticImageHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqCommerceImplAssetStaticImageHandlerInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqCommerceImplAssetStaticImageHandlerInfo].self, source: source)
        }

        // Decoder for ComAdobeCqCommerceImplAssetStaticImageHandlerInfo
        Decoders.addDecoder(clazz: ComAdobeCqCommerceImplAssetStaticImageHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqCommerceImplAssetStaticImageHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqCommerceImplAssetStaticImageHandlerInfo() : instance as! ComAdobeCqCommerceImplAssetStaticImageHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqCommerceImplAssetStaticImageHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqCommerceImplAssetStaticImageHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqCommerceImplAssetStaticImageHandlerProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqCommerceImplAssetStaticImageHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqCommerceImplAssetStaticImageHandlerProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqCommerceImplAssetStaticImageHandlerProperties].self, source: source)
        }

        // Decoder for ComAdobeCqCommerceImplAssetStaticImageHandlerProperties
        Decoders.addDecoder(clazz: ComAdobeCqCommerceImplAssetStaticImageHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqCommerceImplAssetStaticImageHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqCommerceImplAssetStaticImageHandlerProperties() : instance as! ComAdobeCqCommerceImplAssetStaticImageHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.commerce.asset.handler.active"] as AnyObject?) {
                
                case let .success(value): _result.cqCommerceAssetHandlerActive = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.commerce.asset.handler.name"] as AnyObject?) {
                
                case let .success(value): _result.cqCommerceAssetHandlerName = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqCommerceImplAssetStaticImageHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqCommerceImplAssetVideoHandlerInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqCommerceImplAssetVideoHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqCommerceImplAssetVideoHandlerInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqCommerceImplAssetVideoHandlerInfo].self, source: source)
        }

        // Decoder for ComAdobeCqCommerceImplAssetVideoHandlerInfo
        Decoders.addDecoder(clazz: ComAdobeCqCommerceImplAssetVideoHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqCommerceImplAssetVideoHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqCommerceImplAssetVideoHandlerInfo() : instance as! ComAdobeCqCommerceImplAssetVideoHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqCommerceImplAssetVideoHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqCommerceImplAssetVideoHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqCommerceImplAssetVideoHandlerProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqCommerceImplAssetVideoHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqCommerceImplAssetVideoHandlerProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqCommerceImplAssetVideoHandlerProperties].self, source: source)
        }

        // Decoder for ComAdobeCqCommerceImplAssetVideoHandlerProperties
        Decoders.addDecoder(clazz: ComAdobeCqCommerceImplAssetVideoHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqCommerceImplAssetVideoHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqCommerceImplAssetVideoHandlerProperties() : instance as! ComAdobeCqCommerceImplAssetVideoHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.commerce.asset.handler.active"] as AnyObject?) {
                
                case let .success(value): _result.cqCommerceAssetHandlerActive = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.commerce.asset.handler.name"] as AnyObject?) {
                
                case let .success(value): _result.cqCommerceAssetHandlerName = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqCommerceImplAssetVideoHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo() : instance as! ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties() : instance as! ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.commerce.promotion.root"] as AnyObject?) {
                
                case let .success(value): _result.cqCommercePromotionRoot = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo() : instance as! ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties() : instance as! ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.commerce.cataloggenerator.bucketsize"] as AnyObject?) {
                
                case let .success(value): _result.cqCommerceCataloggeneratorBucketsize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.commerce.cataloggenerator.bucketname"] as AnyObject?) {
                
                case let .success(value): _result.cqCommerceCataloggeneratorBucketname = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.commerce.cataloggenerator.excludedtemplateproperties"] as AnyObject?) {
                
                case let .success(value): _result.cqCommerceCataloggeneratorExcludedtemplateproperties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqCommercePimImplPageEventListenerInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqCommercePimImplPageEventListenerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqCommercePimImplPageEventListenerInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqCommercePimImplPageEventListenerInfo].self, source: source)
        }

        // Decoder for ComAdobeCqCommercePimImplPageEventListenerInfo
        Decoders.addDecoder(clazz: ComAdobeCqCommercePimImplPageEventListenerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqCommercePimImplPageEventListenerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqCommercePimImplPageEventListenerInfo() : instance as! ComAdobeCqCommercePimImplPageEventListenerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqCommercePimImplPageEventListenerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqCommercePimImplPageEventListenerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqCommercePimImplPageEventListenerProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqCommercePimImplPageEventListenerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqCommercePimImplPageEventListenerProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqCommercePimImplPageEventListenerProperties].self, source: source)
        }

        // Decoder for ComAdobeCqCommercePimImplPageEventListenerProperties
        Decoders.addDecoder(clazz: ComAdobeCqCommercePimImplPageEventListenerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqCommercePimImplPageEventListenerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqCommercePimImplPageEventListenerProperties() : instance as! ComAdobeCqCommercePimImplPageEventListenerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.commerce.pageeventlistener.enabled"] as AnyObject?) {
                
                case let .success(value): _result.cqCommercePageeventlistenerEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqCommercePimImplPageEventListenerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo() : instance as! ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties() : instance as! ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["Feed generator algorithm"] as AnyObject?) {
                
                case let .success(value): _result.feedGeneratorAlgorithm = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo].self, source: source)
        }

        // Decoder for ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo
        Decoders.addDecoder(clazz: ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo() : instance as! ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties].self, source: source)
        }

        // Decoder for ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties
        Decoders.addDecoder(clazz: ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties() : instance as! ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["reportingservices.url"] as AnyObject?) {
                
                case let .success(value): _result.reportingservicesUrl = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo].self, source: source)
        }

        // Decoder for ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo
        Decoders.addDecoder(clazz: ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo() : instance as! ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties].self, source: source)
        }

        // Decoder for ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties
        Decoders.addDecoder(clazz: ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties() : instance as! ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["brightedge.url"] as AnyObject?) {
                
                case let .success(value): _result.brightedgeUrl = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo].self, source: source)
        }

        // Decoder for ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo
        Decoders.addDecoder(clazz: ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo() : instance as! ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties].self, source: source)
        }

        // Decoder for ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties
        Decoders.addDecoder(clazz: ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties() : instance as! ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["reportingservices.proxy.whitelist"] as AnyObject?) {
                
                case let .success(value): _result.reportingservicesProxyWhitelist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamCfmImplComponentComponentConfigImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqDamCfmImplComponentComponentConfigImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamCfmImplComponentComponentConfigImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqDamCfmImplComponentComponentConfigImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqDamCfmImplComponentComponentConfigImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqDamCfmImplComponentComponentConfigImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamCfmImplComponentComponentConfigImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamCfmImplComponentComponentConfigImplInfo() : instance as! ComAdobeCqDamCfmImplComponentComponentConfigImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqDamCfmImplComponentComponentConfigImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamCfmImplComponentComponentConfigImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamCfmImplComponentComponentConfigImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqDamCfmImplComponentComponentConfigImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamCfmImplComponentComponentConfigImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqDamCfmImplComponentComponentConfigImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqDamCfmImplComponentComponentConfigImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqDamCfmImplComponentComponentConfigImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamCfmImplComponentComponentConfigImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamCfmImplComponentComponentConfigImplProperties() : instance as! ComAdobeCqDamCfmImplComponentComponentConfigImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["dam.cfm.component.resourceType"] as AnyObject?) {
                
                case let .success(value): _result.damCfmComponentResourceType = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["dam.cfm.component.fileReferenceProp"] as AnyObject?) {
                
                case let .success(value): _result.damCfmComponentFileReferenceProp = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["dam.cfm.component.elementsProp"] as AnyObject?) {
                
                case let .success(value): _result.damCfmComponentElementsProp = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["dam.cfm.component.variationProp"] as AnyObject?) {
                
                case let .success(value): _result.damCfmComponentVariationProp = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamCfmImplComponentComponentConfigImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamCfmImplConfFeatureConfigImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqDamCfmImplConfFeatureConfigImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamCfmImplConfFeatureConfigImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqDamCfmImplConfFeatureConfigImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqDamCfmImplConfFeatureConfigImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqDamCfmImplConfFeatureConfigImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamCfmImplConfFeatureConfigImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamCfmImplConfFeatureConfigImplInfo() : instance as! ComAdobeCqDamCfmImplConfFeatureConfigImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqDamCfmImplConfFeatureConfigImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamCfmImplConfFeatureConfigImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamCfmImplConfFeatureConfigImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqDamCfmImplConfFeatureConfigImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamCfmImplConfFeatureConfigImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqDamCfmImplConfFeatureConfigImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqDamCfmImplConfFeatureConfigImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqDamCfmImplConfFeatureConfigImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamCfmImplConfFeatureConfigImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamCfmImplConfFeatureConfigImplProperties() : instance as! ComAdobeCqDamCfmImplConfFeatureConfigImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["dam.cfm.resourceTypes"] as AnyObject?) {
                
                case let .success(value): _result.damCfmResourceTypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["dam.cfm.referenceProperties"] as AnyObject?) {
                
                case let .success(value): _result.damCfmReferenceProperties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamCfmImplConfFeatureConfigImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo].self, source: source)
        }

        // Decoder for ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo
        Decoders.addDecoder(clazz: ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo() : instance as! ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties].self, source: source)
        }

        // Decoder for ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties
        Decoders.addDecoder(clazz: ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties() : instance as! ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pipeline.type"] as AnyObject?) {
                
                case let .success(value): _result.pipelineType = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo].self, source: source)
        }

        // Decoder for ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo
        Decoders.addDecoder(clazz: ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo() : instance as! ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties].self, source: source)
        }

        // Decoder for ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties
        Decoders.addDecoder(clazz: ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties() : instance as! ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pipeline.type"] as AnyObject?) {
                
                case let .success(value): _result.pipelineType = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo].self, source: source)
        }

        // Decoder for ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo
        Decoders.addDecoder(clazz: ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo() : instance as! ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties].self, source: source)
        }

        // Decoder for ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties
        Decoders.addDecoder(clazz: ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties() : instance as! ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pipeline.type"] as AnyObject?) {
                
                case let .success(value): _result.pipelineType = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamDmProcessImagePTiffManagerImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqDamDmProcessImagePTiffManagerImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamDmProcessImagePTiffManagerImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqDamDmProcessImagePTiffManagerImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqDamDmProcessImagePTiffManagerImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqDamDmProcessImagePTiffManagerImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamDmProcessImagePTiffManagerImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamDmProcessImagePTiffManagerImplInfo() : instance as! ComAdobeCqDamDmProcessImagePTiffManagerImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqDamDmProcessImagePTiffManagerImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamDmProcessImagePTiffManagerImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamDmProcessImagePTiffManagerImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqDamDmProcessImagePTiffManagerImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamDmProcessImagePTiffManagerImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqDamDmProcessImagePTiffManagerImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqDamDmProcessImagePTiffManagerImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqDamDmProcessImagePTiffManagerImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamDmProcessImagePTiffManagerImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamDmProcessImagePTiffManagerImplProperties() : instance as! ComAdobeCqDamDmProcessImagePTiffManagerImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxMemory"] as AnyObject?) {
                
                case let .success(value): _result.maxMemory = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamDmProcessImagePTiffManagerImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo].self, source: source)
        }

        // Decoder for ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo
        Decoders.addDecoder(clazz: ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo() : instance as! ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties].self, source: source)
        }

        // Decoder for ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties
        Decoders.addDecoder(clazz: ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties() : instance as! ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["dmreplicateonmodify.enabled"] as AnyObject?) {
                
                case let .success(value): _result.dmreplicateonmodifyEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["dmreplicateonmodify.forcesyncdeletes"] as AnyObject?) {
                
                case let .success(value): _result.dmreplicateonmodifyForcesyncdeletes = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo() : instance as! ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqDamMacSyncHelperImplMACSyncClientImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamMacSyncHelperImplMACSyncClientImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqDamMacSyncHelperImplMACSyncClientImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamMacSyncHelperImplMACSyncClientImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqDamMacSyncHelperImplMACSyncClientImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqDamMacSyncHelperImplMACSyncClientImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqDamMacSyncHelperImplMACSyncClientImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamMacSyncHelperImplMACSyncClientImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamMacSyncHelperImplMACSyncClientImplProperties() : instance as! ComAdobeCqDamMacSyncHelperImplMACSyncClientImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.dam.mac.sync.client.so.timeout"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeDamMacSyncClientSoTimeout = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamMacSyncHelperImplMACSyncClientImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo() : instance as! ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties() : instance as! ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqDamMacSyncDamsyncserviceSyncRenditions = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["com.adobe.cq.dam.mac.sync.damsyncservice.platform"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqDamMacSyncDamsyncservicePlatform = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo].self, source: source)
        }

        // Decoder for ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo
        Decoders.addDecoder(clazz: ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo() : instance as! ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties].self, source: source)
        }

        // Decoder for ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties
        Decoders.addDecoder(clazz: ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties() : instance as! ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["nuiEnabled"] as AnyObject?) {
                
                case let .success(value): _result.nuiEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["nuiServiceUrl"] as AnyObject?) {
                
                case let .success(value): _result.nuiServiceUrl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["nuiApiKey"] as AnyObject?) {
                
                case let .success(value): _result.nuiApiKey = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamS7imagingImplIsImageServerComponentInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqDamS7imagingImplIsImageServerComponentInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamS7imagingImplIsImageServerComponentInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqDamS7imagingImplIsImageServerComponentInfo].self, source: source)
        }

        // Decoder for ComAdobeCqDamS7imagingImplIsImageServerComponentInfo
        Decoders.addDecoder(clazz: ComAdobeCqDamS7imagingImplIsImageServerComponentInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamS7imagingImplIsImageServerComponentInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamS7imagingImplIsImageServerComponentInfo() : instance as! ComAdobeCqDamS7imagingImplIsImageServerComponentInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamS7imagingImplIsImageServerComponentInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamS7imagingImplIsImageServerComponentProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqDamS7imagingImplIsImageServerComponentProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamS7imagingImplIsImageServerComponentProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqDamS7imagingImplIsImageServerComponentProperties].self, source: source)
        }

        // Decoder for ComAdobeCqDamS7imagingImplIsImageServerComponentProperties
        Decoders.addDecoder(clazz: ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamS7imagingImplIsImageServerComponentProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamS7imagingImplIsImageServerComponentProperties() : instance as! ComAdobeCqDamS7imagingImplIsImageServerComponentProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["TcpPort"] as AnyObject?) {
                
                case let .success(value): _result.tcpPort = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["AllowRemoteAccess"] as AnyObject?) {
                
                case let .success(value): _result.allowRemoteAccess = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["MaxRenderRgnPixels"] as AnyObject?) {
                
                case let .success(value): _result.maxRenderRgnPixels = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["MaxMessageSize"] as AnyObject?) {
                
                case let .success(value): _result.maxMessageSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["RandomAccessUrlTimeout"] as AnyObject?) {
                
                case let .success(value): _result.randomAccessUrlTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["WorkerThreads"] as AnyObject?) {
                
                case let .success(value): _result.workerThreads = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamS7imagingImplIsImageServerComponentProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo].self, source: source)
        }

        // Decoder for ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo
        Decoders.addDecoder(clazz: ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo() : instance as! ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties].self, source: source)
        }

        // Decoder for ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties
        Decoders.addDecoder(clazz: ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties() : instance as! ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cache.enable"] as AnyObject?) {
                
                case let .success(value): _result.cacheEnable = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cache.rootPaths"] as AnyObject?) {
                
                case let .success(value): _result.cacheRootPaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.maxSize"] as AnyObject?) {
                
                case let .success(value): _result.cacheMaxSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.maxEntries"] as AnyObject?) {
                
                case let .success(value): _result.cacheMaxEntries = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo].self, source: source)
        }

        // Decoder for ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo
        Decoders.addDecoder(clazz: ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo() : instance as! ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties].self, source: source)
        }

        // Decoder for ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties
        Decoders.addDecoder(clazz: ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties() : instance as! ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pathPrefix"] as AnyObject?) {
                
                case let .success(value): _result.pathPrefix = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["createVersion"] as AnyObject?) {
                
                case let .success(value): _result.createVersion = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo].self, source: source)
        }

        // Decoder for ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo
        Decoders.addDecoder(clazz: ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo() : instance as! ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties].self, source: source)
        }

        // Decoder for ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties
        Decoders.addDecoder(clazz: ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties() : instance as! ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.webdav.version.linking.enable"] as AnyObject?) {
                
                case let .success(value): _result.cqDamWebdavVersionLinkingEnable = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.webdav.version.linking.scheduler.period"] as AnyObject?) {
                
                case let .success(value): _result.cqDamWebdavVersionLinkingSchedulerPeriod = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.webdav.version.linking.staging.timeout"] as AnyObject?) {
                
                case let .success(value): _result.cqDamWebdavVersionLinkingStagingTimeout = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo].self, source: source)
        }

        // Decoder for ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo
        Decoders.addDecoder(clazz: ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo() : instance as! ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties].self, source: source)
        }

        // Decoder for ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties
        Decoders.addDecoder(clazz: ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties() : instance as! ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters"] as AnyObject?) {
                
                case let .success(value): _result.comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDeserfwImplDeserializationFirewallImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqDeserfwImplDeserializationFirewallImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDeserfwImplDeserializationFirewallImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqDeserfwImplDeserializationFirewallImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqDeserfwImplDeserializationFirewallImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqDeserfwImplDeserializationFirewallImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDeserfwImplDeserializationFirewallImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDeserfwImplDeserializationFirewallImplInfo() : instance as! ComAdobeCqDeserfwImplDeserializationFirewallImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqDeserfwImplDeserializationFirewallImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDeserfwImplDeserializationFirewallImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDeserfwImplDeserializationFirewallImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqDeserfwImplDeserializationFirewallImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDeserfwImplDeserializationFirewallImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqDeserfwImplDeserializationFirewallImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqDeserfwImplDeserializationFirewallImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqDeserfwImplDeserializationFirewallImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDeserfwImplDeserializationFirewallImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDeserfwImplDeserializationFirewallImplProperties() : instance as! ComAdobeCqDeserfwImplDeserializationFirewallImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["firewall.deserialization.whitelist"] as AnyObject?) {
                
                case let .success(value): _result.firewallDeserializationWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["firewall.deserialization.blacklist"] as AnyObject?) {
                
                case let .success(value): _result.firewallDeserializationBlacklist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["firewall.deserialization.diagnostics"] as AnyObject?) {
                
                case let .success(value): _result.firewallDeserializationDiagnostics = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDeserfwImplDeserializationFirewallImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDtmImplServiceDTMWebServiceImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqDtmImplServiceDTMWebServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDtmImplServiceDTMWebServiceImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqDtmImplServiceDTMWebServiceImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqDtmImplServiceDTMWebServiceImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqDtmImplServiceDTMWebServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDtmImplServiceDTMWebServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDtmImplServiceDTMWebServiceImplInfo() : instance as! ComAdobeCqDtmImplServiceDTMWebServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqDtmImplServiceDTMWebServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDtmImplServiceDTMWebServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDtmImplServiceDTMWebServiceImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqDtmImplServiceDTMWebServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDtmImplServiceDTMWebServiceImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqDtmImplServiceDTMWebServiceImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqDtmImplServiceDTMWebServiceImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqDtmImplServiceDTMWebServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDtmImplServiceDTMWebServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDtmImplServiceDTMWebServiceImplProperties() : instance as! ComAdobeCqDtmImplServiceDTMWebServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["connection.timeout"] as AnyObject?) {
                
                case let .success(value): _result.connectionTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["socket.timeout"] as AnyObject?) {
                
                case let .success(value): _result.socketTimeout = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDtmImplServiceDTMWebServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDtmImplServletsDTMDeployHookServletInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqDtmImplServletsDTMDeployHookServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDtmImplServletsDTMDeployHookServletInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqDtmImplServletsDTMDeployHookServletInfo].self, source: source)
        }

        // Decoder for ComAdobeCqDtmImplServletsDTMDeployHookServletInfo
        Decoders.addDecoder(clazz: ComAdobeCqDtmImplServletsDTMDeployHookServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDtmImplServletsDTMDeployHookServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDtmImplServletsDTMDeployHookServletInfo() : instance as! ComAdobeCqDtmImplServletsDTMDeployHookServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqDtmImplServletsDTMDeployHookServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDtmImplServletsDTMDeployHookServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDtmImplServletsDTMDeployHookServletProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqDtmImplServletsDTMDeployHookServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDtmImplServletsDTMDeployHookServletProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqDtmImplServletsDTMDeployHookServletProperties].self, source: source)
        }

        // Decoder for ComAdobeCqDtmImplServletsDTMDeployHookServletProperties
        Decoders.addDecoder(clazz: ComAdobeCqDtmImplServletsDTMDeployHookServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDtmImplServletsDTMDeployHookServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDtmImplServletsDTMDeployHookServletProperties() : instance as! ComAdobeCqDtmImplServletsDTMDeployHookServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["dtm.staging.ip.whitelist"] as AnyObject?) {
                
                case let .success(value): _result.dtmStagingIpWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["dtm.production.ip.whitelist"] as AnyObject?) {
                
                case let .success(value): _result.dtmProductionIpWhitelist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDtmImplServletsDTMDeployHookServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDtmReactorImplServiceWebServiceImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqDtmReactorImplServiceWebServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDtmReactorImplServiceWebServiceImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqDtmReactorImplServiceWebServiceImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqDtmReactorImplServiceWebServiceImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqDtmReactorImplServiceWebServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDtmReactorImplServiceWebServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDtmReactorImplServiceWebServiceImplInfo() : instance as! ComAdobeCqDtmReactorImplServiceWebServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqDtmReactorImplServiceWebServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDtmReactorImplServiceWebServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqDtmReactorImplServiceWebServiceImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqDtmReactorImplServiceWebServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqDtmReactorImplServiceWebServiceImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqDtmReactorImplServiceWebServiceImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqDtmReactorImplServiceWebServiceImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqDtmReactorImplServiceWebServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqDtmReactorImplServiceWebServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqDtmReactorImplServiceWebServiceImplProperties() : instance as! ComAdobeCqDtmReactorImplServiceWebServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["endpointUri"] as AnyObject?) {
                
                case let .success(value): _result.endpointUri = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["connectionTimeout"] as AnyObject?) {
                
                case let .success(value): _result.connectionTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["socketTimeout"] as AnyObject?) {
                
                case let .success(value): _result.socketTimeout = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqDtmReactorImplServiceWebServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo].self, source: source)
        }

        // Decoder for ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo
        Decoders.addDecoder(clazz: ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo() : instance as! ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"] as AnyObject?) {
                
                case let .success(value): _result.additionalProperties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties].self, source: source)
        }

        // Decoder for ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties
        Decoders.addDecoder(clazz: ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties() : instance as! ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["disabledForGroups"] as AnyObject?) {
                
                case let .success(value): _result.disabledForGroups = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqHcContentPackagesHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqHcContentPackagesHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqHcContentPackagesHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqHcContentPackagesHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeCqHcContentPackagesHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeCqHcContentPackagesHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqHcContentPackagesHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqHcContentPackagesHealthCheckInfo() : instance as! ComAdobeCqHcContentPackagesHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqHcContentPackagesHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqHcContentPackagesHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqHcContentPackagesHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqHcContentPackagesHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqHcContentPackagesHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqHcContentPackagesHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeCqHcContentPackagesHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeCqHcContentPackagesHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqHcContentPackagesHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqHcContentPackagesHealthCheckProperties() : instance as! ComAdobeCqHcContentPackagesHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.name"] as AnyObject?) {
                
                case let .success(value): _result.hcName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.mbean.name"] as AnyObject?) {
                
                case let .success(value): _result.hcMbeanName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["package.names"] as AnyObject?) {
                
                case let .success(value): _result.packageNames = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqHcContentPackagesHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqHistoryImplHistoryRequestFilterInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqHistoryImplHistoryRequestFilterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqHistoryImplHistoryRequestFilterInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqHistoryImplHistoryRequestFilterInfo].self, source: source)
        }

        // Decoder for ComAdobeCqHistoryImplHistoryRequestFilterInfo
        Decoders.addDecoder(clazz: ComAdobeCqHistoryImplHistoryRequestFilterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqHistoryImplHistoryRequestFilterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqHistoryImplHistoryRequestFilterInfo() : instance as! ComAdobeCqHistoryImplHistoryRequestFilterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqHistoryImplHistoryRequestFilterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqHistoryImplHistoryRequestFilterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqHistoryImplHistoryRequestFilterProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqHistoryImplHistoryRequestFilterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqHistoryImplHistoryRequestFilterProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqHistoryImplHistoryRequestFilterProperties].self, source: source)
        }

        // Decoder for ComAdobeCqHistoryImplHistoryRequestFilterProperties
        Decoders.addDecoder(clazz: ComAdobeCqHistoryImplHistoryRequestFilterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqHistoryImplHistoryRequestFilterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqHistoryImplHistoryRequestFilterProperties() : instance as! ComAdobeCqHistoryImplHistoryRequestFilterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["history.requestFilter.excludedSelectors"] as AnyObject?) {
                
                case let .success(value): _result.historyRequestFilterExcludedSelectors = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["history.requestFilter.excludedExtensions"] as AnyObject?) {
                
                case let .success(value): _result.historyRequestFilterExcludedExtensions = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqHistoryImplHistoryRequestFilterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqHistoryImplHistoryServiceImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqHistoryImplHistoryServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqHistoryImplHistoryServiceImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqHistoryImplHistoryServiceImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqHistoryImplHistoryServiceImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqHistoryImplHistoryServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqHistoryImplHistoryServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqHistoryImplHistoryServiceImplInfo() : instance as! ComAdobeCqHistoryImplHistoryServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqHistoryImplHistoryServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"] as AnyObject?) {
                
                case let .success(value): _result.additionalProperties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqHistoryImplHistoryServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqHistoryImplHistoryServiceImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqHistoryImplHistoryServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqHistoryImplHistoryServiceImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqHistoryImplHistoryServiceImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqHistoryImplHistoryServiceImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqHistoryImplHistoryServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqHistoryImplHistoryServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqHistoryImplHistoryServiceImplProperties() : instance as! ComAdobeCqHistoryImplHistoryServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["history.service.resourceTypes"] as AnyObject?) {
                
                case let .success(value): _result.historyServiceResourceTypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["history.service.pathFilter"] as AnyObject?) {
                
                case let .success(value): _result.historyServicePathFilter = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqHistoryImplHistoryServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo].self, source: source)
        }

        // Decoder for ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo
        Decoders.addDecoder(clazz: ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo() : instance as! ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties].self, source: source)
        }

        // Decoder for ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties
        Decoders.addDecoder(clazz: ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties() : instance as! ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["inbox.impl.typeprovider.registrypaths"] as AnyObject?) {
                
                case let .success(value): _result.inboxImplTypeproviderRegistrypaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["inbox.impl.typeprovider.legacypaths"] as AnyObject?) {
                
                case let .success(value): _result.inboxImplTypeproviderLegacypaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["inbox.impl.typeprovider.defaulturl.failureitem"] as AnyObject?) {
                
                case let .success(value): _result.inboxImplTypeproviderDefaulturlFailureitem = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["inbox.impl.typeprovider.defaulturl.workitem"] as AnyObject?) {
                
                case let .success(value): _result.inboxImplTypeproviderDefaulturlWorkitem = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["inbox.impl.typeprovider.defaulturl.task"] as AnyObject?) {
                
                case let .success(value): _result.inboxImplTypeproviderDefaulturlTask = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqProjectsImplServletProjectImageServletInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqProjectsImplServletProjectImageServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqProjectsImplServletProjectImageServletInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqProjectsImplServletProjectImageServletInfo].self, source: source)
        }

        // Decoder for ComAdobeCqProjectsImplServletProjectImageServletInfo
        Decoders.addDecoder(clazz: ComAdobeCqProjectsImplServletProjectImageServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqProjectsImplServletProjectImageServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqProjectsImplServletProjectImageServletInfo() : instance as! ComAdobeCqProjectsImplServletProjectImageServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqProjectsImplServletProjectImageServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqProjectsImplServletProjectImageServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqProjectsImplServletProjectImageServletProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqProjectsImplServletProjectImageServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqProjectsImplServletProjectImageServletProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqProjectsImplServletProjectImageServletProperties].self, source: source)
        }

        // Decoder for ComAdobeCqProjectsImplServletProjectImageServletProperties
        Decoders.addDecoder(clazz: ComAdobeCqProjectsImplServletProjectImageServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqProjectsImplServletProjectImageServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqProjectsImplServletProjectImageServletProperties() : instance as! ComAdobeCqProjectsImplServletProjectImageServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["image.quality"] as AnyObject?) {
                
                case let .success(value): _result.imageQuality = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["image.supported.resolutions"] as AnyObject?) {
                
                case let .success(value): _result.imageSupportedResolutions = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqProjectsImplServletProjectImageServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqProjectsPurgeSchedulerInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqProjectsPurgeSchedulerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqProjectsPurgeSchedulerInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqProjectsPurgeSchedulerInfo].self, source: source)
        }

        // Decoder for ComAdobeCqProjectsPurgeSchedulerInfo
        Decoders.addDecoder(clazz: ComAdobeCqProjectsPurgeSchedulerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqProjectsPurgeSchedulerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqProjectsPurgeSchedulerInfo() : instance as! ComAdobeCqProjectsPurgeSchedulerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqProjectsPurgeSchedulerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqProjectsPurgeSchedulerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqProjectsPurgeSchedulerProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqProjectsPurgeSchedulerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqProjectsPurgeSchedulerProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqProjectsPurgeSchedulerProperties].self, source: source)
        }

        // Decoder for ComAdobeCqProjectsPurgeSchedulerProperties
        Decoders.addDecoder(clazz: ComAdobeCqProjectsPurgeSchedulerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqProjectsPurgeSchedulerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqProjectsPurgeSchedulerProperties() : instance as! ComAdobeCqProjectsPurgeSchedulerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduledpurge.name"] as AnyObject?) {
                
                case let .success(value): _result.scheduledpurgeName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["scheduledpurge.purgeActive"] as AnyObject?) {
                
                case let .success(value): _result.scheduledpurgePurgeActive = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["scheduledpurge.templates"] as AnyObject?) {
                
                case let .success(value): _result.scheduledpurgeTemplates = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["scheduledpurge.purgeGroups"] as AnyObject?) {
                
                case let .success(value): _result.scheduledpurgePurgeGroups = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["scheduledpurge.purgeAssets"] as AnyObject?) {
                
                case let .success(value): _result.scheduledpurgePurgeAssets = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["scheduledpurge.terminateRunningWorkflows"] as AnyObject?) {
                
                case let .success(value): _result.scheduledpurgeTerminateRunningWorkflows = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["scheduledpurge.daysold"] as AnyObject?) {
                
                case let .success(value): _result.scheduledpurgeDaysold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["scheduledpurge.saveThreshold"] as AnyObject?) {
                
                case let .success(value): _result.scheduledpurgeSaveThreshold = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqProjectsPurgeSchedulerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScheduledExporterImplScheduledExporterImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqScheduledExporterImplScheduledExporterImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScheduledExporterImplScheduledExporterImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqScheduledExporterImplScheduledExporterImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqScheduledExporterImplScheduledExporterImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqScheduledExporterImplScheduledExporterImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScheduledExporterImplScheduledExporterImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScheduledExporterImplScheduledExporterImplInfo() : instance as! ComAdobeCqScheduledExporterImplScheduledExporterImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqScheduledExporterImplScheduledExporterImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScheduledExporterImplScheduledExporterImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScheduledExporterImplScheduledExporterImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqScheduledExporterImplScheduledExporterImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScheduledExporterImplScheduledExporterImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqScheduledExporterImplScheduledExporterImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqScheduledExporterImplScheduledExporterImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqScheduledExporterImplScheduledExporterImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScheduledExporterImplScheduledExporterImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScheduledExporterImplScheduledExporterImplProperties() : instance as! ComAdobeCqScheduledExporterImplScheduledExporterImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["include.paths"] as AnyObject?) {
                
                case let .success(value): _result.includePaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["exporter.user"] as AnyObject?) {
                
                case let .success(value): _result.exporterUser = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScheduledExporterImplScheduledExporterImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo() : instance as! ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties() : instance as! ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.screens.analytics.impl.url"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqScreensAnalyticsImplUrl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.screens.analytics.impl.apikey"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqScreensAnalyticsImplApikey = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.screens.analytics.impl.project"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqScreensAnalyticsImplProject = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["com.adobe.cq.screens.analytics.impl.environment"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqScreensAnalyticsImplEnvironment = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.cq.screens.analytics.impl.sendFrequency"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqScreensAnalyticsImplSendFrequency = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScreensDeviceImplDeviceServiceInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqScreensDeviceImplDeviceServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScreensDeviceImplDeviceServiceInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqScreensDeviceImplDeviceServiceInfo].self, source: source)
        }

        // Decoder for ComAdobeCqScreensDeviceImplDeviceServiceInfo
        Decoders.addDecoder(clazz: ComAdobeCqScreensDeviceImplDeviceServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScreensDeviceImplDeviceServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScreensDeviceImplDeviceServiceInfo() : instance as! ComAdobeCqScreensDeviceImplDeviceServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqScreensDeviceImplDeviceServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScreensDeviceImplDeviceServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScreensDeviceImplDeviceServiceProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqScreensDeviceImplDeviceServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScreensDeviceImplDeviceServiceProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqScreensDeviceImplDeviceServiceProperties].self, source: source)
        }

        // Decoder for ComAdobeCqScreensDeviceImplDeviceServiceProperties
        Decoders.addDecoder(clazz: ComAdobeCqScreensDeviceImplDeviceServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScreensDeviceImplDeviceServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScreensDeviceImplDeviceServiceProperties() : instance as! ComAdobeCqScreensDeviceImplDeviceServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.aem.screens.player.pingfrequency"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeAemScreensPlayerPingfrequency = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.aem.screens.device.pasword.specialchars"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeAemScreensDevicePaswordSpecialchars = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.aem.screens.device.pasword.minlowercasechars"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeAemScreensDevicePaswordMinlowercasechars = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.aem.screens.device.pasword.minuppercasechars"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeAemScreensDevicePaswordMinuppercasechars = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.aem.screens.device.pasword.minnumberchars"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeAemScreensDevicePaswordMinnumberchars = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.aem.screens.device.pasword.minspecialchars"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeAemScreensDevicePaswordMinspecialchars = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.aem.screens.device.pasword.minlength"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeAemScreensDevicePaswordMinlength = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScreensDeviceImplDeviceServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo() : instance as! ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties() : instance as! ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["deviceRegistrationTimeout"] as AnyObject?) {
                
                case let .success(value): _result.deviceRegistrationTimeout = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo].self, source: source)
        }

        // Decoder for ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo
        Decoders.addDecoder(clazz: ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo() : instance as! ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties].self, source: source)
        }

        // Decoder for ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties
        Decoders.addDecoder(clazz: ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties() : instance as! ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.pagesupdatehandler.imageresourcetypes"] as AnyObject?) {
                
                case let .success(value): _result.cqPagesupdatehandlerImageresourcetypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.pagesupdatehandler.productresourcetypes"] as AnyObject?) {
                
                case let .success(value): _result.cqPagesupdatehandlerProductresourcetypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.pagesupdatehandler.videoresourcetypes"] as AnyObject?) {
                
                case let .success(value): _result.cqPagesupdatehandlerVideoresourcetypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.pagesupdatehandler.dynamicsequenceresourcetypes"] as AnyObject?) {
                
                case let .success(value): _result.cqPagesupdatehandlerDynamicsequenceresourcetypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.pagesupdatehandler.previewmodepaths"] as AnyObject?) {
                
                case let .success(value): _result.cqPagesupdatehandlerPreviewmodepaths = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo].self, source: source)
        }

        // Decoder for ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo
        Decoders.addDecoder(clazz: ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo() : instance as! ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties].self, source: source)
        }

        // Decoder for ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties
        Decoders.addDecoder(clazz: ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties() : instance as! ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"] as AnyObject?) {
                
                case let .success(value): _result.schedulerExpression = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo() : instance as! ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties() : instance as! ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.aem.screens.impl.remote.request_timeout"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeAemScreensImplRemoteRequestTimeout = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScreensImplScreensChannelPostProcessorInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqScreensImplScreensChannelPostProcessorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScreensImplScreensChannelPostProcessorInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqScreensImplScreensChannelPostProcessorInfo].self, source: source)
        }

        // Decoder for ComAdobeCqScreensImplScreensChannelPostProcessorInfo
        Decoders.addDecoder(clazz: ComAdobeCqScreensImplScreensChannelPostProcessorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScreensImplScreensChannelPostProcessorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScreensImplScreensChannelPostProcessorInfo() : instance as! ComAdobeCqScreensImplScreensChannelPostProcessorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqScreensImplScreensChannelPostProcessorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScreensImplScreensChannelPostProcessorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScreensImplScreensChannelPostProcessorProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqScreensImplScreensChannelPostProcessorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScreensImplScreensChannelPostProcessorProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqScreensImplScreensChannelPostProcessorProperties].self, source: source)
        }

        // Decoder for ComAdobeCqScreensImplScreensChannelPostProcessorProperties
        Decoders.addDecoder(clazz: ComAdobeCqScreensImplScreensChannelPostProcessorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScreensImplScreensChannelPostProcessorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScreensImplScreensChannelPostProcessorProperties() : instance as! ComAdobeCqScreensImplScreensChannelPostProcessorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["screens.channels.properties.to.remove"] as AnyObject?) {
                
                case let .success(value): _result.screensChannelsPropertiesToRemove = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScreensImplScreensChannelPostProcessorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo() : instance as! ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties() : instance as! ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo].self, source: source)
        }

        // Decoder for ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo
        Decoders.addDecoder(clazz: ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo() : instance as! ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties].self, source: source)
        }

        // Decoder for ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties
        Decoders.addDecoder(clazz: ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties() : instance as! ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["global.size"] as AnyObject?) {
                
                case let .success(value): _result.globalSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["max.disk.usage"] as AnyObject?) {
                
                case let .success(value): _result.maxDiskUsage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["persistence.enabled"] as AnyObject?) {
                
                case let .success(value): _result.persistenceEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["thread.pool.max.size"] as AnyObject?) {
                
                case let .success(value): _result.threadPoolMaxSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["scheduled.thread.pool.max.size"] as AnyObject?) {
                
                case let .success(value): _result.scheduledThreadPoolMaxSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["graceful.shutdown.timeout"] as AnyObject?) {
                
                case let .success(value): _result.gracefulShutdownTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["queues"] as AnyObject?) {
                
                case let .success(value): _result.queues = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["topics"] as AnyObject?) {
                
                case let .success(value): _result.topics = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["addresses.max.delivery.attempts"] as AnyObject?) {
                
                case let .success(value): _result.addressesMaxDeliveryAttempts = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["addresses.expiry.delay"] as AnyObject?) {
                
                case let .success(value): _result.addressesExpiryDelay = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["addresses.address.full.message.policy"] as AnyObject?) {
                
                case let .success(value): _result.addressesAddressFullMessagePolicy = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["addresses.max.size.bytes"] as AnyObject?) {
                
                case let .success(value): _result.addressesMaxSizeBytes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["addresses.page.size.bytes"] as AnyObject?) {
                
                case let .success(value): _result.addressesPageSizeBytes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["addresses.page.cache.max.size"] as AnyObject?) {
                
                case let .success(value): _result.addressesPageCacheMaxSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cluster.user"] as AnyObject?) {
                
                case let .success(value): _result.clusterUser = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cluster.password"] as AnyObject?) {
                
                case let .success(value): _result.clusterPassword = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.call.timeout"] as AnyObject?) {
                
                case let .success(value): _result.clusterCallTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.call.failover.timeout"] as AnyObject?) {
                
                case let .success(value): _result.clusterCallFailoverTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.client.failure.check.period"] as AnyObject?) {
                
                case let .success(value): _result.clusterClientFailureCheckPeriod = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.notification.attempts"] as AnyObject?) {
                
                case let .success(value): _result.clusterNotificationAttempts = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.notification.interval"] as AnyObject?) {
                
                case let .success(value): _result.clusterNotificationInterval = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["id.cache.size"] as AnyObject?) {
                
                case let .success(value): _result.idCacheSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.confirmation.window.size"] as AnyObject?) {
                
                case let .success(value): _result.clusterConfirmationWindowSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.connection.ttl"] as AnyObject?) {
                
                case let .success(value): _result.clusterConnectionTtl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cluster.duplicate.detection"] as AnyObject?) {
                
                case let .success(value): _result.clusterDuplicateDetection = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.initial.connect.attempts"] as AnyObject?) {
                
                case let .success(value): _result.clusterInitialConnectAttempts = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.max.retry.interval"] as AnyObject?) {
                
                case let .success(value): _result.clusterMaxRetryInterval = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.min.large.message.size"] as AnyObject?) {
                
                case let .success(value): _result.clusterMinLargeMessageSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.producer.window.size"] as AnyObject?) {
                
                case let .success(value): _result.clusterProducerWindowSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.reconnect.attempts"] as AnyObject?) {
                
                case let .success(value): _result.clusterReconnectAttempts = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.retry.interval"] as AnyObject?) {
                
                case let .success(value): _result.clusterRetryInterval = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyFloat.self, source: sourceDictionary["cluster.retry.interval.multiplier"] as AnyObject?) {
                
                case let .success(value): _result.clusterRetryIntervalMultiplier = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo() : instance as! ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties() : instance as! ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo() : instance as! ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties() : instance as! ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["disableSmartSync"] as AnyObject?) {
                
                case let .success(value): _result.disableSmartSync = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo].self, source: source)
        }

        // Decoder for ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo
        Decoders.addDecoder(clazz: ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo() : instance as! ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties].self, source: source)
        }

        // Decoder for ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties
        Decoders.addDecoder(clazz: ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties() : instance as! ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableDataTriggeredContent"] as AnyObject?) {
                
                case let .success(value): _result.enableDataTriggeredContent = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo
        Decoders.addDecoder(clazz: ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo() : instance as! ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties
        Decoders.addDecoder(clazz: ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties() : instance as! ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo() : instance as! ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties() : instance as! ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo() : instance as! ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties() : instance as! ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["dispatcher.address"] as AnyObject?) {
                
                case let .success(value): _result.dispatcherAddress = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["dispatcher.filter.allowed"] as AnyObject?) {
                
                case let .success(value): _result.dispatcherFilterAllowed = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["dispatcher.filter.blocked"] as AnyObject?) {
                
                case let .success(value): _result.dispatcherFilterBlocked = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo() : instance as! ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"] as AnyObject?) {
                
                case let .success(value): _result.additionalProperties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties() : instance as! ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo() : instance as! ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties() : instance as! ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["webserver.address"] as AnyObject?) {
                
                case let .success(value): _result.webserverAddress = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo() : instance as! ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties() : instance as! ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enable"] as AnyObject?) {
                
                case let .success(value): _result.enable = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["ttl1"] as AnyObject?) {
                
                case let .success(value): _result.ttl1 = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["ttl2"] as AnyObject?) {
                
                case let .success(value): _result.ttl2 = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo() : instance as! ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties() : instance as! ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priority"] as AnyObject?) {
                
                case let .success(value): _result.priority = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo() : instance as! ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties() : instance as! ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priority"] as AnyObject?) {
                
                case let .success(value): _result.priority = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo() : instance as! ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties() : instance as! ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.topics"] as AnyObject?) {
                
                case let .success(value): _result.eventTopics = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"] as AnyObject?) {
                
                case let .success(value): _result.eventFilter = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo() : instance as! ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties() : instance as! ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["accepted"] as AnyObject?) {
                
                case let .success(value): _result.accepted = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["ranked"] as AnyObject?) {
                
                case let .success(value): _result.ranked = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo() : instance as! ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties() : instance as! ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["ranking"] as AnyObject?) {
                
                case let .success(value): _result.ranking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enable"] as AnyObject?) {
                
                case let .success(value): _result.enable = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo() : instance as! ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties() : instance as! ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["streamPath"] as AnyObject?) {
                
                case let .success(value): _result.streamPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["streamName"] as AnyObject?) {
                
                case let .success(value): _result.streamName = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo() : instance as! ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties() : instance as! ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["MaxRetry"] as AnyObject?) {
                
                case let .success(value): _result.maxRetry = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"] as AnyObject?) {
                
                case let .success(value): _result.fieldWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["attachmentTypeBlacklist"] as AnyObject?) {
                
                case let .success(value): _result.attachmentTypeBlacklist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo() : instance as! ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties() : instance as! ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["attachmentTypeBlacklist"] as AnyObject?) {
                
                case let .success(value): _result.attachmentTypeBlacklist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["extension.order"] as AnyObject?) {
                
                case let .success(value): _result.extensionOrder = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCalendarServletsTimeZoneServletInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCalendarServletsTimeZoneServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCalendarServletsTimeZoneServletInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCalendarServletsTimeZoneServletInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCalendarServletsTimeZoneServletInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCalendarServletsTimeZoneServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCalendarServletsTimeZoneServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCalendarServletsTimeZoneServletInfo() : instance as! ComAdobeCqSocialCalendarServletsTimeZoneServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCalendarServletsTimeZoneServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCalendarServletsTimeZoneServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCalendarServletsTimeZoneServletProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCalendarServletsTimeZoneServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCalendarServletsTimeZoneServletProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCalendarServletsTimeZoneServletProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCalendarServletsTimeZoneServletProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCalendarServletsTimeZoneServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCalendarServletsTimeZoneServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCalendarServletsTimeZoneServletProperties() : instance as! ComAdobeCqSocialCalendarServletsTimeZoneServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["timezones.expirytime"] as AnyObject?) {
                
                case let .success(value): _result.timezonesExpirytime = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCalendarServletsTimeZoneServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo() : instance as! ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties() : instance as! ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["ranking"] as AnyObject?) {
                
                case let .success(value): _result.ranking = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo() : instance as! ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties() : instance as! ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"] as AnyObject?) {
                
                case let .success(value): _result.fieldWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["attachmentTypeBlacklist"] as AnyObject?) {
                
                case let .success(value): _result.attachmentTypeBlacklist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo() : instance as! ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties() : instance as! ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"] as AnyObject?) {
                
                case let .success(value): _result.fieldWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["attachmentTypeBlacklist"] as AnyObject?) {
                
                case let .success(value): _result.attachmentTypeBlacklist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo() : instance as! ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties() : instance as! ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["numUserLimit"] as AnyObject?) {
                
                case let .success(value): _result.numUserLimit = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo() : instance as! ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties() : instance as! ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableScheduledPostsSearch"] as AnyObject?) {
                
                case let .success(value): _result.enableScheduledPostsSearch = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["numberOfMinutes"] as AnyObject?) {
                
                case let .success(value): _result.numberOfMinutes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxSearchLimit"] as AnyObject?) {
                
                case let .success(value): _result.maxSearchLimit = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo() : instance as! ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterProperties() : instance as! ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cors.enabling"] as AnyObject?) {
                
                case let .success(value): _result.corsEnabling = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo() : instance as! ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties() : instance as! ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priorityOrder"] as AnyObject?) {
                
                case let .success(value): _result.priorityOrder = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["replyEmailPatterns"] as AnyObject?) {
                
                case let .success(value): _result.replyEmailPatterns = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo() : instance as! ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties() : instance as! ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["context.path"] as AnyObject?) {
                
                case let .success(value): _result.contextPath = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo() : instance as! ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties() : instance as! ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.topics"] as AnyObject?) {
                
                case let .success(value): _result.eventTopics = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo() : instance as! ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties() : instance as! ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priorityOrder"] as AnyObject?) {
                
                case let .success(value): _result.priorityOrder = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["replyEmailPatterns"] as AnyObject?) {
                
                case let .success(value): _result.replyEmailPatterns = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo() : instance as! ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties() : instance as! ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pattern.time"] as AnyObject?) {
                
                case let .success(value): _result.patternTime = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pattern.newline"] as AnyObject?) {
                
                case let .success(value): _result.patternNewline = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pattern.dayOfMonth"] as AnyObject?) {
                
                case let .success(value): _result.patternDayOfMonth = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pattern.month"] as AnyObject?) {
                
                case let .success(value): _result.patternMonth = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pattern.year"] as AnyObject?) {
                
                case let .success(value): _result.patternYear = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pattern.date"] as AnyObject?) {
                
                case let .success(value): _result.patternDate = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pattern.dateTime"] as AnyObject?) {
                
                case let .success(value): _result.patternDateTime = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pattern.email"] as AnyObject?) {
                
                case let .success(value): _result.patternEmail = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo() : instance as! ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties() : instance as! ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["email.name"] as AnyObject?) {
                
                case let .success(value): _result.emailName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["email.createPostFromReply"] as AnyObject?) {
                
                case let .success(value): _result.emailCreatePostFromReply = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["email.addCommentIdTo"] as AnyObject?) {
                
                case let .success(value): _result.emailAddCommentIdTo = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["email.subjectMaximumLength"] as AnyObject?) {
                
                case let .success(value): _result.emailSubjectMaximumLength = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["email.replyToAddress"] as AnyObject?) {
                
                case let .success(value): _result.emailReplyToAddress = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["email.replyToDelimiter"] as AnyObject?) {
                
                case let .success(value): _result.emailReplyToDelimiter = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["email.trackerIdPrefixInSubject"] as AnyObject?) {
                
                case let .success(value): _result.emailTrackerIdPrefixInSubject = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["email.trackerIdPrefixInBody"] as AnyObject?) {
                
                case let .success(value): _result.emailTrackerIdPrefixInBody = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["email.asHTML"] as AnyObject?) {
                
                case let .success(value): _result.emailAsHTML = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["email.defaultUserName"] as AnyObject?) {
                
                case let .success(value): _result.emailDefaultUserName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["email.templates.rootPath"] as AnyObject?) {
                
                case let .success(value): _result.emailTemplatesRootPath = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo() : instance as! ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties() : instance as! ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["connectProtocol"] as AnyObject?) {
                
                case let .success(value): _result.connectProtocol = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo() : instance as! ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties() : instance as! ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priorityOrder"] as AnyObject?) {
                
                case let .success(value): _result.priorityOrder = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["replyEmailPatterns"] as AnyObject?) {
                
                case let .success(value): _result.replyEmailPatterns = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo() : instance as! ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderProperties() : instance as! ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priorityOrder"] as AnyObject?) {
                
                case let .success(value): _result.priorityOrder = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["replyEmailPatterns"] as AnyObject?) {
                
                case let .success(value): _result.replyEmailPatterns = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo() : instance as! ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties() : instance as! ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priorityOrder"] as AnyObject?) {
                
                case let .success(value): _result.priorityOrder = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["replyEmailPatterns"] as AnyObject?) {
                
                case let .success(value): _result.replyEmailPatterns = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo() : instance as! ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties() : instance as! ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priorityOrder"] as AnyObject?) {
                
                case let .success(value): _result.priorityOrder = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["replyEmailPatterns"] as AnyObject?) {
                
                case let .success(value): _result.replyEmailPatterns = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo() : instance as! ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties() : instance as! ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["replyEmailPatterns"] as AnyObject?) {
                
                case let .success(value): _result.replyEmailPatterns = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priorityOrder"] as AnyObject?) {
                
                case let .success(value): _result.priorityOrder = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo() : instance as! ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties() : instance as! ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priorityOrder"] as AnyObject?) {
                
                case let .success(value): _result.priorityOrder = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["replyEmailPatterns"] as AnyObject?) {
                
                case let .success(value): _result.replyEmailPatterns = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo() : instance as! ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties() : instance as! ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["numberOfDays"] as AnyObject?) {
                
                case let .success(value): _result.numberOfDays = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["ageOfFile"] as AnyObject?) {
                
                case let .success(value): _result.ageOfFile = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo() : instance as! ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplProperties() : instance as! ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.topics"] as AnyObject?) {
                
                case let .success(value): _result.eventTopics = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"] as AnyObject?) {
                
                case let .success(value): _result.eventFilter = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["verbs"] as AnyObject?) {
                
                case let .success(value): _result.verbs = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo() : instance as! ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties() : instance as! ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enable"] as AnyObject?) {
                
                case let .success(value): _result.enable = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["UGCLimit"] as AnyObject?) {
                
                case let .success(value): _result.uGCLimit = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["ugcLimitDuration"] as AnyObject?) {
                
                case let .success(value): _result.ugcLimitDuration = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["domains"] as AnyObject?) {
                
                case let .success(value): _result.domains = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["toList"] as AnyObject?) {
                
                case let .success(value): _result.toList = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo() : instance as! ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties() : instance as! ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.id"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.cloud.config.root"] as AnyObject?) {
                
                case let .success(value): _result.oauthCloudConfigRoot = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["provider.config.root"] as AnyObject?) {
                
                case let .success(value): _result.providerConfigRoot = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["provider.config.create.tags.enabled"] as AnyObject?) {
                
                case let .success(value): _result.providerConfigCreateTagsEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["provider.config.user.folder"] as AnyObject?) {
                
                case let .success(value): _result.providerConfigUserFolder = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["provider.config.facebook.fetch.fields"] as AnyObject?) {
                
                case let .success(value): _result.providerConfigFacebookFetchFields = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["provider.config.facebook.fields"] as AnyObject?) {
                
                case let .success(value): _result.providerConfigFacebookFields = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["provider.config.refresh.userdata.enabled"] as AnyObject?) {
                
                case let .success(value): _result.providerConfigRefreshUserdataEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo() : instance as! ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties() : instance as! ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["path"] as AnyObject?) {
                
                case let .success(value): _result.path = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo() : instance as! ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties() : instance as! ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["facebook"] as AnyObject?) {
                
                case let .success(value): _result.facebook = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["twitter"] as AnyObject?) {
                
                case let .success(value): _result.twitter = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["provider.config.user.folder"] as AnyObject?) {
                
                case let .success(value): _result.providerConfigUserFolder = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo() : instance as! ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties() : instance as! ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.id"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.cloud.config.root"] as AnyObject?) {
                
                case let .success(value): _result.oauthCloudConfigRoot = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["provider.config.root"] as AnyObject?) {
                
                case let .success(value): _result.providerConfigRoot = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["provider.config.user.folder"] as AnyObject?) {
                
                case let .success(value): _result.providerConfigUserFolder = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["provider.config.twitter.enable.params"] as AnyObject?) {
                
                case let .success(value): _result.providerConfigTwitterEnableParams = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["provider.config.twitter.params"] as AnyObject?) {
                
                case let .success(value): _result.providerConfigTwitterParams = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["provider.config.refresh.userdata.enabled"] as AnyObject?) {
                
                case let .success(value): _result.providerConfigRefreshUserdataEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo() : instance as! ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties() : instance as! ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.social.content.fragments.services.enabled"] as AnyObject?) {
                
                case let .success(value): _result.cqSocialContentFragmentsServicesEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.social.content.fragments.services.waitTimeSeconds"] as AnyObject?) {
                
                case let .success(value): _result.cqSocialContentFragmentsServicesWaitTimeSeconds = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo() : instance as! ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties() : instance as! ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["version.id"] as AnyObject?) {
                
                case let .success(value): _result.versionId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cache.on"] as AnyObject?) {
                
                case let .success(value): _result.cacheOn = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["concurrency.level"] as AnyObject?) {
                
                case let .success(value): _result.concurrencyLevel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.start.size"] as AnyObject?) {
                
                case let .success(value): _result.cacheStartSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.ttl"] as AnyObject?) {
                
                case let .success(value): _result.cacheTtl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.size"] as AnyObject?) {
                
                case let .success(value): _result.cacheSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["time.limit"] as AnyObject?) {
                
                case let .success(value): _result.timeLimit = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo() : instance as! ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties() : instance as! ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["solr.zk.timeout"] as AnyObject?) {
                
                case let .success(value): _result.solrZkTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["solr.commit"] as AnyObject?) {
                
                case let .success(value): _result.solrCommit = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cache.on"] as AnyObject?) {
                
                case let .success(value): _result.cacheOn = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["concurrency.level"] as AnyObject?) {
                
                case let .success(value): _result.concurrencyLevel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.start.size"] as AnyObject?) {
                
                case let .success(value): _result.cacheStartSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.ttl"] as AnyObject?) {
                
                case let .success(value): _result.cacheTtl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.size"] as AnyObject?) {
                
                case let .success(value): _result.cacheSize = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo() : instance as! ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties() : instance as! ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["solr.zk.timeout"] as AnyObject?) {
                
                case let .success(value): _result.solrZkTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["solr.commit"] as AnyObject?) {
                
                case let .success(value): _result.solrCommit = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cache.on"] as AnyObject?) {
                
                case let .success(value): _result.cacheOn = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["concurrency.level"] as AnyObject?) {
                
                case let .success(value): _result.concurrencyLevel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.start.size"] as AnyObject?) {
                
                case let .success(value): _result.cacheStartSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.ttl"] as AnyObject?) {
                
                case let .success(value): _result.cacheTtl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.size"] as AnyObject?) {
                
                case let .success(value): _result.cacheSize = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo() : instance as! ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties() : instance as! ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["isMemberCheck"] as AnyObject?) {
                
                case let .success(value): _result.isMemberCheck = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo() : instance as! ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties() : instance as! ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["isMemberCheck"] as AnyObject?) {
                
                case let .success(value): _result.isMemberCheck = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo() : instance as! ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties() : instance as! ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"] as AnyObject?) {
                
                case let .success(value): _result.fieldWhitelist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo() : instance as! ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties() : instance as! ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"] as AnyObject?) {
                
                case let .success(value): _result.fieldWhitelist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo() : instance as! ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties() : instance as! ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo() : instance as! ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties() : instance as! ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.selectors"] as AnyObject?) {
                
                case let .success(value): _result.slingServletSelectors = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.extensions"] as AnyObject?) {
                
                case let .success(value): _result.slingServletExtensions = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo() : instance as! ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties() : instance as! ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"] as AnyObject?) {
                
                case let .success(value): _result.fieldWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["attachmentTypeBlacklist"] as AnyObject?) {
                
                case let .success(value): _result.attachmentTypeBlacklist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo() : instance as! ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties() : instance as! ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"] as AnyObject?) {
                
                case let .success(value): _result.fieldWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["attachmentTypeBlacklist"] as AnyObject?) {
                
                case let .success(value): _result.attachmentTypeBlacklist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo() : instance as! ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties() : instance as! ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["extension.order"] as AnyObject?) {
                
                case let .success(value): _result.extensionOrder = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["flush.forumontopic"] as AnyObject?) {
                
                case let .success(value): _result.flushForumontopic = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo() : instance as! ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties() : instance as! ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["group.listing.pagination.enable"] as AnyObject?) {
                
                case let .success(value): _result.groupListingPaginationEnable = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["group.listing.lazyloading.enable"] as AnyObject?) {
                
                case let .success(value): _result.groupListingLazyloadingEnable = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["page.size"] as AnyObject?) {
                
                case let .success(value): _result.pageSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priority"] as AnyObject?) {
                
                case let .success(value): _result.priority = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialGroupImplGroupServiceImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialGroupImplGroupServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialGroupImplGroupServiceImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialGroupImplGroupServiceImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialGroupImplGroupServiceImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialGroupImplGroupServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialGroupImplGroupServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialGroupImplGroupServiceImplInfo() : instance as! ComAdobeCqSocialGroupImplGroupServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialGroupImplGroupServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialGroupImplGroupServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialGroupImplGroupServiceImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialGroupImplGroupServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialGroupImplGroupServiceImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialGroupImplGroupServiceImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialGroupImplGroupServiceImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialGroupImplGroupServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialGroupImplGroupServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialGroupImplGroupServiceImplProperties() : instance as! ComAdobeCqSocialGroupImplGroupServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxWaitTime"] as AnyObject?) {
                
                case let .success(value): _result.maxWaitTime = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["minWaitBetweenRetries"] as AnyObject?) {
                
                case let .success(value): _result.minWaitBetweenRetries = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialGroupImplGroupServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo() : instance as! ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties() : instance as! ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["parameter.guava.cache.enabled"] as AnyObject?) {
                
                case let .success(value): _result.parameterGuavaCacheEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["parameter.guava.cache.params"] as AnyObject?) {
                
                case let .success(value): _result.parameterGuavaCacheParams = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["parameter.guava.cache.reload"] as AnyObject?) {
                
                case let .success(value): _result.parameterGuavaCacheReload = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo() : instance as! ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties() : instance as! ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"] as AnyObject?) {
                
                case let .success(value): _result.fieldWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["attachmentTypeBlacklist"] as AnyObject?) {
                
                case let .success(value): _result.attachmentTypeBlacklist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo() : instance as! ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties() : instance as! ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"] as AnyObject?) {
                
                case let .success(value): _result.fieldWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["attachmentTypeBlacklist"] as AnyObject?) {
                
                case let .success(value): _result.attachmentTypeBlacklist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo() : instance as! ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties() : instance as! ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"] as AnyObject?) {
                
                case let .success(value): _result.fieldWhitelist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo() : instance as! ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties() : instance as! ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"] as AnyObject?) {
                
                case let .success(value): _result.fieldWhitelist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo() : instance as! ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties() : instance as! ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["everyoneLimit"] as AnyObject?) {
                
                case let .success(value): _result.everyoneLimit = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priority"] as AnyObject?) {
                
                case let .success(value): _result.priority = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo() : instance as! ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties() : instance as! ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["message.properties"] as AnyObject?) {
                
                case let .success(value): _result.messageProperties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["messageBoxSizeLimit"] as AnyObject?) {
                
                case let .success(value): _result.messageBoxSizeLimit = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["messageCountLimit"] as AnyObject?) {
                
                case let .success(value): _result.messageCountLimit = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["notifyFailure"] as AnyObject?) {
                
                case let .success(value): _result.notifyFailure = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["failureMessageFrom"] as AnyObject?) {
                
                case let .success(value): _result.failureMessageFrom = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["failureTemplatePath"] as AnyObject?) {
                
                case let .success(value): _result.failureTemplatePath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxRetries"] as AnyObject?) {
                
                case let .success(value): _result.maxRetries = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["minWaitBetweenRetries"] as AnyObject?) {
                
                case let .success(value): _result.minWaitBetweenRetries = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["countUpdatePoolSize"] as AnyObject?) {
                
                case let .success(value): _result.countUpdatePoolSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["inbox.path"] as AnyObject?) {
                
                case let .success(value): _result.inboxPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sentitems.path"] as AnyObject?) {
                
                case let .success(value): _result.sentitemsPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["supportAttachments"] as AnyObject?) {
                
                case let .success(value): _result.supportAttachments = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["supportGroupMessaging"] as AnyObject?) {
                
                case let .success(value): _result.supportGroupMessaging = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxTotalRecipients"] as AnyObject?) {
                
                case let .success(value): _result.maxTotalRecipients = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["batchSize"] as AnyObject?) {
                
                case let .success(value): _result.batchSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxTotalAttachmentSize"] as AnyObject?) {
                
                case let .success(value): _result.maxTotalAttachmentSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["attachmentTypeBlacklist"] as AnyObject?) {
                
                case let .success(value): _result.attachmentTypeBlacklist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["allowedAttachmentTypes"] as AnyObject?) {
                
                case let .success(value): _result.allowedAttachmentTypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceSelector"] as AnyObject?) {
                
                case let .success(value): _result.serviceSelector = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"] as AnyObject?) {
                
                case let .success(value): _result.fieldWhitelist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo() : instance as! ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties() : instance as! ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resourceType.filters"] as AnyObject?) {
                
                case let .success(value): _result.resourceTypeFilters = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priority"] as AnyObject?) {
                
                case let .success(value): _result.priority = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo() : instance as! ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties() : instance as! ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priority"] as AnyObject?) {
                
                case let .success(value): _result.priority = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo() : instance as! ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties() : instance as! ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priority"] as AnyObject?) {
                
                case let .success(value): _result.priority = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo() : instance as! ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties() : instance as! ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resourceType.filters"] as AnyObject?) {
                
                case let .success(value): _result.resourceTypeFilters = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priority"] as AnyObject?) {
                
                case let .success(value): _result.priority = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialNotificationsImplMentionsRouterInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialNotificationsImplMentionsRouterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialNotificationsImplMentionsRouterInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialNotificationsImplMentionsRouterInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialNotificationsImplMentionsRouterInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialNotificationsImplMentionsRouterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialNotificationsImplMentionsRouterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialNotificationsImplMentionsRouterInfo() : instance as! ComAdobeCqSocialNotificationsImplMentionsRouterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialNotificationsImplMentionsRouterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialNotificationsImplMentionsRouterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialNotificationsImplMentionsRouterProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialNotificationsImplMentionsRouterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialNotificationsImplMentionsRouterProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialNotificationsImplMentionsRouterProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialNotificationsImplMentionsRouterProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialNotificationsImplMentionsRouterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialNotificationsImplMentionsRouterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialNotificationsImplMentionsRouterProperties() : instance as! ComAdobeCqSocialNotificationsImplMentionsRouterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.topics"] as AnyObject?) {
                
                case let .success(value): _result.eventTopics = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"] as AnyObject?) {
                
                case let .success(value): _result.eventFilter = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialNotificationsImplMentionsRouterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo() : instance as! ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties() : instance as! ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["max.unread.notification.count"] as AnyObject?) {
                
                case let .success(value): _result.maxUnreadNotificationCount = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialNotificationsImplNotificationsRouterInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialNotificationsImplNotificationsRouterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialNotificationsImplNotificationsRouterInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialNotificationsImplNotificationsRouterInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialNotificationsImplNotificationsRouterInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialNotificationsImplNotificationsRouterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialNotificationsImplNotificationsRouterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialNotificationsImplNotificationsRouterInfo() : instance as! ComAdobeCqSocialNotificationsImplNotificationsRouterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialNotificationsImplNotificationsRouterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialNotificationsImplNotificationsRouterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialNotificationsImplNotificationsRouterProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialNotificationsImplNotificationsRouterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialNotificationsImplNotificationsRouterProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialNotificationsImplNotificationsRouterProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialNotificationsImplNotificationsRouterProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialNotificationsImplNotificationsRouterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialNotificationsImplNotificationsRouterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialNotificationsImplNotificationsRouterProperties() : instance as! ComAdobeCqSocialNotificationsImplNotificationsRouterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.topics"] as AnyObject?) {
                
                case let .success(value): _result.eventTopics = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"] as AnyObject?) {
                
                case let .success(value): _result.eventFilter = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialNotificationsImplNotificationsRouterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo() : instance as! ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties() : instance as! ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"] as AnyObject?) {
                
                case let .success(value): _result.fieldWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["attachmentTypeBlacklist"] as AnyObject?) {
                
                case let .success(value): _result.attachmentTypeBlacklist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo() : instance as! ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties() : instance as! ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.social.reporting.analytics.polling.importer.interval"] as AnyObject?) {
                
                case let .success(value): _result.cqSocialReportingAnalyticsPollingImporterInterval = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.social.reporting.analytics.polling.importer.pageSize"] as AnyObject?) {
                
                case let .success(value): _result.cqSocialReportingAnalyticsPollingImporterPageSize = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo() : instance as! ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties() : instance as! ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["report.fetch.delay"] as AnyObject?) {
                
                case let .success(value): _result.reportFetchDelay = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo() : instance as! ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties() : instance as! ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.social.console.analytics.sites.mapping"] as AnyObject?) {
                
                case let .success(value): _result.cqSocialConsoleAnalyticsSitesMapping = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priority"] as AnyObject?) {
                
                case let .success(value): _result.priority = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo() : instance as! ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties() : instance as! ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"] as AnyObject?) {
                
                case let .success(value): _result.fieldWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["attachmentTypeBlacklist"] as AnyObject?) {
                
                case let .success(value): _result.attachmentTypeBlacklist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo() : instance as! ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties() : instance as! ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.selectors"] as AnyObject?) {
                
                case let .success(value): _result.slingServletSelectors = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.extensions"] as AnyObject?) {
                
                case let .success(value): _result.slingServletExtensions = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo() : instance as! ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties() : instance as! ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.servlet.selectors"] as AnyObject?) {
                
                case let .success(value): _result.slingServletSelectors = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.extensions"] as AnyObject?) {
                
                case let .success(value): _result.slingServletExtensions = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialScoringImplScoringEventListenerInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialScoringImplScoringEventListenerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialScoringImplScoringEventListenerInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialScoringImplScoringEventListenerInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialScoringImplScoringEventListenerInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialScoringImplScoringEventListenerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialScoringImplScoringEventListenerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialScoringImplScoringEventListenerInfo() : instance as! ComAdobeCqSocialScoringImplScoringEventListenerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialScoringImplScoringEventListenerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialScoringImplScoringEventListenerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialScoringImplScoringEventListenerProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialScoringImplScoringEventListenerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialScoringImplScoringEventListenerProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialScoringImplScoringEventListenerProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialScoringImplScoringEventListenerProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialScoringImplScoringEventListenerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialScoringImplScoringEventListenerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialScoringImplScoringEventListenerProperties() : instance as! ComAdobeCqSocialScoringImplScoringEventListenerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.topics"] as AnyObject?) {
                
                case let .success(value): _result.eventTopics = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"] as AnyObject?) {
                
                case let .success(value): _result.eventFilter = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialScoringImplScoringEventListenerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo() : instance as! ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties() : instance as! ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableFallback"] as AnyObject?) {
                
                case let .success(value): _result.enableFallback = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo() : instance as! ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties() : instance as! ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"] as AnyObject?) {
                
                case let .success(value): _result.fieldWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sitePathFilters"] as AnyObject?) {
                
                case let .success(value): _result.sitePathFilters = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sitePackageGroup"] as AnyObject?) {
                
                case let .success(value): _result.sitePackageGroup = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo() : instance as! ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties() : instance as! ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.social.console.analytics.components"] as AnyObject?) {
                
                case let .success(value): _result.cqSocialConsoleAnalyticsComponents = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo() : instance as! ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties() : instance as! ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["componentsUsingTags"] as AnyObject?) {
                
                case let .success(value): _result.componentsUsingTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialSrpImplSocialSolrConnectorInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialSrpImplSocialSolrConnectorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialSrpImplSocialSolrConnectorInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialSrpImplSocialSolrConnectorInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialSrpImplSocialSolrConnectorInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialSrpImplSocialSolrConnectorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialSrpImplSocialSolrConnectorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialSrpImplSocialSolrConnectorInfo() : instance as! ComAdobeCqSocialSrpImplSocialSolrConnectorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialSrpImplSocialSolrConnectorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialSrpImplSocialSolrConnectorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialSrpImplSocialSolrConnectorProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialSrpImplSocialSolrConnectorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialSrpImplSocialSolrConnectorProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialSrpImplSocialSolrConnectorProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialSrpImplSocialSolrConnectorProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialSrpImplSocialSolrConnectorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialSrpImplSocialSolrConnectorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialSrpImplSocialSolrConnectorProperties() : instance as! ComAdobeCqSocialSrpImplSocialSolrConnectorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["srp.type"] as AnyObject?) {
                
                case let .success(value): _result.srpType = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialSrpImplSocialSolrConnectorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialSyncImplDiffChangesObserverInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialSyncImplDiffChangesObserverInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialSyncImplDiffChangesObserverInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialSyncImplDiffChangesObserverInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialSyncImplDiffChangesObserverInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialSyncImplDiffChangesObserverInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialSyncImplDiffChangesObserverInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialSyncImplDiffChangesObserverInfo() : instance as! ComAdobeCqSocialSyncImplDiffChangesObserverInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialSyncImplDiffChangesObserverProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialSyncImplDiffChangesObserverInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialSyncImplDiffChangesObserverProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialSyncImplDiffChangesObserverProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialSyncImplDiffChangesObserverProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialSyncImplDiffChangesObserverProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialSyncImplDiffChangesObserverProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialSyncImplDiffChangesObserverProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialSyncImplDiffChangesObserverProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialSyncImplDiffChangesObserverProperties() : instance as! ComAdobeCqSocialSyncImplDiffChangesObserverProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["agentName"] as AnyObject?) {
                
                case let .success(value): _result.agentName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["diffPath"] as AnyObject?) {
                
                case let .success(value): _result.diffPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["propertyNames"] as AnyObject?) {
                
                case let .success(value): _result.propertyNames = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialSyncImplDiffChangesObserverProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo() : instance as! ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties() : instance as! ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["nodetypes"] as AnyObject?) {
                
                case let .success(value): _result.nodetypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["ignorableprops"] as AnyObject?) {
                
                case let .success(value): _result.ignorableprops = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["ignorablenodes"] as AnyObject?) {
                
                case let .success(value): _result.ignorablenodes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["distfolders"] as AnyObject?) {
                
                case let .success(value): _result.distfolders = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo() : instance as! ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties() : instance as! ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["activeRunModes"] as AnyObject?) {
                
                case let .success(value): _result.activeRunModes = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialSyncImplUserSyncListenerImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialSyncImplUserSyncListenerImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialSyncImplUserSyncListenerImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialSyncImplUserSyncListenerImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialSyncImplUserSyncListenerImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialSyncImplUserSyncListenerImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialSyncImplUserSyncListenerImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialSyncImplUserSyncListenerImplInfo() : instance as! ComAdobeCqSocialSyncImplUserSyncListenerImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialSyncImplUserSyncListenerImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialSyncImplUserSyncListenerImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialSyncImplUserSyncListenerImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialSyncImplUserSyncListenerImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialSyncImplUserSyncListenerImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialSyncImplUserSyncListenerImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialSyncImplUserSyncListenerImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialSyncImplUserSyncListenerImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialSyncImplUserSyncListenerImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialSyncImplUserSyncListenerImplProperties() : instance as! ComAdobeCqSocialSyncImplUserSyncListenerImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["nodetypes"] as AnyObject?) {
                
                case let .success(value): _result.nodetypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["ignorableprops"] as AnyObject?) {
                
                case let .success(value): _result.ignorableprops = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["ignorablenodes"] as AnyObject?) {
                
                case let .success(value): _result.ignorablenodes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["distfolders"] as AnyObject?) {
                
                case let .success(value): _result.distfolders = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialSyncImplUserSyncListenerImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo() : instance as! ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties() : instance as! ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["translate.language"] as AnyObject?) {
                
                case let .success(value): _result.translateLanguage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["translate.display"] as AnyObject?) {
                
                case let .success(value): _result.translateDisplay = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["translate.attribution"] as AnyObject?) {
                
                case let .success(value): _result.translateAttribution = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["translate.caching"] as AnyObject?) {
                
                case let .success(value): _result.translateCaching = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["translate.smart.rendering"] as AnyObject?) {
                
                case let .success(value): _result.translateSmartRendering = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["translate.caching.duration"] as AnyObject?) {
                
                case let .success(value): _result.translateCachingDuration = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["translate.session.save.interval"] as AnyObject?) {
                
                case let .success(value): _result.translateSessionSaveInterval = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["translate.session.save.batchLimit"] as AnyObject?) {
                
                case let .success(value): _result.translateSessionSaveBatchLimit = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo() : instance as! ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties() : instance as! ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.topics"] as AnyObject?) {
                
                case let .success(value): _result.eventTopics = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"] as AnyObject?) {
                
                case let .success(value): _result.eventFilter = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["translate.listener.type"] as AnyObject?) {
                
                case let .success(value): _result.translateListenerType = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["translate.property.list"] as AnyObject?) {
                
                case let .success(value): _result.translatePropertyList = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["poolSize"] as AnyObject?) {
                
                case let .success(value): _result.poolSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxPoolSize"] as AnyObject?) {
                
                case let .success(value): _result.maxPoolSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queueSize"] as AnyObject?) {
                
                case let .success(value): _result.queueSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["keepAliveTime"] as AnyObject?) {
                
                case let .success(value): _result.keepAliveTime = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo() : instance as! ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties() : instance as! ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["threadPoolSize"] as AnyObject?) {
                
                case let .success(value): _result.threadPoolSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["delayTime"] as AnyObject?) {
                
                case let .success(value): _result.delayTime = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["workerSleepTime"] as AnyObject?) {
                
                case let .success(value): _result.workerSleepTime = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo() : instance as! ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties() : instance as! ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["poolSize"] as AnyObject?) {
                
                case let .success(value): _result.poolSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxPoolSize"] as AnyObject?) {
                
                case let .success(value): _result.maxPoolSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queueSize"] as AnyObject?) {
                
                case let .success(value): _result.queueSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["keepAliveTime"] as AnyObject?) {
                
                case let .success(value): _result.keepAliveTime = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo() : instance as! ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties() : instance as! ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["isPrimaryPublisher"] as AnyObject?) {
                
                case let .success(value): _result.isPrimaryPublisher = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo() : instance as! ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties() : instance as! ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["legacyCloudUGCPathMapping"] as AnyObject?) {
                
                case let .success(value): _result.legacyCloudUGCPathMapping = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo() : instance as! ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties() : instance as! ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["automoderation.sequence"] as AnyObject?) {
                
                case let .success(value): _result.automoderationSequence = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["automoderation.onfailurestop"] as AnyObject?) {
                
                case let .success(value): _result.automoderationOnfailurestop = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo() : instance as! ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties() : instance as! ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["watchwords.positive"] as AnyObject?) {
                
                case let .success(value): _result.watchwordsPositive = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["watchwords.negative"] as AnyObject?) {
                
                case let .success(value): _result.watchwordsNegative = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["watchwords.path"] as AnyObject?) {
                
                case let .success(value): _result.watchwordsPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sentiment.path"] as AnyObject?) {
                
                case let .success(value): _result.sentimentPath = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo() : instance as! ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties() : instance as! ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["default.attachment.type.blacklist"] as AnyObject?) {
                
                case let .success(value): _result.defaultAttachmentTypeBlacklist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["baseline.attachment.type.blacklist"] as AnyObject?) {
                
                case let .success(value): _result.baselineAttachmentTypeBlacklist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo() : instance as! ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties() : instance as! ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["parameter.whitelist"] as AnyObject?) {
                
                case let .success(value): _result.parameterWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["parameter.whitelist.prefixes"] as AnyObject?) {
                
                case let .success(value): _result.parameterWhitelistPrefixes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["binary.parameter.whitelist"] as AnyObject?) {
                
                case let .success(value): _result.binaryParameterWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["modifier.whitelist"] as AnyObject?) {
                
                case let .success(value): _result.modifierWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["operation.whitelist"] as AnyObject?) {
                
                case let .success(value): _result.operationWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["operation.whitelist.prefixes"] as AnyObject?) {
                
                case let .success(value): _result.operationWhitelistPrefixes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["typehint.whitelist"] as AnyObject?) {
                
                case let .success(value): _result.typehintWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resourcetype.whitelist"] as AnyObject?) {
                
                case let .success(value): _result.resourcetypeWhitelist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo() : instance as! ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties() : instance as! ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.extensions"] as AnyObject?) {
                
                case let .success(value): _result.slingServletExtensions = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.paths"] as AnyObject?) {
                
                case let .success(value): _result.slingServletPaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.methods"] as AnyObject?) {
                
                case let .success(value): _result.slingServletMethods = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialUserImplTransportHttpToPublisherInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialUserImplTransportHttpToPublisherInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialUserImplTransportHttpToPublisherInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialUserImplTransportHttpToPublisherInfo].self, source: source)
        }

        // Decoder for ComAdobeCqSocialUserImplTransportHttpToPublisherInfo
        Decoders.addDecoder(clazz: ComAdobeCqSocialUserImplTransportHttpToPublisherInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialUserImplTransportHttpToPublisherInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialUserImplTransportHttpToPublisherInfo() : instance as! ComAdobeCqSocialUserImplTransportHttpToPublisherInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqSocialUserImplTransportHttpToPublisherProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialUserImplTransportHttpToPublisherInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqSocialUserImplTransportHttpToPublisherProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqSocialUserImplTransportHttpToPublisherProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqSocialUserImplTransportHttpToPublisherProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqSocialUserImplTransportHttpToPublisherProperties].self, source: source)
        }

        // Decoder for ComAdobeCqSocialUserImplTransportHttpToPublisherProperties
        Decoders.addDecoder(clazz: ComAdobeCqSocialUserImplTransportHttpToPublisherProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqSocialUserImplTransportHttpToPublisherProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqSocialUserImplTransportHttpToPublisherProperties() : instance as! ComAdobeCqSocialUserImplTransportHttpToPublisherProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enable"] as AnyObject?) {
                
                case let .success(value): _result.enable = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["agent.configuration"] as AnyObject?) {
                
                case let .success(value): _result.agentConfiguration = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["context.path"] as AnyObject?) {
                
                case let .success(value): _result.contextPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["disabled.cipher.suites"] as AnyObject?) {
                
                case let .success(value): _result.disabledCipherSuites = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["enabled.cipher.suites"] as AnyObject?) {
                
                case let .success(value): _result.enabledCipherSuites = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqSocialUserImplTransportHttpToPublisherProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo].self, source: source)
        }

        // Decoder for ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo
        Decoders.addDecoder(clazz: ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo() : instance as! ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties].self, source: source)
        }

        // Decoder for ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties
        Decoders.addDecoder(clazz: ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties() : instance as! ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resource.types"] as AnyObject?) {
                
                case let .success(value): _result.resourceTypes = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo].self, source: source)
        }

        // Decoder for ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo
        Decoders.addDecoder(clazz: ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo() : instance as! ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties].self, source: source)
        }

        // Decoder for ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties
        Decoders.addDecoder(clazz: ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties() : instance as! ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["delete.path.regexps"] as AnyObject?) {
                
                case let .success(value): _result.deletePathRegexps = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["delete.sql2.query"] as AnyObject?) {
                
                case let .success(value): _result.deleteSql2Query = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo].self, source: source)
        }

        // Decoder for ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo
        Decoders.addDecoder(clazz: ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo() : instance as! ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties].self, source: source)
        }

        // Decoder for ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties
        Decoders.addDecoder(clazz: ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties() : instance as! ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["delete.name.regexps"] as AnyObject?) {
                
                case let .success(value): _result.deleteNameRegexps = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo].self, source: source)
        }

        // Decoder for ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo
        Decoders.addDecoder(clazz: ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo() : instance as! ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties].self, source: source)
        }

        // Decoder for ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties
        Decoders.addDecoder(clazz: ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties() : instance as! ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["threshold"] as AnyObject?) {
                
                case let .success(value): _result.threshold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jobTopicName"] as AnyObject?) {
                
                case let .success(value): _result.jobTopicName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["emailEnabled"] as AnyObject?) {
                
                case let .success(value): _result.emailEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo].self, source: source)
        }

        // Decoder for ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo
        Decoders.addDecoder(clazz: ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo() : instance as! ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties].self, source: source)
        }

        // Decoder for ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties
        Decoders.addDecoder(clazz: ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties() : instance as! ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"] as AnyObject?) {
                
                case let .success(value): _result.schedulerExpression = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["job.purge.threshold"] as AnyObject?) {
                
                case let .success(value): _result.jobPurgeThreshold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["job.purge.max.jobs"] as AnyObject?) {
                
                case let .success(value): _result.jobPurgeMaxJobs = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo].self, source: source)
        }

        // Decoder for ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo
        Decoders.addDecoder(clazz: ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo() : instance as! ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties].self, source: source)
        }

        // Decoder for ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties
        Decoders.addDecoder(clazz: ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties() : instance as! ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["threshold"] as AnyObject?) {
                
                case let .success(value): _result.threshold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jobTopicName"] as AnyObject?) {
                
                case let .success(value): _result.jobTopicName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["emailEnabled"] as AnyObject?) {
                
                case let .success(value): _result.emailEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo].self, source: source)
        }

        // Decoder for ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo
        Decoders.addDecoder(clazz: ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo() : instance as! ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties].self, source: source)
        }

        // Decoder for ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties
        Decoders.addDecoder(clazz: ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties() : instance as! ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["threshold"] as AnyObject?) {
                
                case let .success(value): _result.threshold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jobTopicName"] as AnyObject?) {
                
                case let .success(value): _result.jobTopicName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["emailEnabled"] as AnyObject?) {
                
                case let .success(value): _result.emailEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo].self, source: source)
        }

        // Decoder for ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo
        Decoders.addDecoder(clazz: ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo() : instance as! ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties].self, source: source)
        }

        // Decoder for ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties
        Decoders.addDecoder(clazz: ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties() : instance as! ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"] as AnyObject?) {
                
                case let .success(value): _result.eventFilter = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["launches.eventhandler.threadpool.maxsize"] as AnyObject?) {
                
                case let .success(value): _result.launchesEventhandlerThreadpoolMaxsize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["launches.eventhandler.threadpool.priority"] as AnyObject?) {
                
                case let .success(value): _result.launchesEventhandlerThreadpoolPriority = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["launches.eventhandler.updatelastmodification"] as AnyObject?) {
                
                case let .success(value): _result.launchesEventhandlerUpdatelastmodification = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo].self, source: source)
        }

        // Decoder for ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo
        Decoders.addDecoder(clazz: ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo() : instance as! ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorProperties].self, source: source)
        }

        // Decoder for ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorProperties
        Decoders.addDecoder(clazz: ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorProperties() : instance as! ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.qrcode.servlet.whitelist"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmQrcodeServletWhitelist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo() : instance as! ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties() : instance as! ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["size"] as AnyObject?) {
                
                case let .success(value): _result.size = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo].self, source: source)
        }

        // Decoder for ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo
        Decoders.addDecoder(clazz: ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo() : instance as! ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties].self, source: source)
        }

        // Decoder for ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties
        Decoders.addDecoder(clazz: ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties() : instance as! ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["syncTranslationState.schedulingFormat"] as AnyObject?) {
                
                case let .success(value): _result.syncTranslationStateSchedulingFormat = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["schedulingRepeatTranslation.schedulingFormat"] as AnyObject?) {
                
                case let .success(value): _result.schedulingRepeatTranslationSchedulingFormat = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["syncTranslationState.lockTimeoutInMinutes"] as AnyObject?) {
                
                case let .success(value): _result.syncTranslationStateLockTimeoutInMinutes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["export.format"] as AnyObject?) {
                
                case let .success(value): _result.exportFormat = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo]
        Decoders.addDecoder(clazz: [ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo]> in
            return Decoders.decode(clazz: [ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo].self, source: source)
        }

        // Decoder for ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo
        Decoders.addDecoder(clazz: ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo() : instance as! ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties]
        Decoders.addDecoder(clazz: [ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties]> in
            return Decoders.decode(clazz: [ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties].self, source: source)
        }

        // Decoder for ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties
        Decoders.addDecoder(clazz: ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties() : instance as! ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["portal.outboxes"] as AnyObject?) {
                
                case let .success(value): _result.portalOutboxes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["draft.data.service"] as AnyObject?) {
                
                case let .success(value): _result.draftDataService = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["draft.metadata.service"] as AnyObject?) {
                
                case let .success(value): _result.draftMetadataService = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["submit.data.service"] as AnyObject?) {
                
                case let .success(value): _result.submitDataService = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["submit.metadata.service"] as AnyObject?) {
                
                case let .success(value): _result.submitMetadataService = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pendingSign.data.service"] as AnyObject?) {
                
                case let .success(value): _result.pendingSignDataService = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pendingSign.metadata.service"] as AnyObject?) {
                
                case let .success(value): _result.pendingSignMetadataService = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo]
        Decoders.addDecoder(clazz: [ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo]> in
            return Decoders.decode(clazz: [ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo].self, source: source)
        }

        // Decoder for ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo
        Decoders.addDecoder(clazz: ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo() : instance as! ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties]
        Decoders.addDecoder(clazz: [ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties]> in
            return Decoders.decode(clazz: [ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties].self, source: source)
        }

        // Decoder for ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties
        Decoders.addDecoder(clazz: ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties() : instance as! ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["formportal.interval"] as AnyObject?) {
                
                case let .success(value): _result.formportalInterval = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeFormsCommonServiceImplDefaultDataProviderInfo]
        Decoders.addDecoder(clazz: [ComAdobeFormsCommonServiceImplDefaultDataProviderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeFormsCommonServiceImplDefaultDataProviderInfo]> in
            return Decoders.decode(clazz: [ComAdobeFormsCommonServiceImplDefaultDataProviderInfo].self, source: source)
        }

        // Decoder for ComAdobeFormsCommonServiceImplDefaultDataProviderInfo
        Decoders.addDecoder(clazz: ComAdobeFormsCommonServiceImplDefaultDataProviderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeFormsCommonServiceImplDefaultDataProviderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeFormsCommonServiceImplDefaultDataProviderInfo() : instance as! ComAdobeFormsCommonServiceImplDefaultDataProviderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeFormsCommonServiceImplDefaultDataProviderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeFormsCommonServiceImplDefaultDataProviderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeFormsCommonServiceImplDefaultDataProviderProperties]
        Decoders.addDecoder(clazz: [ComAdobeFormsCommonServiceImplDefaultDataProviderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeFormsCommonServiceImplDefaultDataProviderProperties]> in
            return Decoders.decode(clazz: [ComAdobeFormsCommonServiceImplDefaultDataProviderProperties].self, source: source)
        }

        // Decoder for ComAdobeFormsCommonServiceImplDefaultDataProviderProperties
        Decoders.addDecoder(clazz: ComAdobeFormsCommonServiceImplDefaultDataProviderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeFormsCommonServiceImplDefaultDataProviderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeFormsCommonServiceImplDefaultDataProviderProperties() : instance as! ComAdobeFormsCommonServiceImplDefaultDataProviderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["alloweddataFileLocations"] as AnyObject?) {
                
                case let .success(value): _result.alloweddataFileLocations = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeFormsCommonServiceImplDefaultDataProviderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo]
        Decoders.addDecoder(clazz: [ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo]> in
            return Decoders.decode(clazz: [ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo].self, source: source)
        }

        // Decoder for ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo
        Decoders.addDecoder(clazz: ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo() : instance as! ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties]
        Decoders.addDecoder(clazz: [ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties]> in
            return Decoders.decode(clazz: [ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties].self, source: source)
        }

        // Decoder for ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties
        Decoders.addDecoder(clazz: ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties() : instance as! ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["tempStorageConfig"] as AnyObject?) {
                
                case let .success(value): _result.tempStorageConfig = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeFormsCommonServletTempCleanUpTaskInfo]
        Decoders.addDecoder(clazz: [ComAdobeFormsCommonServletTempCleanUpTaskInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeFormsCommonServletTempCleanUpTaskInfo]> in
            return Decoders.decode(clazz: [ComAdobeFormsCommonServletTempCleanUpTaskInfo].self, source: source)
        }

        // Decoder for ComAdobeFormsCommonServletTempCleanUpTaskInfo
        Decoders.addDecoder(clazz: ComAdobeFormsCommonServletTempCleanUpTaskInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeFormsCommonServletTempCleanUpTaskInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeFormsCommonServletTempCleanUpTaskInfo() : instance as! ComAdobeFormsCommonServletTempCleanUpTaskInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeFormsCommonServletTempCleanUpTaskProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeFormsCommonServletTempCleanUpTaskInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeFormsCommonServletTempCleanUpTaskProperties]
        Decoders.addDecoder(clazz: [ComAdobeFormsCommonServletTempCleanUpTaskProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeFormsCommonServletTempCleanUpTaskProperties]> in
            return Decoders.decode(clazz: [ComAdobeFormsCommonServletTempCleanUpTaskProperties].self, source: source)
        }

        // Decoder for ComAdobeFormsCommonServletTempCleanUpTaskProperties
        Decoders.addDecoder(clazz: ComAdobeFormsCommonServletTempCleanUpTaskProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeFormsCommonServletTempCleanUpTaskProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeFormsCommonServletTempCleanUpTaskProperties() : instance as! ComAdobeFormsCommonServletTempCleanUpTaskProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"] as AnyObject?) {
                
                case let .success(value): _result.schedulerExpression = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["Duration for Temporary Storage"] as AnyObject?) {
                
                case let .success(value): _result.durationForTemporaryStorage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["Duration for Anonymous Storage"] as AnyObject?) {
                
                case let .success(value): _result.durationForAnonymousStorage = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeFormsCommonServletTempCleanUpTaskProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAcpPlatformPlatformServletInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAcpPlatformPlatformServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAcpPlatformPlatformServletInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAcpPlatformPlatformServletInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteAcpPlatformPlatformServletInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteAcpPlatformPlatformServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAcpPlatformPlatformServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAcpPlatformPlatformServletInfo() : instance as! ComAdobeGraniteAcpPlatformPlatformServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteAcpPlatformPlatformServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAcpPlatformPlatformServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAcpPlatformPlatformServletProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAcpPlatformPlatformServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAcpPlatformPlatformServletProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAcpPlatformPlatformServletProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteAcpPlatformPlatformServletProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteAcpPlatformPlatformServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAcpPlatformPlatformServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAcpPlatformPlatformServletProperties() : instance as! ComAdobeGraniteAcpPlatformPlatformServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["query.limit"] as AnyObject?) {
                
                case let .success(value): _result.queryLimit = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["file.type.extension.map"] as AnyObject?) {
                
                case let .success(value): _result.fileTypeExtensionMap = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAcpPlatformPlatformServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo() : instance as! ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties() : instance as! ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["aggregate.relationships"] as AnyObject?) {
                
                case let .success(value): _result.aggregateRelationships = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["aggregate.descend.virtual"] as AnyObject?) {
                
                case let .success(value): _result.aggregateDescendVirtual = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo() : instance as! ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties() : instance as! ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["disabled"] as AnyObject?) {
                
                case let .success(value): _result.disabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo() : instance as! ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties() : instance as! ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["disabled"] as AnyObject?) {
                
                case let .success(value): _result.disabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo() : instance as! ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties() : instance as! ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cdn.cdn-rewriter"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqCdnCdnRewriter = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cloud-config.components"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqCloudConfigComponents = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cloud-config.core"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqCloudConfigCore = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cloud-config.ui"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqCloudConfigUi = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.com.adobe.cq.editor"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqComAdobeCqEditor = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.com.adobe.cq.projects.core"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqComAdobeCqProjectsCore = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.com.adobe.cq.projects.wcm.core"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqComAdobeCqProjectsWcmCore = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.com.adobe.cq.ui.commons"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqComAdobeCqUiCommons = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.com.adobe.cq.wcm.style"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqComAdobeCqWcmStyle = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cq-activitymap-integration"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqCqActivitymapIntegration = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cq-contexthub-commons"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqCqContexthubCommons = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cq-dtm"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqCqDtm = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cq-healthcheck"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqCqHealthcheck = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cq-multisite-targeting"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqCqMultisiteTargeting = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cq-pre-upgrade-cleanup"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqCqPreUpgradeCleanup = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cq-product-info-provider"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqCqProductInfoProvider = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cq-rest-sites"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqCqRestSites = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cq-security-hc"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqCqSecurityHc = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.dam.cq-dam-svg-handler"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqDamCqDamSvgHandler = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.dam.cq-scene7-imaging"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqDamCqScene7Imaging = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.dtm-reactor.core"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqDtmReactorCore = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.dtm-reactor.ui"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqDtmReactorUi = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.exp-jspel-resolver"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqExpJspelResolver = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.inbox.cq-inbox"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqInboxCqInbox = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.json-schema-parser"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqJsonSchemaParser = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.media.cq-media-publishing-dps-fp-core"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqMediaCqMediaPublishingDpsFpCore = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.mobile.cq-mobile-caas"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqMobileCqMobileCaas = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.mobile.cq-mobile-index-builder"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqMobileCqMobileIndexBuilder = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.mobile.cq-mobile-phonegap-build"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqMobileCqMobilePhonegapBuild = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.myspell"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqMyspell = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.sample.we.retail.core"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqSampleWeRetailCore = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.screens.com.adobe.cq.screens.dcc"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqScreensComAdobeCqScreensDcc = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.screens.com.adobe.cq.screens.mq.core"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqScreensComAdobeCqScreensMqCore = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-as-provider"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqSocialCqSocialAsProvider = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-badging-basic-impl"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqSocialCqSocialBadgingBasicImpl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-badging-impl"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqSocialCqSocialBadgingImpl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-calendar-impl"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqSocialCqSocialCalendarImpl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-content-fragments-impl"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqSocialCqSocialContentFragmentsImpl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-enablement-impl"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqSocialCqSocialEnablementImpl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-graph-impl"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqSocialCqSocialGraphImpl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-ideation-impl"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqSocialCqSocialIdeationImpl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-jcr-provider"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqSocialCqSocialJcrProvider = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-members-impl"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqSocialCqSocialMembersImpl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-ms-provider"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqSocialCqSocialMsProvider = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-notifications-channels-web"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqSocialCqSocialNotificationsChannelsWeb = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-notifications-impl"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqSocialCqSocialNotificationsImpl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-rdb-provider"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqSocialCqSocialRdbProvider = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-scf-impl"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqSocialCqSocialScfImpl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-scoring-basic-impl"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqSocialCqSocialScoringBasicImpl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-scoring-impl"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqSocialCqSocialScoringImpl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-serviceusers-impl"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqSocialCqSocialServiceusersImpl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-srp-impl"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqSocialCqSocialSrpImpl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-ugcbase-impl"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeCqSocialCqSocialUgcbaseImpl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.dam.cq-dam-cfm-impl"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeDamCqDamCfmImpl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.forms.foundation-forms-foundation-base"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeFormsFoundationFormsFoundationBase = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.apicontroller"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteApicontroller = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.asset.core"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteAssetCore = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.auth.sso"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteAuthSso = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.bundles.hc.impl"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteBundlesHcImpl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.compat-router"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteCompatRouter = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.conf"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteConf = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.conf.ui.core"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteConfUiCore = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.cors"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteCors = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.crx-explorer"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteCrxExplorer = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.crxde-lite"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteCrxdeLite = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.crypto.config"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteCryptoConfig = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.crypto.extension"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteCryptoExtension = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.crypto.file"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteCryptoFile = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.crypto.jcr"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteCryptoJcr = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.csrf"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteCsrf = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.distribution.core"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteDistributionCore = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.dropwizard.metrics"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteDropwizardMetrics = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.frags.impl"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteFragsImpl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.gibson"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteGibson = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.infocollector"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteInfocollector = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.installer.factory.packages"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteInstallerFactoryPackages = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.jetty.ssl"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteJettySsl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.jobs.async"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteJobsAsync = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.maintenance.oak"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteMaintenanceOak = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.monitoring.core"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteMonitoringCore = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.queries"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteQueries = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.replication.hc.impl"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteReplicationHcImpl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.repository.checker"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteRepositoryChecker = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.repository.hc.impl"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteRepositoryHcImpl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.rest.assets"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteRestAssets = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.security.ui"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteSecurityUi = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.startup"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteStartup = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.tagsoup"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteTagsoup = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.taskmanagement.core"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteTaskmanagementCore = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.taskmanagement.workflow"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteTaskmanagementWorkflow = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.ui.clientlibs.compiler.less"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteUiClientlibsCompilerLess = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.ui.clientlibs.processor.gcc"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteUiClientlibsProcessorGcc = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.webconsole.plugins"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteWebconsolePlugins = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.workflow.console"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteWorkflowConsole = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.xmp.worker.files.native.fragment.linux"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeXmpWorkerFilesNativeFragmentLinux = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.xmp.worker.files.native.fragment.macosx"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeXmpWorkerFilesNativeFragmentMacosx = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.xmp.worker.files.native.fragment.win"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeXmpWorkerFilesNativeFragmentWin = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.commons.osgi.wrapper.simple-jndi"] as AnyObject?) {
                
                case let .success(value): _result.comDayCommonsOsgiWrapperSimpleJndi = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.cq-authhandler"] as AnyObject?) {
                
                case let .success(value): _result.comDayCqCqAuthhandler = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.cq-compat-configupdate"] as AnyObject?) {
                
                case let .success(value): _result.comDayCqCqCompatConfigupdate = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.cq-licensebranding"] as AnyObject?) {
                
                case let .success(value): _result.comDayCqCqLicensebranding = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.cq-notifcation-impl"] as AnyObject?) {
                
                case let .success(value): _result.comDayCqCqNotifcationImpl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.cq-replication-audit"] as AnyObject?) {
                
                case let .success(value): _result.comDayCqCqReplicationAudit = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.cq-search-ext"] as AnyObject?) {
                
                case let .success(value): _result.comDayCqCqSearchExt = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.dam.cq-dam-annotation-print"] as AnyObject?) {
                
                case let .success(value): _result.comDayCqDamCqDamAnnotationPrint = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.dam.cq-dam-asset-usage"] as AnyObject?) {
                
                case let .success(value): _result.comDayCqDamCqDamAssetUsage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.dam.cq-dam-s7dam"] as AnyObject?) {
                
                case let .success(value): _result.comDayCqDamCqDamS7dam = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.dam.cq-dam-similaritysearch"] as AnyObject?) {
                
                case let .success(value): _result.comDayCqDamCqDamSimilaritysearch = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.dam.dam-webdav-support"] as AnyObject?) {
                
                case let .success(value): _result.comDayCqDamDamWebdavSupport = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.pre-upgrade-tasks"] as AnyObject?) {
                
                case let .success(value): _result.comDayCqPreUpgradeTasks = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.replication.extensions"] as AnyObject?) {
                
                case let .success(value): _result.comDayCqReplicationExtensions = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.wcm.cq-msm-core"] as AnyObject?) {
                
                case let .success(value): _result.comDayCqWcmCqMsmCore = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.wcm.cq-wcm-translation"] as AnyObject?) {
                
                case let .success(value): _result.comDayCqWcmCqWcmTranslation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["day-commons-jrawio"] as AnyObject?) {
                
                case let .success(value): _result.dayCommonsJrawio = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.aries.jmx.whiteboard"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheAriesJmxWhiteboard = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.http.sslfilter"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpSslfilter = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.org.apache.felix.threaddump"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixOrgApacheFelixThreaddump = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.webconsole.plugins.ds"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixWebconsolePluginsDs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.webconsole.plugins.event"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixWebconsolePluginsEvent = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.webconsole.plugins.memoryusage"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixWebconsolePluginsMemoryusage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.webconsole.plugins.packageadmin"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixWebconsolePluginsPackageadmin = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.jackrabbit.oak-auth-ldap"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheJackrabbitOakAuthLdap = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.jackrabbit.oak-segment-tar"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheJackrabbitOakSegmentTar = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.jackrabbit.oak-solr-osgi"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheJackrabbitOakSolrOsgi = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.bundleresource.impl"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingBundleresourceImpl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.commons.fsclassloader"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingCommonsFsclassloader = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.commons.log.webconsole"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingCommonsLogWebconsole = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.datasource"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingDatasource = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.discovery.base"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingDiscoveryBase = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.discovery.oak"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingDiscoveryOak = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.discovery.support"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingDiscoverySupport = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.distribution.api"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingDistributionApi = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.distribution.core"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingDistributionCore = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.extensions.webconsolesecurityprovider"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingExtensionsWebconsolesecurityprovider = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.hc.webconsole"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingHcWebconsole = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.installer.console"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingInstallerConsole = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.installer.provider.file"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingInstallerProviderFile = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.installer.provider.jcr"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingInstallerProviderJcr = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.jcr.davex"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingJcrDavex = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.jcr.resourcesecurity"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingJcrResourcesecurity = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.jmx.provider"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingJmxProvider = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.launchpad.installer"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingLaunchpadInstaller = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.models.impl"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingModelsImpl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.repoinit.parser"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingRepoinitParser = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.resource.inventory"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingResourceInventory = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.resourceresolver"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingResourceresolver = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.scripting.javascript"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingScriptingJavascript = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.scripting.jst"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingScriptingJst = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.scripting.sightly.js.provider"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingScriptingSightlyJsProvider = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.scripting.sightly.models.provider"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingScriptingSightlyModelsProvider = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.security"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingSecurity = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.servlets.compat"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingServletsCompat = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.servlets.get"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingServletsGet = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.startupfilter.disabler"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingStartupfilterDisabler = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.tracer"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingTracer = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["we.retail.client.app.core"] as AnyObject?) {
                
                case let .success(value): _result.weRetailClientAppCore = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo() : instance as! ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties() : instance as! ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"] as AnyObject?) {
                
                case let .success(value): _result.path = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo() : instance as! ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties() : instance as! ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.id"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderId = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo() : instance as! ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplProperties() : instance as! ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.ims.client.secret"] as AnyObject?) {
                
                case let .success(value): _result.authImsClientSecret = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["customizer.type"] as AnyObject?) {
                
                case let .success(value): _result.customizerType = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo() : instance as! ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorProperties() : instance as! ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.id"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderId = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthImsImplIMSProviderImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthImsImplIMSProviderImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthImsImplIMSProviderImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthImsImplIMSProviderImplInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthImsImplIMSProviderImplInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthImsImplIMSProviderImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthImsImplIMSProviderImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthImsImplIMSProviderImplInfo() : instance as! ComAdobeGraniteAuthImsImplIMSProviderImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteAuthImsImplIMSProviderImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthImsImplIMSProviderImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthImsImplIMSProviderImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthImsImplIMSProviderImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthImsImplIMSProviderImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthImsImplIMSProviderImplProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthImsImplIMSProviderImplProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthImsImplIMSProviderImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthImsImplIMSProviderImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthImsImplIMSProviderImplProperties() : instance as! ComAdobeGraniteAuthImsImplIMSProviderImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.id"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.ims.authorization.url"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderImsAuthorizationUrl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.ims.token.url"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderImsTokenUrl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.ims.profile.url"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderImsProfileUrl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["oauth.provider.ims.extended.details.urls"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderImsExtendedDetailsUrls = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.ims.validate.token.url"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderImsValidateTokenUrl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.ims.session.property"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderImsSessionProperty = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.ims.service.token.client.id"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderImsServiceTokenClientId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.ims.service.token.client.secret"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderImsServiceTokenClientSecret = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.ims.service.token"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderImsServiceToken = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["ims.org.ref"] as AnyObject?) {
                
                case let .success(value): _result.imsOrgRef = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["ims.group.mapping"] as AnyObject?) {
                
                case let .success(value): _result.imsGroupMapping = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.provider.ims.only.license.group"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderImsOnlyLicenseGroup = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthImsImplIMSProviderImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo() : instance as! ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties() : instance as! ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.configmanager.ims.configid"] as AnyObject?) {
                
                case let .success(value): _result.oauthConfigmanagerImsConfigid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["ims.owningEntity"] as AnyObject?) {
                
                case let .success(value): _result.imsOwningEntity = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["aem.instanceId"] as AnyObject?) {
                
                case let .success(value): _result.aemInstanceId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["ims.serviceCode"] as AnyObject?) {
                
                case let .success(value): _result.imsServiceCode = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthImsInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthImsInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthImsInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthImsInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthImsInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthImsInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthImsInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthImsInfo() : instance as! ComAdobeGraniteAuthImsInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteAuthImsProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthImsInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthImsProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthImsProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthImsProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthImsProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthImsProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthImsProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthImsProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthImsProperties() : instance as! ComAdobeGraniteAuthImsProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["configid"] as AnyObject?) {
                
                case let .success(value): _result.configid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scope"] as AnyObject?) {
                
                case let .success(value): _result.scope = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthImsProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthOauthAccesstokenProviderInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthAccesstokenProviderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthOauthAccesstokenProviderInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthAccesstokenProviderInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthOauthAccesstokenProviderInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthAccesstokenProviderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthOauthAccesstokenProviderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthOauthAccesstokenProviderInfo() : instance as! ComAdobeGraniteAuthOauthAccesstokenProviderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteAuthOauthAccesstokenProviderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthOauthAccesstokenProviderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthOauthAccesstokenProviderProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthAccesstokenProviderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthOauthAccesstokenProviderProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthAccesstokenProviderProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthOauthAccesstokenProviderProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthAccesstokenProviderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthOauthAccesstokenProviderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthOauthAccesstokenProviderProperties() : instance as! ComAdobeGraniteAuthOauthAccesstokenProviderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.token.provider.title"] as AnyObject?) {
                
                case let .success(value): _result.authTokenProviderTitle = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["auth.token.provider.default.claims"] as AnyObject?) {
                
                case let .success(value): _result.authTokenProviderDefaultClaims = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.token.provider.endpoint"] as AnyObject?) {
                
                case let .success(value): _result.authTokenProviderEndpoint = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.access.token.request"] as AnyObject?) {
                
                case let .success(value): _result.authAccessTokenRequest = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.token.provider.keypair.alias"] as AnyObject?) {
                
                case let .success(value): _result.authTokenProviderKeypairAlias = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["auth.token.provider.conn.timeout"] as AnyObject?) {
                
                case let .success(value): _result.authTokenProviderConnTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["auth.token.provider.so.timeout"] as AnyObject?) {
                
                case let .success(value): _result.authTokenProviderSoTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.token.provider.client.id"] as AnyObject?) {
                
                case let .success(value): _result.authTokenProviderClientId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.token.provider.scope"] as AnyObject?) {
                
                case let .success(value): _result.authTokenProviderScope = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["auth.token.provider.reuse.access.token"] as AnyObject?) {
                
                case let .success(value): _result.authTokenProviderReuseAccessToken = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["auth.token.provider.relaxed.ssl"] as AnyObject?) {
                
                case let .success(value): _result.authTokenProviderRelaxedSsl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["token.request.customizer.type"] as AnyObject?) {
                
                case let .success(value): _result.tokenRequestCustomizerType = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.token.validator.type"] as AnyObject?) {
                
                case let .success(value): _result.authTokenValidatorType = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthOauthAccesstokenProviderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo() : instance as! ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties() : instance as! ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"] as AnyObject?) {
                
                case let .success(value): _result.path = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["oauth.clientIds.allowed"] as AnyObject?) {
                
                case let .success(value): _result.oauthClientIdsAllowed = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["auth.bearer.sync.ims"] as AnyObject?) {
                
                case let .success(value): _result.authBearerSyncIms = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.tokenRequestParameter"] as AnyObject?) {
                
                case let .success(value): _result.authTokenRequestParameter = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.bearer.configid"] as AnyObject?) {
                
                case let .success(value): _result.oauthBearerConfigid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.jwt.support"] as AnyObject?) {
                
                case let .success(value): _result.oauthJwtSupport = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo() : instance as! ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties() : instance as! ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.token.validator.type"] as AnyObject?) {
                
                case let .success(value): _result.authTokenValidatorType = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo() : instance as! ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties() : instance as! ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.id"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderId = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthOauthImplGithubProviderImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplGithubProviderImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthOauthImplGithubProviderImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplGithubProviderImplInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthOauthImplGithubProviderImplInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplGithubProviderImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthOauthImplGithubProviderImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthOauthImplGithubProviderImplInfo() : instance as! ComAdobeGraniteAuthOauthImplGithubProviderImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteAuthOauthImplGithubProviderImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthOauthImplGithubProviderImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthOauthImplGithubProviderImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplGithubProviderImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthOauthImplGithubProviderImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplGithubProviderImplProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthOauthImplGithubProviderImplProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplGithubProviderImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthOauthImplGithubProviderImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthOauthImplGithubProviderImplProperties() : instance as! ComAdobeGraniteAuthOauthImplGithubProviderImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.id"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.github.authorization.url"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderGithubAuthorizationUrl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.github.token.url"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderGithubTokenUrl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.github.profile.url"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderGithubProfileUrl = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthOauthImplGithubProviderImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthOauthImplGraniteProviderInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplGraniteProviderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthOauthImplGraniteProviderInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplGraniteProviderInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthOauthImplGraniteProviderInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplGraniteProviderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthOauthImplGraniteProviderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthOauthImplGraniteProviderInfo() : instance as! ComAdobeGraniteAuthOauthImplGraniteProviderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteAuthOauthImplGraniteProviderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthOauthImplGraniteProviderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthOauthImplGraniteProviderProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplGraniteProviderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthOauthImplGraniteProviderProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplGraniteProviderProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthOauthImplGraniteProviderProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplGraniteProviderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthOauthImplGraniteProviderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthOauthImplGraniteProviderProperties() : instance as! ComAdobeGraniteAuthOauthImplGraniteProviderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.id"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.granite.authorization.url"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderGraniteAuthorizationUrl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.granite.token.url"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderGraniteTokenUrl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.granite.profile.url"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderGraniteProfileUrl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.granite.extended.details.urls"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderGraniteExtendedDetailsUrls = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthOauthImplGraniteProviderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo() : instance as! ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo() : instance as! ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties() : instance as! ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.cookie.login.timeout"] as AnyObject?) {
                
                case let .success(value): _result.oauthCookieLoginTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.cookie.max.age"] as AnyObject?) {
                
                case let .success(value): _result.oauthCookieMaxAge = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties() : instance as! ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.cookie.login.timeout"] as AnyObject?) {
                
                case let .success(value): _result.oauthCookieLoginTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.cookie.max.age"] as AnyObject?) {
                
                case let .success(value): _result.oauthCookieMaxAge = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo() : instance as! ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties() : instance as! ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"] as AnyObject?) {
                
                case let .success(value): _result.path = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo() : instance as! ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties() : instance as! ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.id"] as AnyObject?) {
                
                case let .success(value): _result.oauthProviderId = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthOauthProviderInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthProviderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthOauthProviderInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthProviderInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthOauthProviderInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthProviderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthOauthProviderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthOauthProviderInfo() : instance as! ComAdobeGraniteAuthOauthProviderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteAuthOauthProviderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthOauthProviderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthOauthProviderProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthProviderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthOauthProviderProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthProviderProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthOauthProviderProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthProviderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthOauthProviderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthOauthProviderProperties() : instance as! ComAdobeGraniteAuthOauthProviderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.config.id"] as AnyObject?) {
                
                case let .success(value): _result.oauthConfigId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.client.id"] as AnyObject?) {
                
                case let .success(value): _result.oauthClientId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.client.secret"] as AnyObject?) {
                
                case let .success(value): _result.oauthClientSecret = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["oauth.scope"] as AnyObject?) {
                
                case let .success(value): _result.oauthScope = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.config.provider.id"] as AnyObject?) {
                
                case let .success(value): _result.oauthConfigProviderId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.create.users"] as AnyObject?) {
                
                case let .success(value): _result.oauthCreateUsers = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.userid.property"] as AnyObject?) {
                
                case let .success(value): _result.oauthUseridProperty = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["force.strict.username.matching"] as AnyObject?) {
                
                case let .success(value): _result.forceStrictUsernameMatching = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.encode.userids"] as AnyObject?) {
                
                case let .success(value): _result.oauthEncodeUserids = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.hash.userids"] as AnyObject?) {
                
                case let .success(value): _result.oauthHashUserids = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.callBackUrl"] as AnyObject?) {
                
                case let .success(value): _result.oauthCallBackUrl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.access.token.persist"] as AnyObject?) {
                
                case let .success(value): _result.oauthAccessTokenPersist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.access.token.persist.cookie"] as AnyObject?) {
                
                case let .success(value): _result.oauthAccessTokenPersistCookie = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.csrf.state.protection"] as AnyObject?) {
                
                case let .success(value): _result.oauthCsrfStateProtection = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.redirect.request.params"] as AnyObject?) {
                
                case let .success(value): _result.oauthRedirectRequestParams = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.config.siblings.allow"] as AnyObject?) {
                
                case let .success(value): _result.oauthConfigSiblingsAllow = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthOauthProviderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo() : instance as! ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties() : instance as! ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["supportedPaths"] as AnyObject?) {
                
                case let .success(value): _result.supportedPaths = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo() : instance as! ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties() : instance as! ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["path"] as AnyObject?) {
                
                case let .success(value): _result.path = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["idpUrl"] as AnyObject?) {
                
                case let .success(value): _result.idpUrl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["idpCertAlias"] as AnyObject?) {
                
                case let .success(value): _result.idpCertAlias = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["idpHttpRedirect"] as AnyObject?) {
                
                case let .success(value): _result.idpHttpRedirect = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceProviderEntityId"] as AnyObject?) {
                
                case let .success(value): _result.serviceProviderEntityId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["assertionConsumerServiceURL"] as AnyObject?) {
                
                case let .success(value): _result.assertionConsumerServiceURL = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["spPrivateKeyAlias"] as AnyObject?) {
                
                case let .success(value): _result.spPrivateKeyAlias = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["keyStorePassword"] as AnyObject?) {
                
                case let .success(value): _result.keyStorePassword = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["defaultRedirectUrl"] as AnyObject?) {
                
                case let .success(value): _result.defaultRedirectUrl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["userIDAttribute"] as AnyObject?) {
                
                case let .success(value): _result.userIDAttribute = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["useEncryption"] as AnyObject?) {
                
                case let .success(value): _result.useEncryption = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["createUser"] as AnyObject?) {
                
                case let .success(value): _result.createUser = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["userIntermediatePath"] as AnyObject?) {
                
                case let .success(value): _result.userIntermediatePath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["addGroupMemberships"] as AnyObject?) {
                
                case let .success(value): _result.addGroupMemberships = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["groupMembershipAttribute"] as AnyObject?) {
                
                case let .success(value): _result.groupMembershipAttribute = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["defaultGroups"] as AnyObject?) {
                
                case let .success(value): _result.defaultGroups = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["nameIdFormat"] as AnyObject?) {
                
                case let .success(value): _result.nameIdFormat = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["synchronizeAttributes"] as AnyObject?) {
                
                case let .success(value): _result.synchronizeAttributes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["handleLogout"] as AnyObject?) {
                
                case let .success(value): _result.handleLogout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["logoutUrl"] as AnyObject?) {
                
                case let .success(value): _result.logoutUrl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["clockTolerance"] as AnyObject?) {
                
                case let .success(value): _result.clockTolerance = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["digestMethod"] as AnyObject?) {
                
                case let .success(value): _result.digestMethod = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["signatureMethod"] as AnyObject?) {
                
                case let .success(value): _result.signatureMethod = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["identitySyncType"] as AnyObject?) {
                
                case let .success(value): _result.identitySyncType = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["idpIdentifier"] as AnyObject?) {
                
                case let .success(value): _result.idpIdentifier = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo() : instance as! ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties() : instance as! ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"] as AnyObject?) {
                
                case let .success(value): _result.path = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jaas.controlFlag"] as AnyObject?) {
                
                case let .success(value): _result.jaasControlFlag = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jaas.realmName"] as AnyObject?) {
                
                case let .success(value): _result.jaasRealmName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["jaas.ranking"] as AnyObject?) {
                
                case let .success(value): _result.jaasRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["headers"] as AnyObject?) {
                
                case let .success(value): _result.headers = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cookies"] as AnyObject?) {
                
                case let .success(value): _result.cookies = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["parameters"] as AnyObject?) {
                
                case let .success(value): _result.parameters = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["usermap"] as AnyObject?) {
                
                case let .success(value): _result.usermap = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["format"] as AnyObject?) {
                
                case let .success(value): _result.format = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["trustedCredentialsAttribute"] as AnyObject?) {
                
                case let .success(value): _result.trustedCredentialsAttribute = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo() : instance as! ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties() : instance as! ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["minimum.code.cache.size"] as AnyObject?) {
                
                case let .success(value): _result.minimumCodeCacheSize = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo() : instance as! ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties() : instance as! ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo() : instance as! ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties() : instance as! ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo() : instance as! ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties() : instance as! ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["ignored.bundles"] as AnyObject?) {
                
                case let .success(value): _result.ignoredBundles = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo() : instance as! ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties() : instance as! ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["max.queued.jobs"] as AnyObject?) {
                
                case let .success(value): _result.maxQueuedJobs = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo() : instance as! ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties() : instance as! ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo() : instance as! ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties() : instance as! ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo() : instance as! ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties() : instance as! ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo() : instance as! ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties() : instance as! ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo() : instance as! ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties() : instance as! ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo() : instance as! ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties() : instance as! ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["replicate.comment.resourceTypes"] as AnyObject?) {
                
                case let .success(value): _result.replicateCommentResourceTypes = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo() : instance as! ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties() : instance as! ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["compatgroups"] as AnyObject?) {
                
                case let .success(value): _result.compatgroups = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteCompatrouterImplRoutingConfigInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteCompatrouterImplRoutingConfigInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteCompatrouterImplRoutingConfigInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteCompatrouterImplRoutingConfigInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteCompatrouterImplRoutingConfigInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteCompatrouterImplRoutingConfigInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteCompatrouterImplRoutingConfigInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteCompatrouterImplRoutingConfigInfo() : instance as! ComAdobeGraniteCompatrouterImplRoutingConfigInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteCompatrouterImplRoutingConfigProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteCompatrouterImplRoutingConfigInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteCompatrouterImplRoutingConfigProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteCompatrouterImplRoutingConfigProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteCompatrouterImplRoutingConfigProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteCompatrouterImplRoutingConfigProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteCompatrouterImplRoutingConfigProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteCompatrouterImplRoutingConfigProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteCompatrouterImplRoutingConfigProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteCompatrouterImplRoutingConfigProperties() : instance as! ComAdobeGraniteCompatrouterImplRoutingConfigProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["compatPath"] as AnyObject?) {
                
                case let .success(value): _result.compatPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["newPath"] as AnyObject?) {
                
                case let .success(value): _result.newPath = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteCompatrouterImplRoutingConfigProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo() : instance as! ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties() : instance as! ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["group"] as AnyObject?) {
                
                case let .success(value): _result.group = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["ids"] as AnyObject?) {
                
                case let .success(value): _result.ids = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo() : instance as! ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties() : instance as! ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fallbackPaths"] as AnyObject?) {
                
                case let .success(value): _result.fallbackPaths = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteContexthubImplContextHubImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteContexthubImplContextHubImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteContexthubImplContextHubImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteContexthubImplContextHubImplInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteContexthubImplContextHubImplInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteContexthubImplContextHubImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteContexthubImplContextHubImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteContexthubImplContextHubImplInfo() : instance as! ComAdobeGraniteContexthubImplContextHubImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteContexthubImplContextHubImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteContexthubImplContextHubImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteContexthubImplContextHubImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteContexthubImplContextHubImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteContexthubImplContextHubImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteContexthubImplContextHubImplProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteContexthubImplContextHubImplProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteContexthubImplContextHubImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteContexthubImplContextHubImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteContexthubImplContextHubImplProperties() : instance as! ComAdobeGraniteContexthubImplContextHubImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["com.adobe.granite.contexthub.silent_mode"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteContexthubSilentMode = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["com.adobe.granite.contexthub.show_ui"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteContexthubShowUi = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteContexthubImplContextHubImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteCorsImplCORSPolicyImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteCorsImplCORSPolicyImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteCorsImplCORSPolicyImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteCorsImplCORSPolicyImplInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteCorsImplCORSPolicyImplInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteCorsImplCORSPolicyImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteCorsImplCORSPolicyImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteCorsImplCORSPolicyImplInfo() : instance as! ComAdobeGraniteCorsImplCORSPolicyImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteCorsImplCORSPolicyImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteCorsImplCORSPolicyImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteCorsImplCORSPolicyImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteCorsImplCORSPolicyImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteCorsImplCORSPolicyImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteCorsImplCORSPolicyImplProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteCorsImplCORSPolicyImplProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteCorsImplCORSPolicyImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteCorsImplCORSPolicyImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteCorsImplCORSPolicyImplProperties() : instance as! ComAdobeGraniteCorsImplCORSPolicyImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["alloworigin"] as AnyObject?) {
                
                case let .success(value): _result.alloworigin = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["alloworiginregexp"] as AnyObject?) {
                
                case let .success(value): _result.alloworiginregexp = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["allowedpaths"] as AnyObject?) {
                
                case let .success(value): _result.allowedpaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["exposedheaders"] as AnyObject?) {
                
                case let .success(value): _result.exposedheaders = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxage"] as AnyObject?) {
                
                case let .success(value): _result.maxage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["supportedheaders"] as AnyObject?) {
                
                case let .success(value): _result.supportedheaders = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["supportedmethods"] as AnyObject?) {
                
                case let .success(value): _result.supportedmethods = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["supportscredentials"] as AnyObject?) {
                
                case let .success(value): _result.supportscredentials = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteCorsImplCORSPolicyImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteCsrfImplCSRFFilterInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteCsrfImplCSRFFilterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteCsrfImplCSRFFilterInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteCsrfImplCSRFFilterInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteCsrfImplCSRFFilterInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteCsrfImplCSRFFilterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteCsrfImplCSRFFilterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteCsrfImplCSRFFilterInfo() : instance as! ComAdobeGraniteCsrfImplCSRFFilterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteCsrfImplCSRFFilterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteCsrfImplCSRFFilterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteCsrfImplCSRFFilterProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteCsrfImplCSRFFilterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteCsrfImplCSRFFilterProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteCsrfImplCSRFFilterProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteCsrfImplCSRFFilterProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteCsrfImplCSRFFilterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteCsrfImplCSRFFilterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteCsrfImplCSRFFilterProperties() : instance as! ComAdobeGraniteCsrfImplCSRFFilterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["filter.methods"] as AnyObject?) {
                
                case let .success(value): _result.filterMethods = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["filter.enable.safe.user.agents"] as AnyObject?) {
                
                case let .success(value): _result.filterEnableSafeUserAgents = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["filter.safe.user.agents"] as AnyObject?) {
                
                case let .success(value): _result.filterSafeUserAgents = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["filter.excluded.paths"] as AnyObject?) {
                
                case let .success(value): _result.filterExcludedPaths = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteCsrfImplCSRFFilterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteCsrfImplCSRFServletInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteCsrfImplCSRFServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteCsrfImplCSRFServletInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteCsrfImplCSRFServletInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteCsrfImplCSRFServletInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteCsrfImplCSRFServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteCsrfImplCSRFServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteCsrfImplCSRFServletInfo() : instance as! ComAdobeGraniteCsrfImplCSRFServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteCsrfImplCSRFServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteCsrfImplCSRFServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteCsrfImplCSRFServletProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteCsrfImplCSRFServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteCsrfImplCSRFServletProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteCsrfImplCSRFServletProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteCsrfImplCSRFServletProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteCsrfImplCSRFServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteCsrfImplCSRFServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteCsrfImplCSRFServletProperties() : instance as! ComAdobeGraniteCsrfImplCSRFServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["csrf.token.expires.in"] as AnyObject?) {
                
                case let .success(value): _result.csrfTokenExpiresIn = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.auth.requirements"] as AnyObject?) {
                
                case let .success(value): _result.slingAuthRequirements = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteCsrfImplCSRFServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo() : instance as! ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties() : instance as! ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["username"] as AnyObject?) {
                
                case let .success(value): _result.username = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["encryptedPassword"] as AnyObject?) {
                
                case let .success(value): _result.encryptedPassword = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo() : instance as! ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties() : instance as! ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["agentName"] as AnyObject?) {
                
                case let .success(value): _result.agentName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["diffPath"] as AnyObject?) {
                
                case let .success(value): _result.diffPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["observedPath"] as AnyObject?) {
                
                case let .success(value): _result.observedPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceName"] as AnyObject?) {
                
                case let .success(value): _result.serviceName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["propertyNames"] as AnyObject?) {
                
                case let .success(value): _result.propertyNames = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["distributionDelay"] as AnyObject?) {
                
                case let .success(value): _result.distributionDelay = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceUser.target"] as AnyObject?) {
                
                case let .success(value): _result.serviceUserTarget = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo() : instance as! ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties() : instance as! ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["diffPath"] as AnyObject?) {
                
                case let .success(value): _result.diffPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceName"] as AnyObject?) {
                
                case let .success(value): _result.serviceName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceUser.target"] as AnyObject?) {
                
                case let .success(value): _result.serviceUserTarget = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo() : instance as! ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties() : instance as! ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["importer.name"] as AnyObject?) {
                
                case let .success(value): _result.importerName = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo() : instance as! ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties() : instance as! ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["providerName"] as AnyObject?) {
                
                case let .success(value): _result.providerName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["forward.requests"] as AnyObject?) {
                
                case let .success(value): _result.forwardRequests = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo() : instance as! ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties() : instance as! ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["forward.requests"] as AnyObject?) {
                
                case let .success(value): _result.forwardRequests = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo() : instance as! ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties() : instance as! ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceName"] as AnyObject?) {
                
                case let .success(value): _result.serviceName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["userId"] as AnyObject?) {
                
                case let .success(value): _result.userId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["accessTokenProvider.target"] as AnyObject?) {
                
                case let .success(value): _result.accessTokenProviderTarget = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo() : instance as! ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties() : instance as! ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["feature.name"] as AnyObject?) {
                
                case let .success(value): _result.featureName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["feature.description"] as AnyObject?) {
                
                case let .success(value): _result.featureDescription = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["http.header.name"] as AnyObject?) {
                
                case let .success(value): _result.httpHeaderName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["http.header.valuepattern"] as AnyObject?) {
                
                case let .success(value): _result.httpHeaderValuepattern = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteFragsImplRandomFeatureInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteFragsImplRandomFeatureInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteFragsImplRandomFeatureInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteFragsImplRandomFeatureInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteFragsImplRandomFeatureInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteFragsImplRandomFeatureInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteFragsImplRandomFeatureInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteFragsImplRandomFeatureInfo() : instance as! ComAdobeGraniteFragsImplRandomFeatureInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteFragsImplRandomFeatureProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteFragsImplRandomFeatureInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteFragsImplRandomFeatureProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteFragsImplRandomFeatureProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteFragsImplRandomFeatureProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteFragsImplRandomFeatureProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteFragsImplRandomFeatureProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteFragsImplRandomFeatureProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteFragsImplRandomFeatureProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteFragsImplRandomFeatureProperties() : instance as! ComAdobeGraniteFragsImplRandomFeatureProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["feature.name"] as AnyObject?) {
                
                case let .success(value): _result.featureName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["feature.description"] as AnyObject?) {
                
                case let .success(value): _result.featureDescription = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["active.percentage"] as AnyObject?) {
                
                case let .success(value): _result.activePercentage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cookie.name"] as AnyObject?) {
                
                case let .success(value): _result.cookieName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cookie.maxAge"] as AnyObject?) {
                
                case let .success(value): _result.cookieMaxAge = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteFragsImplRandomFeatureProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteHttpcacheFileFileCacheStoreInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteHttpcacheFileFileCacheStoreInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteHttpcacheFileFileCacheStoreInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteHttpcacheFileFileCacheStoreInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteHttpcacheFileFileCacheStoreInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteHttpcacheFileFileCacheStoreInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteHttpcacheFileFileCacheStoreInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteHttpcacheFileFileCacheStoreInfo() : instance as! ComAdobeGraniteHttpcacheFileFileCacheStoreInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteHttpcacheFileFileCacheStoreProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteHttpcacheFileFileCacheStoreInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteHttpcacheFileFileCacheStoreProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteHttpcacheFileFileCacheStoreProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteHttpcacheFileFileCacheStoreProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteHttpcacheFileFileCacheStoreProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteHttpcacheFileFileCacheStoreProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteHttpcacheFileFileCacheStoreProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteHttpcacheFileFileCacheStoreProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteHttpcacheFileFileCacheStoreProperties() : instance as! ComAdobeGraniteHttpcacheFileFileCacheStoreProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.httpcache.file.documentRoot"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteHttpcacheFileDocumentRoot = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.httpcache.file.includeHost"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteHttpcacheFileIncludeHost = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteHttpcacheFileFileCacheStoreProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo() : instance as! ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties() : instance as! ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["com.adobe.granite.httpcache.url.paths"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteHttpcacheUrlPaths = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo() : instance as! ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties() : instance as! ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["pseudo.patterns"] as AnyObject?) {
                
                case let .success(value): _result.pseudoPatterns = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo() : instance as! ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties() : instance as! ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["security.preferences.name"] as AnyObject?) {
                
                case let .success(value): _result.securityPreferencesName = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteInfocollectorInfoCollectorInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteInfocollectorInfoCollectorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteInfocollectorInfoCollectorInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteInfocollectorInfoCollectorInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteInfocollectorInfoCollectorInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteInfocollectorInfoCollectorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteInfocollectorInfoCollectorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteInfocollectorInfoCollectorInfo() : instance as! ComAdobeGraniteInfocollectorInfoCollectorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteInfocollectorInfoCollectorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteInfocollectorInfoCollectorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteInfocollectorInfoCollectorProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteInfocollectorInfoCollectorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteInfocollectorInfoCollectorProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteInfocollectorInfoCollectorProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteInfocollectorInfoCollectorProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteInfocollectorInfoCollectorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteInfocollectorInfoCollectorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteInfocollectorInfoCollectorProperties() : instance as! ComAdobeGraniteInfocollectorInfoCollectorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["granite.infocollector.includeThreadDumps"] as AnyObject?) {
                
                case let .success(value): _result.graniteInfocollectorIncludeThreadDumps = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["granite.infocollector.includeHeapDump"] as AnyObject?) {
                
                case let .success(value): _result.graniteInfocollectorIncludeHeapDump = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteInfocollectorInfoCollectorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo() : instance as! ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"] as AnyObject?) {
                
                case let .success(value): _result.additionalProperties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties() : instance as! ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.granite.jetty.ssl.port"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteJettySslPort = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.jetty.ssl.keystore.user"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteJettySslKeystoreUser = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.jetty.ssl.keystore.password"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteJettySslKeystorePassword = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["com.adobe.granite.jetty.ssl.ciphersuites.excluded"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteJettySslCiphersuitesExcluded = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["com.adobe.granite.jetty.ssl.ciphersuites.included"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteJettySslCiphersuitesIncluded = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["com.adobe.granite.jetty.ssl.client.certificate"] as AnyObject?) {
                
                case let .success(value): _result.comAdobeGraniteJettySslClientCertificate = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteLicenseImplLicenseCheckFilterInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteLicenseImplLicenseCheckFilterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteLicenseImplLicenseCheckFilterInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteLicenseImplLicenseCheckFilterInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteLicenseImplLicenseCheckFilterInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteLicenseImplLicenseCheckFilterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteLicenseImplLicenseCheckFilterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteLicenseImplLicenseCheckFilterInfo() : instance as! ComAdobeGraniteLicenseImplLicenseCheckFilterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteLicenseImplLicenseCheckFilterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteLicenseImplLicenseCheckFilterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteLicenseImplLicenseCheckFilterProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteLicenseImplLicenseCheckFilterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteLicenseImplLicenseCheckFilterProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteLicenseImplLicenseCheckFilterProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteLicenseImplLicenseCheckFilterProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteLicenseImplLicenseCheckFilterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteLicenseImplLicenseCheckFilterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteLicenseImplLicenseCheckFilterProperties() : instance as! ComAdobeGraniteLicenseImplLicenseCheckFilterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["checkInternval"] as AnyObject?) {
                
                case let .success(value): _result.checkInternval = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["excludeIds"] as AnyObject?) {
                
                case let .success(value): _result.excludeIds = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["encryptPing"] as AnyObject?) {
                
                case let .success(value): _result.encryptPing = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteLicenseImplLicenseCheckFilterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteLoggingImplLogAnalyserImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteLoggingImplLogAnalyserImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteLoggingImplLogAnalyserImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteLoggingImplLogAnalyserImplInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteLoggingImplLogAnalyserImplInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteLoggingImplLogAnalyserImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteLoggingImplLogAnalyserImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteLoggingImplLogAnalyserImplInfo() : instance as! ComAdobeGraniteLoggingImplLogAnalyserImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteLoggingImplLogAnalyserImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteLoggingImplLogAnalyserImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteLoggingImplLogAnalyserImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteLoggingImplLogAnalyserImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteLoggingImplLogAnalyserImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteLoggingImplLogAnalyserImplProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteLoggingImplLogAnalyserImplProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteLoggingImplLogAnalyserImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteLoggingImplLogAnalyserImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteLoggingImplLogAnalyserImplProperties() : instance as! ComAdobeGraniteLoggingImplLogAnalyserImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["messages.queue.size"] as AnyObject?) {
                
                case let .success(value): _result.messagesQueueSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["logger.config"] as AnyObject?) {
                
                case let .success(value): _result.loggerConfig = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["messages.size"] as AnyObject?) {
                
                case let .success(value): _result.messagesSize = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteLoggingImplLogAnalyserImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo() : instance as! ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties() : instance as! ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo() : instance as! ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties() : instance as! ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["granite.maintenance.mandatory"] as AnyObject?) {
                
                case let .success(value): _result.graniteMaintenanceMandatory = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["job.topics"] as AnyObject?) {
                
                case let .success(value): _result.jobTopics = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo() : instance as! ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties() : instance as! ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["job.topics"] as AnyObject?) {
                
                case let .success(value): _result.jobTopics = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo() : instance as! ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties() : instance as! ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["full.gc.days"] as AnyObject?) {
                
                case let .success(value): _result.fullGcDays = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteMonitoringImplScriptConfigImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteMonitoringImplScriptConfigImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteMonitoringImplScriptConfigImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteMonitoringImplScriptConfigImplInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteMonitoringImplScriptConfigImplInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteMonitoringImplScriptConfigImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteMonitoringImplScriptConfigImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteMonitoringImplScriptConfigImplInfo() : instance as! ComAdobeGraniteMonitoringImplScriptConfigImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteMonitoringImplScriptConfigImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteMonitoringImplScriptConfigImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteMonitoringImplScriptConfigImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteMonitoringImplScriptConfigImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteMonitoringImplScriptConfigImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteMonitoringImplScriptConfigImplProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteMonitoringImplScriptConfigImplProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteMonitoringImplScriptConfigImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteMonitoringImplScriptConfigImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteMonitoringImplScriptConfigImplProperties() : instance as! ComAdobeGraniteMonitoringImplScriptConfigImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["script.filename"] as AnyObject?) {
                
                case let .success(value): _result.scriptFilename = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["script.display"] as AnyObject?) {
                
                case let .success(value): _result.scriptDisplay = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["script.path"] as AnyObject?) {
                
                case let .success(value): _result.scriptPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["script.platform"] as AnyObject?) {
                
                case let .success(value): _result.scriptPlatform = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["interval"] as AnyObject?) {
                
                case let .success(value): _result.interval = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jmxdomain"] as AnyObject?) {
                
                case let .success(value): _result.jmxdomain = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteMonitoringImplScriptConfigImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo() : instance as! ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties() : instance as! ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"] as AnyObject?) {
                
                case let .success(value): _result.path = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jaas.controlFlag"] as AnyObject?) {
                
                case let .success(value): _result.jaasControlFlag = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jaas.realmName"] as AnyObject?) {
                
                case let .success(value): _result.jaasRealmName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["jaas.ranking"] as AnyObject?) {
                
                case let .success(value): _result.jaasRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.offline.validation"] as AnyObject?) {
                
                case let .success(value): _result.oauthOfflineValidation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo() : instance as! ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties() : instance as! ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"] as AnyObject?) {
                
                case let .success(value): _result.schedulerExpression = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo() : instance as! ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties() : instance as! ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.client.revocation.active"] as AnyObject?) {
                
                case let .success(value): _result.oauthClientRevocationActive = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo() : instance as! ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties() : instance as! ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.paths"] as AnyObject?) {
                
                case let .success(value): _result.slingServletPaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.revocation.active"] as AnyObject?) {
                
                case let .success(value): _result.oauthRevocationActive = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo() : instance as! ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties() : instance as! ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.issuer"] as AnyObject?) {
                
                case let .success(value): _result.oauthIssuer = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.access.token.expires.in"] as AnyObject?) {
                
                case let .success(value): _result.oauthAccessTokenExpiresIn = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["osgi.http.whiteboard.servlet.pattern"] as AnyObject?) {
                
                case let .success(value): _result.osgiHttpWhiteboardServletPattern = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["osgi.http.whiteboard.context.select"] as AnyObject?) {
                
                case let .success(value): _result.osgiHttpWhiteboardContextSelect = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo() : instance as! ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties() : instance as! ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.token.revocation.active"] as AnyObject?) {
                
                case let .success(value): _result.oauthTokenRevocationActive = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo() : instance as! ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties() : instance as! ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["offloading.transporter"] as AnyObject?) {
                
                case let .success(value): _result.offloadingTransporter = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["offloading.cleanup.payload"] as AnyObject?) {
                
                case let .success(value): _result.offloadingCleanupPayload = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo() : instance as! ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties() : instance as! ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["offloading.jobcloner.enabled"] as AnyObject?) {
                
                case let .success(value): _result.offloadingJobclonerEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo() : instance as! ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties() : instance as! ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["offloading.offloader.enabled"] as AnyObject?) {
                
                case let .success(value): _result.offloadingOffloaderEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo() : instance as! ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties() : instance as! ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["offloading.agentmanager.enabled"] as AnyObject?) {
                
                case let .success(value): _result.offloadingAgentmanagerEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo() : instance as! ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties() : instance as! ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["default.transport.agent-to-worker.prefix"] as AnyObject?) {
                
                case let .success(value): _result.defaultTransportAgentToWorkerPrefix = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["default.transport.agent-to-master.prefix"] as AnyObject?) {
                
                case let .success(value): _result.defaultTransportAgentToMasterPrefix = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["default.transport.input.package"] as AnyObject?) {
                
                case let .success(value): _result.defaultTransportInputPackage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["default.transport.output.package"] as AnyObject?) {
                
                case let .success(value): _result.defaultTransportOutputPackage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["default.transport.replication.synchronous"] as AnyObject?) {
                
                case let .success(value): _result.defaultTransportReplicationSynchronous = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["default.transport.contentpackage"] as AnyObject?) {
                
                case let .success(value): _result.defaultTransportContentpackage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["offloading.transporter.default.enabled"] as AnyObject?) {
                
                case let .success(value): _result.offloadingTransporterDefaultEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo() : instance as! ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties() : instance as! ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["omnisearch.suggestion.requiretext.min"] as AnyObject?) {
                
                case let .success(value): _result.omnisearchSuggestionRequiretextMin = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["omnisearch.suggestion.spellcheck.require"] as AnyObject?) {
                
                case let .success(value): _result.omnisearchSuggestionSpellcheckRequire = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOptoutImplOptOutServiceImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOptoutImplOptOutServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOptoutImplOptOutServiceImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOptoutImplOptOutServiceImplInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteOptoutImplOptOutServiceImplInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteOptoutImplOptOutServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOptoutImplOptOutServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOptoutImplOptOutServiceImplInfo() : instance as! ComAdobeGraniteOptoutImplOptOutServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteOptoutImplOptOutServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOptoutImplOptOutServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteOptoutImplOptOutServiceImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteOptoutImplOptOutServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteOptoutImplOptOutServiceImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteOptoutImplOptOutServiceImplProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteOptoutImplOptOutServiceImplProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteOptoutImplOptOutServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteOptoutImplOptOutServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteOptoutImplOptOutServiceImplProperties() : instance as! ComAdobeGraniteOptoutImplOptOutServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["optout.cookies"] as AnyObject?) {
                
                case let .success(value): _result.optoutCookies = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["optout.headers"] as AnyObject?) {
                
                case let .success(value): _result.optoutHeaders = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["optout.whitelist.cookies"] as AnyObject?) {
                
                case let .success(value): _result.optoutWhitelistCookies = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteOptoutImplOptOutServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo() : instance as! ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties() : instance as! ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["indexing.critical.threshold"] as AnyObject?) {
                
                case let .success(value): _result.indexingCriticalThreshold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["indexing.warn.threshold"] as AnyObject?) {
                
                case let .success(value): _result.indexingWarnThreshold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo() : instance as! ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties() : instance as! ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["large.index.critical.threshold"] as AnyObject?) {
                
                case let .success(value): _result.largeIndexCriticalThreshold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["large.index.warn.threshold"] as AnyObject?) {
                
                case let .success(value): _result.largeIndexWarnThreshold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo() : instance as! ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties() : instance as! ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo() : instance as! ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties() : instance as! ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["getPeriod"] as AnyObject?) {
                
                case let .success(value): _result.getPeriod = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo() : instance as! ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties() : instance as! ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo() : instance as! ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties() : instance as! ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["number.of.retries.allowed"] as AnyObject?) {
                
                case let .success(value): _result.numberOfRetriesAllowed = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo() : instance as! ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties() : instance as! ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo() : instance as! ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties() : instance as! ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo() : instance as! ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties() : instance as! ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["exclude.search.path"] as AnyObject?) {
                
                case let .success(value): _result.excludeSearchPath = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo() : instance as! ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckProperties() : instance as! ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo() : instance as! ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties() : instance as! ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo() : instance as! ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties() : instance as! ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["account.logins"] as AnyObject?) {
                
                case let .success(value): _result.accountLogins = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["console.logins"] as AnyObject?) {
                
                case let .success(value): _result.consoleLogins = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo() : instance as! ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties() : instance as! ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["disk.space.warn.threshold"] as AnyObject?) {
                
                case let .success(value): _result.diskSpaceWarnThreshold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["disk.space.error.threshold"] as AnyObject?) {
                
                case let .success(value): _result.diskSpaceErrorThreshold = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo() : instance as! ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties() : instance as! ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRepositoryImplCommitStatsConfigInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryImplCommitStatsConfigInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRepositoryImplCommitStatsConfigInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRepositoryImplCommitStatsConfigInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteRepositoryImplCommitStatsConfigInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryImplCommitStatsConfigInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRepositoryImplCommitStatsConfigInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRepositoryImplCommitStatsConfigInfo() : instance as! ComAdobeGraniteRepositoryImplCommitStatsConfigInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteRepositoryImplCommitStatsConfigProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRepositoryImplCommitStatsConfigInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRepositoryImplCommitStatsConfigProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryImplCommitStatsConfigProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRepositoryImplCommitStatsConfigProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRepositoryImplCommitStatsConfigProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteRepositoryImplCommitStatsConfigProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryImplCommitStatsConfigProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRepositoryImplCommitStatsConfigProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRepositoryImplCommitStatsConfigProperties() : instance as! ComAdobeGraniteRepositoryImplCommitStatsConfigProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["intervalSeconds"] as AnyObject?) {
                
                case let .success(value): _result.intervalSeconds = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["commitsPerIntervalThreshold"] as AnyObject?) {
                
                case let .success(value): _result.commitsPerIntervalThreshold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxLocationLength"] as AnyObject?) {
                
                case let .success(value): _result.maxLocationLength = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxDetailsShown"] as AnyObject?) {
                
                case let .success(value): _result.maxDetailsShown = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["minDetailsPercentage"] as AnyObject?) {
                
                case let .success(value): _result.minDetailsPercentage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["threadMatchers"] as AnyObject?) {
                
                case let .success(value): _result.threadMatchers = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxGreedyDepth"] as AnyObject?) {
                
                case let .success(value): _result.maxGreedyDepth = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["greedyStackMatchers"] as AnyObject?) {
                
                case let .success(value): _result.greedyStackMatchers = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["stackFilters"] as AnyObject?) {
                
                case let .success(value): _result.stackFilters = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["stackMatchers"] as AnyObject?) {
                
                case let .success(value): _result.stackMatchers = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["stackCategorizers"] as AnyObject?) {
                
                case let .success(value): _result.stackCategorizers = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["stackShorteners"] as AnyObject?) {
                
                case let .success(value): _result.stackShorteners = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRepositoryImplCommitStatsConfigProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRepositoryServiceUserConfigurationInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryServiceUserConfigurationInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRepositoryServiceUserConfigurationInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRepositoryServiceUserConfigurationInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteRepositoryServiceUserConfigurationInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryServiceUserConfigurationInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRepositoryServiceUserConfigurationInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRepositoryServiceUserConfigurationInfo() : instance as! ComAdobeGraniteRepositoryServiceUserConfigurationInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteRepositoryServiceUserConfigurationProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRepositoryServiceUserConfigurationInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRepositoryServiceUserConfigurationProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryServiceUserConfigurationProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRepositoryServiceUserConfigurationProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRepositoryServiceUserConfigurationProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteRepositoryServiceUserConfigurationProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryServiceUserConfigurationProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRepositoryServiceUserConfigurationProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRepositoryServiceUserConfigurationProperties() : instance as! ComAdobeGraniteRepositoryServiceUserConfigurationProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["serviceusers.simpleSubjectPopulation"] as AnyObject?) {
                
                case let .success(value): _result.serviceusersSimpleSubjectPopulation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["serviceusers.list"] as AnyObject?) {
                
                case let .success(value): _result.serviceusersList = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRepositoryServiceUserConfigurationProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo() : instance as! ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties() : instance as! ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo() : instance as! ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties() : instance as! ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["types"] as AnyObject?) {
                
                case let .success(value): _result.types = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo() : instance as! ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties() : instance as! ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["provider.root"] as AnyObject?) {
                
                case let .success(value): _result.providerRoot = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo() : instance as! ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties() : instance as! ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["mime.allowEmpty"] as AnyObject?) {
                
                case let .success(value): _result.mimeAllowEmpty = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["mime.allowed"] as AnyObject?) {
                
                case let .success(value): _result.mimeAllowed = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo() : instance as! ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties() : instance as! ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["provider.roots"] as AnyObject?) {
                
                case let .success(value): _result.providerRoots = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRestImplServletDefaultGETServletInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRestImplServletDefaultGETServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRestImplServletDefaultGETServletInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRestImplServletDefaultGETServletInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteRestImplServletDefaultGETServletInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteRestImplServletDefaultGETServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRestImplServletDefaultGETServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRestImplServletDefaultGETServletInfo() : instance as! ComAdobeGraniteRestImplServletDefaultGETServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteRestImplServletDefaultGETServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRestImplServletDefaultGETServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteRestImplServletDefaultGETServletProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteRestImplServletDefaultGETServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteRestImplServletDefaultGETServletProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteRestImplServletDefaultGETServletProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteRestImplServletDefaultGETServletProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteRestImplServletDefaultGETServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteRestImplServletDefaultGETServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteRestImplServletDefaultGETServletProperties() : instance as! ComAdobeGraniteRestImplServletDefaultGETServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["default.limit"] as AnyObject?) {
                
                case let .success(value): _result.defaultLimit = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["use.absolute.uri"] as AnyObject?) {
                
                case let .success(value): _result.useAbsoluteUri = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteRestImplServletDefaultGETServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo() : instance as! ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSProperties() : instance as! ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteSecurityUserUserPropertiesServiceInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteSecurityUserUserPropertiesServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteSecurityUserUserPropertiesServiceInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteSecurityUserUserPropertiesServiceInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteSecurityUserUserPropertiesServiceInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteSecurityUserUserPropertiesServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteSecurityUserUserPropertiesServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteSecurityUserUserPropertiesServiceInfo() : instance as! ComAdobeGraniteSecurityUserUserPropertiesServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteSecurityUserUserPropertiesServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteSecurityUserUserPropertiesServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteSecurityUserUserPropertiesServiceProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteSecurityUserUserPropertiesServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteSecurityUserUserPropertiesServiceProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteSecurityUserUserPropertiesServiceProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteSecurityUserUserPropertiesServiceProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteSecurityUserUserPropertiesServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteSecurityUserUserPropertiesServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteSecurityUserUserPropertiesServiceProperties() : instance as! ComAdobeGraniteSecurityUserUserPropertiesServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["adapter.condition"] as AnyObject?) {
                
                case let .success(value): _result.adapterCondition = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["granite.userproperties.nodetypes"] as AnyObject?) {
                
                case let .success(value): _result.graniteUserpropertiesNodetypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["granite.userproperties.resourcetypes"] as AnyObject?) {
                
                case let .success(value): _result.graniteUserpropertiesResourcetypes = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteSecurityUserUserPropertiesServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo() : instance as! ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties() : instance as! ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["group2member.relationship.outgoing"] as AnyObject?) {
                
                case let .success(value): _result.group2memberRelationshipOutgoing = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["group2member.excluded.outgoing"] as AnyObject?) {
                
                case let .success(value): _result.group2memberExcludedOutgoing = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["group2member.relationship.incoming"] as AnyObject?) {
                
                case let .success(value): _result.group2memberRelationshipIncoming = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["group2member.excluded.incoming"] as AnyObject?) {
                
                case let .success(value): _result.group2memberExcludedIncoming = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo() : instance as! ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties() : instance as! ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"] as AnyObject?) {
                
                case let .success(value): _result.schedulerExpression = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jmx.objectname"] as AnyObject?) {
                
                case let .success(value): _result.jmxObjectname = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo() : instance as! ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties() : instance as! ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["adapter.condition"] as AnyObject?) {
                
                case let .success(value): _result.adapterCondition = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo() : instance as! ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties() : instance as! ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["archiving.enabled"] as AnyObject?) {
                
                case let .success(value): _result.archivingEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"] as AnyObject?) {
                
                case let .success(value): _result.schedulerExpression = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["archive.since.days.completed"] as AnyObject?) {
                
                case let .success(value): _result.archiveSinceDaysCompleted = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo() : instance as! ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties() : instance as! ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["purgeCompleted"] as AnyObject?) {
                
                case let .success(value): _result.purgeCompleted = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["completedAge"] as AnyObject?) {
                
                case let .success(value): _result.completedAge = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["purgeActive"] as AnyObject?) {
                
                case let .success(value): _result.purgeActive = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["activeAge"] as AnyObject?) {
                
                case let .success(value): _result.activeAge = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["saveThreshold"] as AnyObject?) {
                
                case let .success(value): _result.saveThreshold = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo() : instance as! ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties() : instance as! ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["adapter.condition"] as AnyObject?) {
                
                case let .success(value): _result.adapterCondition = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["taskmanager.admingroups"] as AnyObject?) {
                
                case let .success(value): _result.taskmanagerAdmingroups = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteThreaddumpThreadDumpCollectorInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteThreaddumpThreadDumpCollectorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteThreaddumpThreadDumpCollectorInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteThreaddumpThreadDumpCollectorInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteThreaddumpThreadDumpCollectorInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteThreaddumpThreadDumpCollectorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteThreaddumpThreadDumpCollectorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteThreaddumpThreadDumpCollectorInfo() : instance as! ComAdobeGraniteThreaddumpThreadDumpCollectorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteThreaddumpThreadDumpCollectorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteThreaddumpThreadDumpCollectorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteThreaddumpThreadDumpCollectorProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteThreaddumpThreadDumpCollectorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteThreaddumpThreadDumpCollectorProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteThreaddumpThreadDumpCollectorProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteThreaddumpThreadDumpCollectorProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteThreaddumpThreadDumpCollectorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteThreaddumpThreadDumpCollectorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteThreaddumpThreadDumpCollectorProperties() : instance as! ComAdobeGraniteThreaddumpThreadDumpCollectorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["scheduler.period"] as AnyObject?) {
                
                case let .success(value): _result.schedulerPeriod = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["scheduler.runOn"] as AnyObject?) {
                
                case let .success(value): _result.schedulerRunOn = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["granite.threaddump.enabled"] as AnyObject?) {
                
                case let .success(value): _result.graniteThreaddumpEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["granite.threaddump.dumpsPerFile"] as AnyObject?) {
                
                case let .success(value): _result.graniteThreaddumpDumpsPerFile = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["granite.threaddump.enableGzipCompression"] as AnyObject?) {
                
                case let .success(value): _result.graniteThreaddumpEnableGzipCompression = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["granite.threaddump.enableDirectoriesCompression"] as AnyObject?) {
                
                case let .success(value): _result.graniteThreaddumpEnableDirectoriesCompression = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["granite.threaddump.enableJStack"] as AnyObject?) {
                
                case let .success(value): _result.graniteThreaddumpEnableJStack = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["granite.threaddump.maxBackupDays"] as AnyObject?) {
                
                case let .success(value): _result.graniteThreaddumpMaxBackupDays = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["granite.threaddump.backupCleanTrigger"] as AnyObject?) {
                
                case let .success(value): _result.graniteThreaddumpBackupCleanTrigger = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteThreaddumpThreadDumpCollectorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo() : instance as! ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties() : instance as! ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["translationFactory"] as AnyObject?) {
                
                case let .success(value): _result.translationFactory = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["defaultConnectorLabel"] as AnyObject?) {
                
                case let .success(value): _result.defaultConnectorLabel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["defaultConnectorAttribution"] as AnyObject?) {
                
                case let .success(value): _result.defaultConnectorAttribution = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["defaultConnectorWorkspaceId"] as AnyObject?) {
                
                case let .success(value): _result.defaultConnectorWorkspaceId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["defaultConnectorSubscriptionKey"] as AnyObject?) {
                
                case let .success(value): _result.defaultConnectorSubscriptionKey = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["languageMapLocation"] as AnyObject?) {
                
                case let .success(value): _result.languageMapLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["categoryMapLocation"] as AnyObject?) {
                
                case let .success(value): _result.categoryMapLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["retryAttempts"] as AnyObject?) {
                
                case let .success(value): _result.retryAttempts = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["timeoutCount"] as AnyObject?) {
                
                case let .success(value): _result.timeoutCount = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo() : instance as! ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties() : instance as! ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["defaultConnectorName"] as AnyObject?) {
                
                case let .success(value): _result.defaultConnectorName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["defaultCategory"] as AnyObject?) {
                
                case let .success(value): _result.defaultCategory = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo() : instance as! ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties() : instance as! ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmllibmanager.timing"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerTiming = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["htmllibmanager.debug.init.js"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerDebugInitJs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmllibmanager.minify"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerMinify = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmllibmanager.debug"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerDebug = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmllibmanager.gzip"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerGzip = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["htmllibmanager.maxDataUriSize"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerMaxDataUriSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["htmllibmanager.maxage"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerMaxage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmllibmanager.forceCQUrlInfo"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerForceCQUrlInfo = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["htmllibmanager.defaultthemename"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerDefaultthemename = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["htmllibmanager.defaultuserthemename"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerDefaultuserthemename = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["htmllibmanager.clientmanager"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerClientmanager = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["htmllibmanager.path.list"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerPathList = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["htmllibmanager.excluded.path.list"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerExcludedPathList = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["htmllibmanager.processor.js"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerProcessorJs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["htmllibmanager.processor.css"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerProcessorCss = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["htmllibmanager.longcache.patterns"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerLongcachePatterns = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["htmllibmanager.longcache.format"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerLongcacheFormat = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmllibmanager.useFileSystemOutputCache"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerUseFileSystemOutputCache = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["htmllibmanager.fileSystemOutputCacheLocation"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerFileSystemOutputCacheLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["htmllibmanager.disable.replacement"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerDisableReplacement = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo() : instance as! ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties() : instance as! ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo() : instance as! ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties() : instance as! ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["granite.workflow.WorkflowPublishEventService.enabled"] as AnyObject?) {
                
                case let .success(value): _result.graniteWorkflowWorkflowPublishEventServiceEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo() : instance as! ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties() : instance as! ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["bucketSize"] as AnyObject?) {
                
                case let .success(value): _result.bucketSize = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo() : instance as! ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties() : instance as! ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["default.timeout"] as AnyObject?) {
                
                case let .success(value): _result.defaultTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["max.timeout"] as AnyObject?) {
                
                case let .success(value): _result.maxTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["default.period"] as AnyObject?) {
                
                case let .success(value): _result.defaultPeriod = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteWorkflowCoreJobJobHandlerInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCoreJobJobHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteWorkflowCoreJobJobHandlerInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCoreJobJobHandlerInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteWorkflowCoreJobJobHandlerInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCoreJobJobHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteWorkflowCoreJobJobHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteWorkflowCoreJobJobHandlerInfo() : instance as! ComAdobeGraniteWorkflowCoreJobJobHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteWorkflowCoreJobJobHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteWorkflowCoreJobJobHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteWorkflowCoreJobJobHandlerProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCoreJobJobHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteWorkflowCoreJobJobHandlerProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCoreJobJobHandlerProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteWorkflowCoreJobJobHandlerProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCoreJobJobHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteWorkflowCoreJobJobHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteWorkflowCoreJobJobHandlerProperties() : instance as! ComAdobeGraniteWorkflowCoreJobJobHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["job.topics"] as AnyObject?) {
                
                case let .success(value): _result.jobTopics = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["allow.self.process.termination"] as AnyObject?) {
                
                case let .success(value): _result.allowSelfProcessTermination = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteWorkflowCoreJobJobHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo() : instance as! ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties() : instance as! ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["job.topics"] as AnyObject?) {
                
                case let .success(value): _result.jobTopics = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteWorkflowCorePayloadMapCacheInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCorePayloadMapCacheInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteWorkflowCorePayloadMapCacheInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCorePayloadMapCacheInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteWorkflowCorePayloadMapCacheInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCorePayloadMapCacheInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteWorkflowCorePayloadMapCacheInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteWorkflowCorePayloadMapCacheInfo() : instance as! ComAdobeGraniteWorkflowCorePayloadMapCacheInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteWorkflowCorePayloadMapCacheProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteWorkflowCorePayloadMapCacheInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteWorkflowCorePayloadMapCacheProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCorePayloadMapCacheProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteWorkflowCorePayloadMapCacheProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCorePayloadMapCacheProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteWorkflowCorePayloadMapCacheProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCorePayloadMapCacheProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteWorkflowCorePayloadMapCacheProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteWorkflowCorePayloadMapCacheProperties() : instance as! ComAdobeGraniteWorkflowCorePayloadMapCacheProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["getSystemWorkflowModels"] as AnyObject?) {
                
                case let .success(value): _result.getSystemWorkflowModels = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["getPackageRootPath"] as AnyObject?) {
                
                case let .success(value): _result.getPackageRootPath = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteWorkflowCorePayloadMapCacheProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo() : instance as! ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties() : instance as! ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["payload.move.white.list"] as AnyObject?) {
                
                case let .success(value): _result.payloadMoveWhiteList = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["payload.move.handle.from.workflow.process"] as AnyObject?) {
                
                case let .success(value): _result.payloadMoveHandleFromWorkflowProcess = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteWorkflowCoreWorkflowConfigInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCoreWorkflowConfigInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteWorkflowCoreWorkflowConfigInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCoreWorkflowConfigInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteWorkflowCoreWorkflowConfigInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCoreWorkflowConfigInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteWorkflowCoreWorkflowConfigInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteWorkflowCoreWorkflowConfigInfo() : instance as! ComAdobeGraniteWorkflowCoreWorkflowConfigInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteWorkflowCoreWorkflowConfigProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteWorkflowCoreWorkflowConfigInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteWorkflowCoreWorkflowConfigProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCoreWorkflowConfigProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteWorkflowCoreWorkflowConfigProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCoreWorkflowConfigProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteWorkflowCoreWorkflowConfigProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCoreWorkflowConfigProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteWorkflowCoreWorkflowConfigProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteWorkflowCoreWorkflowConfigProperties() : instance as! ComAdobeGraniteWorkflowCoreWorkflowConfigProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.workflow.config.workflow.packages.root.path"] as AnyObject?) {
                
                case let .success(value): _result.cqWorkflowConfigWorkflowPackagesRootPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.workflow.config.workflow.process.legacy.mode"] as AnyObject?) {
                
                case let .success(value): _result.cqWorkflowConfigWorkflowProcessLegacyMode = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.workflow.config.allow.locking"] as AnyObject?) {
                
                case let .success(value): _result.cqWorkflowConfigAllowLocking = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteWorkflowCoreWorkflowConfigProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo() : instance as! ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties() : instance as! ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["granite.workflowinbox.sort.propertyName"] as AnyObject?) {
                
                case let .success(value): _result.graniteWorkflowinboxSortPropertyName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["granite.workflowinbox.sort.order"] as AnyObject?) {
                
                case let .success(value): _result.graniteWorkflowinboxSortOrder = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.workflow.job.retry"] as AnyObject?) {
                
                case let .success(value): _result.cqWorkflowJobRetry = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.workflow.superuser"] as AnyObject?) {
                
                case let .success(value): _result.cqWorkflowSuperuser = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["granite.workflow.inboxQuerySize"] as AnyObject?) {
                
                case let .success(value): _result.graniteWorkflowInboxQuerySize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["granite.workflow.adminUserGroupFilter"] as AnyObject?) {
                
                case let .success(value): _result.graniteWorkflowAdminUserGroupFilter = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["granite.workflow.enforceWorkitemAssigneePermissions"] as AnyObject?) {
                
                case let .success(value): _result.graniteWorkflowEnforceWorkitemAssigneePermissions = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["granite.workflow.enforceWorkflowInitiatorPermissions"] as AnyObject?) {
                
                case let .success(value): _result.graniteWorkflowEnforceWorkflowInitiatorPermissions = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["granite.workflow.injectTenantIdInJobTopics"] as AnyObject?) {
                
                case let .success(value): _result.graniteWorkflowInjectTenantIdInJobTopics = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["granite.workflow.maxPurgeSaveThreshold"] as AnyObject?) {
                
                case let .success(value): _result.graniteWorkflowMaxPurgeSaveThreshold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["granite.workflow.maxPurgeQueryCount"] as AnyObject?) {
                
                case let .success(value): _result.graniteWorkflowMaxPurgeQueryCount = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteWorkflowPurgeSchedulerInfo]
        Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowPurgeSchedulerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteWorkflowPurgeSchedulerInfo]> in
            return Decoders.decode(clazz: [ComAdobeGraniteWorkflowPurgeSchedulerInfo].self, source: source)
        }

        // Decoder for ComAdobeGraniteWorkflowPurgeSchedulerInfo
        Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowPurgeSchedulerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteWorkflowPurgeSchedulerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteWorkflowPurgeSchedulerInfo() : instance as! ComAdobeGraniteWorkflowPurgeSchedulerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeGraniteWorkflowPurgeSchedulerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteWorkflowPurgeSchedulerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeGraniteWorkflowPurgeSchedulerProperties]
        Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowPurgeSchedulerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeGraniteWorkflowPurgeSchedulerProperties]> in
            return Decoders.decode(clazz: [ComAdobeGraniteWorkflowPurgeSchedulerProperties].self, source: source)
        }

        // Decoder for ComAdobeGraniteWorkflowPurgeSchedulerProperties
        Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowPurgeSchedulerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeGraniteWorkflowPurgeSchedulerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeGraniteWorkflowPurgeSchedulerProperties() : instance as! ComAdobeGraniteWorkflowPurgeSchedulerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduledpurge.name"] as AnyObject?) {
                
                case let .success(value): _result.scheduledpurgeName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["scheduledpurge.workflowStatus"] as AnyObject?) {
                
                case let .success(value): _result.scheduledpurgeWorkflowStatus = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["scheduledpurge.modelIds"] as AnyObject?) {
                
                case let .success(value): _result.scheduledpurgeModelIds = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["scheduledpurge.daysold"] as AnyObject?) {
                
                case let .success(value): _result.scheduledpurgeDaysold = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeGraniteWorkflowPurgeSchedulerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeOctopusNcommBootstrapInfo]
        Decoders.addDecoder(clazz: [ComAdobeOctopusNcommBootstrapInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeOctopusNcommBootstrapInfo]> in
            return Decoders.decode(clazz: [ComAdobeOctopusNcommBootstrapInfo].self, source: source)
        }

        // Decoder for ComAdobeOctopusNcommBootstrapInfo
        Decoders.addDecoder(clazz: ComAdobeOctopusNcommBootstrapInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeOctopusNcommBootstrapInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeOctopusNcommBootstrapInfo() : instance as! ComAdobeOctopusNcommBootstrapInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeOctopusNcommBootstrapProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeOctopusNcommBootstrapInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeOctopusNcommBootstrapProperties]
        Decoders.addDecoder(clazz: [ComAdobeOctopusNcommBootstrapProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeOctopusNcommBootstrapProperties]> in
            return Decoders.decode(clazz: [ComAdobeOctopusNcommBootstrapProperties].self, source: source)
        }

        // Decoder for ComAdobeOctopusNcommBootstrapProperties
        Decoders.addDecoder(clazz: ComAdobeOctopusNcommBootstrapProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeOctopusNcommBootstrapProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeOctopusNcommBootstrapProperties() : instance as! ComAdobeOctopusNcommBootstrapProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxConnections"] as AnyObject?) {
                
                case let .success(value): _result.maxConnections = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxRequests"] as AnyObject?) {
                
                case let .success(value): _result.maxRequests = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["requestTimeout"] as AnyObject?) {
                
                case let .success(value): _result.requestTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["requestRetries"] as AnyObject?) {
                
                case let .success(value): _result.requestRetries = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["launchTimeout"] as AnyObject?) {
                
                case let .success(value): _result.launchTimeout = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeOctopusNcommBootstrapProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo]
        Decoders.addDecoder(clazz: [ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo]> in
            return Decoders.decode(clazz: [ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo].self, source: source)
        }

        // Decoder for ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo
        Decoders.addDecoder(clazz: ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo() : instance as! ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties]
        Decoders.addDecoder(clazz: [ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties]> in
            return Decoders.decode(clazz: [ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties].self, source: source)
        }

        // Decoder for ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties
        Decoders.addDecoder(clazz: ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties() : instance as! ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["communities.integration.livefyre.sling.event.filter"] as AnyObject?) {
                
                case let .success(value): _result.communitiesIntegrationLivefyreSlingEventFilter = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo]
        Decoders.addDecoder(clazz: [ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo]> in
            return Decoders.decode(clazz: [ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo].self, source: source)
        }

        // Decoder for ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo
        Decoders.addDecoder(clazz: ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo() : instance as! ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties]
        Decoders.addDecoder(clazz: [ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties]> in
            return Decoders.decode(clazz: [ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties].self, source: source)
        }

        // Decoder for ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties
        Decoders.addDecoder(clazz: ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties() : instance as! ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["maxConnections"] as AnyObject?) {
                
                case let .success(value): _result.maxConnections = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["maxRequests"] as AnyObject?) {
                
                case let .success(value): _result.maxRequests = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["requestTimeout"] as AnyObject?) {
                
                case let .success(value): _result.requestTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["logDir"] as AnyObject?) {
                
                case let .success(value): _result.logDir = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo]
        Decoders.addDecoder(clazz: [ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo]> in
            return Decoders.decode(clazz: [ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo].self, source: source)
        }

        // Decoder for ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo
        Decoders.addDecoder(clazz: ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo() : instance as! ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties]
        Decoders.addDecoder(clazz: [ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties]> in
            return Decoders.decode(clazz: [ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties].self, source: source)
        }

        // Decoder for ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties
        Decoders.addDecoder(clazz: ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties() : instance as! ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jdbc.driver.class"] as AnyObject?) {
                
                case let .success(value): _result.jdbcDriverClass = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jdbc.connection.uri"] as AnyObject?) {
                
                case let .success(value): _result.jdbcConnectionUri = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jdbc.username"] as AnyObject?) {
                
                case let .success(value): _result.jdbcUsername = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jdbc.password"] as AnyObject?) {
                
                case let .success(value): _result.jdbcPassword = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jdbc.validation.query"] as AnyObject?) {
                
                case let .success(value): _result.jdbcValidationQuery = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["default.readonly"] as AnyObject?) {
                
                case let .success(value): _result.defaultReadonly = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["default.autocommit"] as AnyObject?) {
                
                case let .success(value): _result.defaultAutocommit = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["pool.size"] as AnyObject?) {
                
                case let .success(value): _result.poolSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["pool.max.wait.msec"] as AnyObject?) {
                
                case let .success(value): _result.poolMaxWaitMsec = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["datasource.name"] as AnyObject?) {
                
                case let .success(value): _result.datasourceName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["datasource.svc.properties"] as AnyObject?) {
                
                case let .success(value): _result.datasourceSvcProperties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCommonsHttpclientInfo]
        Decoders.addDecoder(clazz: [ComDayCommonsHttpclientInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCommonsHttpclientInfo]> in
            return Decoders.decode(clazz: [ComDayCommonsHttpclientInfo].self, source: source)
        }

        // Decoder for ComDayCommonsHttpclientInfo
        Decoders.addDecoder(clazz: ComDayCommonsHttpclientInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCommonsHttpclientInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCommonsHttpclientInfo() : instance as! ComDayCommonsHttpclientInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCommonsHttpclientProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCommonsHttpclientInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCommonsHttpclientProperties]
        Decoders.addDecoder(clazz: [ComDayCommonsHttpclientProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCommonsHttpclientProperties]> in
            return Decoders.decode(clazz: [ComDayCommonsHttpclientProperties].self, source: source)
        }

        // Decoder for ComDayCommonsHttpclientProperties
        Decoders.addDecoder(clazz: ComDayCommonsHttpclientProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCommonsHttpclientProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCommonsHttpclientProperties() : instance as! ComDayCommonsHttpclientProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["proxy.enabled"] as AnyObject?) {
                
                case let .success(value): _result.proxyEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["proxy.host"] as AnyObject?) {
                
                case let .success(value): _result.proxyHost = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["proxy.user"] as AnyObject?) {
                
                case let .success(value): _result.proxyUser = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["proxy.password"] as AnyObject?) {
                
                case let .success(value): _result.proxyPassword = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["proxy.ntlm.host"] as AnyObject?) {
                
                case let .success(value): _result.proxyNtlmHost = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["proxy.ntlm.domain"] as AnyObject?) {
                
                case let .success(value): _result.proxyNtlmDomain = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["proxy.exceptions"] as AnyObject?) {
                
                case let .success(value): _result.proxyExceptions = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCommonsHttpclientProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo]
        Decoders.addDecoder(clazz: [ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo]> in
            return Decoders.decode(clazz: [ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo].self, source: source)
        }

        // Decoder for ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo
        Decoders.addDecoder(clazz: ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo() : instance as! ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties]
        Decoders.addDecoder(clazz: [ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties]> in
            return Decoders.decode(clazz: [ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties].self, source: source)
        }

        // Decoder for ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties
        Decoders.addDecoder(clazz: ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties() : instance as! ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.store.listener.additionalStorePaths"] as AnyObject?) {
                
                case let .success(value): _result.cqStoreListenerAdditionalStorePaths = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo]
        Decoders.addDecoder(clazz: [ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo]> in
            return Decoders.decode(clazz: [ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo].self, source: source)
        }

        // Decoder for ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo
        Decoders.addDecoder(clazz: ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo() : instance as! ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties]
        Decoders.addDecoder(clazz: [ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties]> in
            return Decoders.decode(clazz: [ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties].self, source: source)
        }

        // Decoder for ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties
        Decoders.addDecoder(clazz: ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties() : instance as! ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["allowed.paths"] as AnyObject?) {
                
                case let .success(value): _result.allowedPaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.analytics.saint.exporter.pagesize"] as AnyObject?) {
                
                case let .success(value): _result.cqAnalyticsSaintExporterPagesize = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo]
        Decoders.addDecoder(clazz: [ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo]> in
            return Decoders.decode(clazz: [ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo].self, source: source)
        }

        // Decoder for ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo
        Decoders.addDecoder(clazz: ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo() : instance as! ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties]
        Decoders.addDecoder(clazz: [ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties]> in
            return Decoders.decode(clazz: [ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties].self, source: source)
        }

        // Decoder for ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties
        Decoders.addDecoder(clazz: ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties() : instance as! ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["report.fetch.attempts"] as AnyObject?) {
                
                case let .success(value): _result.reportFetchAttempts = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["report.fetch.delay"] as AnyObject?) {
                
                case let .success(value): _result.reportFetchDelay = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo]
        Decoders.addDecoder(clazz: [ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo]> in
            return Decoders.decode(clazz: [ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo].self, source: source)
        }

        // Decoder for ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo
        Decoders.addDecoder(clazz: ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo() : instance as! ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties]
        Decoders.addDecoder(clazz: [ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties]> in
            return Decoders.decode(clazz: [ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties].self, source: source)
        }

        // Decoder for ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties
        Decoders.addDecoder(clazz: ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties() : instance as! ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.analytics.adapterfactory.contextstores"] as AnyObject?) {
                
                case let .success(value): _result.cqAnalyticsAdapterfactoryContextstores = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo].self, source: source)
        }

        // Decoder for ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo
        Decoders.addDecoder(clazz: ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo() : instance as! ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"] as AnyObject?) {
                
                case let .success(value): _result.additionalProperties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties].self, source: source)
        }

        // Decoder for ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties
        Decoders.addDecoder(clazz: ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties() : instance as! ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.analytics.sitecatalyst.service.datacenter.url"] as AnyObject?) {
                
                case let .success(value): _result.cqAnalyticsSitecatalystServiceDatacenterUrl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["devhostnamepatterns"] as AnyObject?) {
                
                case let .success(value): _result.devhostnamepatterns = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["connection.timeout"] as AnyObject?) {
                
                case let .success(value): _result.connectionTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["socket.timeout"] as AnyObject?) {
                
                case let .success(value): _result.socketTimeout = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo]
        Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo]> in
            return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo].self, source: source)
        }

        // Decoder for ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo
        Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo() : instance as! ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties]
        Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties]> in
            return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties].self, source: source)
        }

        // Decoder for ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties
        Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties() : instance as! ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.analytics.testandtarget.accountoptionsupdater.enabled"] as AnyObject?) {
                
                case let .success(value): _result.cqAnalyticsTestandtargetAccountoptionsupdaterEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo]
        Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo]> in
            return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo].self, source: source)
        }

        // Decoder for ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo
        Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo() : instance as! ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties]
        Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties]> in
            return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties].self, source: source)
        }

        // Decoder for ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties
        Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties() : instance as! ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.analytics.testandtarget.deleteauthoractivitylistener.enabled"] as AnyObject?) {
                
                case let .success(value): _result.cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo]
        Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo]> in
            return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo].self, source: source)
        }

        // Decoder for ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo
        Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo() : instance as! ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties]
        Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties]> in
            return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties].self, source: source)
        }

        // Decoder for ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties
        Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties() : instance as! ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled"] as AnyObject?) {
                
                case let .success(value): _result.cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo]
        Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo]> in
            return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo].self, source: source)
        }

        // Decoder for ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo
        Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo() : instance as! ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties]
        Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties]> in
            return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties].self, source: source)
        }

        // Decoder for ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties
        Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties() : instance as! ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.analytics.testandtarget.segmentimporter.enabled"] as AnyObject?) {
                
                case let .success(value): _result.cqAnalyticsTestandtargetSegmentimporterEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo].self, source: source)
        }

        // Decoder for ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo
        Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo() : instance as! ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties].self, source: source)
        }

        // Decoder for ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties
        Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties() : instance as! ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["endpointUri"] as AnyObject?) {
                
                case let .success(value): _result.endpointUri = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["connectionTimeout"] as AnyObject?) {
                
                case let .success(value): _result.connectionTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["socketTimeout"] as AnyObject?) {
                
                case let .success(value): _result.socketTimeout = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo].self, source: source)
        }

        // Decoder for ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo
        Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo() : instance as! ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties].self, source: source)
        }

        // Decoder for ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties
        Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties() : instance as! ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["testandtarget.endpoint.url"] as AnyObject?) {
                
                case let .success(value): _result.testandtargetEndpointUrl = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo].self, source: source)
        }

        // Decoder for ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo
        Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo() : instance as! ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties].self, source: source)
        }

        // Decoder for ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties
        Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties() : instance as! ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.analytics.testandtarget.api.url"] as AnyObject?) {
                
                case let .success(value): _result.cqAnalyticsTestandtargetApiUrl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.analytics.testandtarget.timeout"] as AnyObject?) {
                
                case let .success(value): _result.cqAnalyticsTestandtargetTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.analytics.testandtarget.sockettimeout"] as AnyObject?) {
                
                case let .success(value): _result.cqAnalyticsTestandtargetSockettimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.analytics.testandtarget.recommendations.url.replace"] as AnyObject?) {
                
                case let .success(value): _result.cqAnalyticsTestandtargetRecommendationsUrlReplace = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.analytics.testandtarget.recommendations.url.replacewith"] as AnyObject?) {
                
                case let .success(value): _result.cqAnalyticsTestandtargetRecommendationsUrlReplacewith = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAuthImplCugCugSupportImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqAuthImplCugCugSupportImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAuthImplCugCugSupportImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqAuthImplCugCugSupportImplInfo].self, source: source)
        }

        // Decoder for ComDayCqAuthImplCugCugSupportImplInfo
        Decoders.addDecoder(clazz: ComDayCqAuthImplCugCugSupportImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAuthImplCugCugSupportImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAuthImplCugCugSupportImplInfo() : instance as! ComDayCqAuthImplCugCugSupportImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqAuthImplCugCugSupportImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAuthImplCugCugSupportImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAuthImplCugCugSupportImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqAuthImplCugCugSupportImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAuthImplCugCugSupportImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqAuthImplCugCugSupportImplProperties].self, source: source)
        }

        // Decoder for ComDayCqAuthImplCugCugSupportImplProperties
        Decoders.addDecoder(clazz: ComDayCqAuthImplCugCugSupportImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAuthImplCugCugSupportImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAuthImplCugCugSupportImplProperties() : instance as! ComDayCqAuthImplCugCugSupportImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cug.exempted.principals"] as AnyObject?) {
                
                case let .success(value): _result.cugExemptedPrincipals = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cug.enabled"] as AnyObject?) {
                
                case let .success(value): _result.cugEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cug.principals.regex"] as AnyObject?) {
                
                case let .success(value): _result.cugPrincipalsRegex = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cug.principals.replacement"] as AnyObject?) {
                
                case let .success(value): _result.cugPrincipalsReplacement = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAuthImplCugCugSupportImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAuthImplLoginSelectorHandlerInfo]
        Decoders.addDecoder(clazz: [ComDayCqAuthImplLoginSelectorHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAuthImplLoginSelectorHandlerInfo]> in
            return Decoders.decode(clazz: [ComDayCqAuthImplLoginSelectorHandlerInfo].self, source: source)
        }

        // Decoder for ComDayCqAuthImplLoginSelectorHandlerInfo
        Decoders.addDecoder(clazz: ComDayCqAuthImplLoginSelectorHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAuthImplLoginSelectorHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAuthImplLoginSelectorHandlerInfo() : instance as! ComDayCqAuthImplLoginSelectorHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqAuthImplLoginSelectorHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAuthImplLoginSelectorHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqAuthImplLoginSelectorHandlerProperties]
        Decoders.addDecoder(clazz: [ComDayCqAuthImplLoginSelectorHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqAuthImplLoginSelectorHandlerProperties]> in
            return Decoders.decode(clazz: [ComDayCqAuthImplLoginSelectorHandlerProperties].self, source: source)
        }

        // Decoder for ComDayCqAuthImplLoginSelectorHandlerProperties
        Decoders.addDecoder(clazz: ComDayCqAuthImplLoginSelectorHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqAuthImplLoginSelectorHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqAuthImplLoginSelectorHandlerProperties() : instance as! ComDayCqAuthImplLoginSelectorHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"] as AnyObject?) {
                
                case let .success(value): _result.path = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["auth.loginselector.mappings"] as AnyObject?) {
                
                case let .success(value): _result.authLoginselectorMappings = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["auth.loginselector.changepw.mappings"] as AnyObject?) {
                
                case let .success(value): _result.authLoginselectorChangepwMappings = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.loginselector.defaultloginpage"] as AnyObject?) {
                
                case let .success(value): _result.authLoginselectorDefaultloginpage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.loginselector.defaultchangepwpage"] as AnyObject?) {
                
                case let .success(value): _result.authLoginselectorDefaultchangepwpage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["auth.loginselector.handle"] as AnyObject?) {
                
                case let .success(value): _result.authLoginselectorHandle = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["auth.loginselector.handle.all.extensions"] as AnyObject?) {
                
                case let .success(value): _result.authLoginselectorHandleAllExtensions = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqAuthImplLoginSelectorHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqCommonsImplExternalizerImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqCommonsImplExternalizerImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqCommonsImplExternalizerImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqCommonsImplExternalizerImplInfo].self, source: source)
        }

        // Decoder for ComDayCqCommonsImplExternalizerImplInfo
        Decoders.addDecoder(clazz: ComDayCqCommonsImplExternalizerImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqCommonsImplExternalizerImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqCommonsImplExternalizerImplInfo() : instance as! ComDayCqCommonsImplExternalizerImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqCommonsImplExternalizerImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqCommonsImplExternalizerImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqCommonsImplExternalizerImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqCommonsImplExternalizerImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqCommonsImplExternalizerImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqCommonsImplExternalizerImplProperties].self, source: source)
        }

        // Decoder for ComDayCqCommonsImplExternalizerImplProperties
        Decoders.addDecoder(clazz: ComDayCqCommonsImplExternalizerImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqCommonsImplExternalizerImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqCommonsImplExternalizerImplProperties() : instance as! ComDayCqCommonsImplExternalizerImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["externalizer.domains"] as AnyObject?) {
                
                case let .success(value): _result.externalizerDomains = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["externalizer.host"] as AnyObject?) {
                
                case let .success(value): _result.externalizerHost = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["externalizer.contextpath"] as AnyObject?) {
                
                case let .success(value): _result.externalizerContextpath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["externalizer.encodedpath"] as AnyObject?) {
                
                case let .success(value): _result.externalizerEncodedpath = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqCommonsImplExternalizerImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqCommonsServletsRootMappingServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqCommonsServletsRootMappingServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqCommonsServletsRootMappingServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqCommonsServletsRootMappingServletInfo].self, source: source)
        }

        // Decoder for ComDayCqCommonsServletsRootMappingServletInfo
        Decoders.addDecoder(clazz: ComDayCqCommonsServletsRootMappingServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqCommonsServletsRootMappingServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqCommonsServletsRootMappingServletInfo() : instance as! ComDayCqCommonsServletsRootMappingServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqCommonsServletsRootMappingServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqCommonsServletsRootMappingServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqCommonsServletsRootMappingServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqCommonsServletsRootMappingServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqCommonsServletsRootMappingServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqCommonsServletsRootMappingServletProperties].self, source: source)
        }

        // Decoder for ComDayCqCommonsServletsRootMappingServletProperties
        Decoders.addDecoder(clazz: ComDayCqCommonsServletsRootMappingServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqCommonsServletsRootMappingServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqCommonsServletsRootMappingServletProperties() : instance as! ComDayCqCommonsServletsRootMappingServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["rootmapping.target"] as AnyObject?) {
                
                case let .success(value): _result.rootmappingTarget = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqCommonsServletsRootMappingServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo]
        Decoders.addDecoder(clazz: [ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo]> in
            return Decoders.decode(clazz: [ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo].self, source: source)
        }

        // Decoder for ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo
        Decoders.addDecoder(clazz: ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo() : instance as! ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties]
        Decoders.addDecoder(clazz: [ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties]> in
            return Decoders.decode(clazz: [ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties].self, source: source)
        }

        // Decoder for ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties
        Decoders.addDecoder(clazz: ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties() : instance as! ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["codeupgradetasks"] as AnyObject?) {
                
                case let .success(value): _result.codeupgradetasks = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["codeupgradetaskfilters"] as AnyObject?) {
                
                case let .success(value): _result.codeupgradetaskfilters = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo]
        Decoders.addDecoder(clazz: [ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo]> in
            return Decoders.decode(clazz: [ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo].self, source: source)
        }

        // Decoder for ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo
        Decoders.addDecoder(clazz: ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo() : instance as! ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties]
        Decoders.addDecoder(clazz: [ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties]> in
            return Decoders.decode(clazz: [ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties].self, source: source)
        }

        // Decoder for ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties
        Decoders.addDecoder(clazz: ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties() : instance as! ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["upgradeTaskIgnoreList"] as AnyObject?) {
                
                case let .success(value): _result.upgradeTaskIgnoreList = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo]
        Decoders.addDecoder(clazz: [ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo]> in
            return Decoders.decode(clazz: [ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo].self, source: source)
        }

        // Decoder for ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo
        Decoders.addDecoder(clazz: ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo() : instance as! ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties]
        Decoders.addDecoder(clazz: [ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties]> in
            return Decoders.decode(clazz: [ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties].self, source: source)
        }

        // Decoder for ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties
        Decoders.addDecoder(clazz: ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties() : instance as! ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["effectiveBundleListPath"] as AnyObject?) {
                
                case let .success(value): _result.effectiveBundleListPath = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqContentsyncImplContentSyncManagerImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqContentsyncImplContentSyncManagerImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqContentsyncImplContentSyncManagerImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqContentsyncImplContentSyncManagerImplInfo].self, source: source)
        }

        // Decoder for ComDayCqContentsyncImplContentSyncManagerImplInfo
        Decoders.addDecoder(clazz: ComDayCqContentsyncImplContentSyncManagerImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqContentsyncImplContentSyncManagerImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqContentsyncImplContentSyncManagerImplInfo() : instance as! ComDayCqContentsyncImplContentSyncManagerImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqContentsyncImplContentSyncManagerImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqContentsyncImplContentSyncManagerImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqContentsyncImplContentSyncManagerImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqContentsyncImplContentSyncManagerImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqContentsyncImplContentSyncManagerImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqContentsyncImplContentSyncManagerImplProperties].self, source: source)
        }

        // Decoder for ComDayCqContentsyncImplContentSyncManagerImplProperties
        Decoders.addDecoder(clazz: ComDayCqContentsyncImplContentSyncManagerImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqContentsyncImplContentSyncManagerImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqContentsyncImplContentSyncManagerImplProperties() : instance as! ComDayCqContentsyncImplContentSyncManagerImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["contentsync.fallback.authorizable"] as AnyObject?) {
                
                case let .success(value): _result.contentsyncFallbackAuthorizable = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["contentsync.fallback.updateuser"] as AnyObject?) {
                
                case let .success(value): _result.contentsyncFallbackUpdateuser = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqContentsyncImplContentSyncManagerImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCommonsHandlerStandardImageHandlerInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCommonsHandlerStandardImageHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCommonsHandlerStandardImageHandlerInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCommonsHandlerStandardImageHandlerInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCommonsHandlerStandardImageHandlerInfo
        Decoders.addDecoder(clazz: ComDayCqDamCommonsHandlerStandardImageHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCommonsHandlerStandardImageHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCommonsHandlerStandardImageHandlerInfo() : instance as! ComDayCqDamCommonsHandlerStandardImageHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCommonsHandlerStandardImageHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCommonsHandlerStandardImageHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCommonsHandlerStandardImageHandlerProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCommonsHandlerStandardImageHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCommonsHandlerStandardImageHandlerProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCommonsHandlerStandardImageHandlerProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCommonsHandlerStandardImageHandlerProperties
        Decoders.addDecoder(clazz: ComDayCqDamCommonsHandlerStandardImageHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCommonsHandlerStandardImageHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCommonsHandlerStandardImageHandlerProperties() : instance as! ComDayCqDamCommonsHandlerStandardImageHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["large_file_threshold"] as AnyObject?) {
                
                case let .success(value): _result.largeFileThreshold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["large_comment_threshold"] as AnyObject?) {
                
                case let .success(value): _result.largeCommentThreshold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.enable.ext.meta.extraction"] as AnyObject?) {
                
                case let .success(value): _result.cqDamEnableExtMetaExtraction = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCommonsHandlerStandardImageHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo
        Decoders.addDecoder(clazz: ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo() : instance as! ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties
        Decoders.addDecoder(clazz: ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties() : instance as! ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["xmp.filter.apply_whitelist"] as AnyObject?) {
                
                case let .success(value): _result.xmpFilterApplyWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["xmp.filter.whitelist"] as AnyObject?) {
                
                case let .success(value): _result.xmpFilterWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["xmp.filter.apply_blacklist"] as AnyObject?) {
                
                case let .success(value): _result.xmpFilterApplyBlacklist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["xmp.filter.blacklist"] as AnyObject?) {
                
                case let .success(value): _result.xmpFilterBlacklist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCommonsUtilImplAssetCacheImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCommonsUtilImplAssetCacheImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCommonsUtilImplAssetCacheImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCommonsUtilImplAssetCacheImplInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCommonsUtilImplAssetCacheImplInfo
        Decoders.addDecoder(clazz: ComDayCqDamCommonsUtilImplAssetCacheImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCommonsUtilImplAssetCacheImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCommonsUtilImplAssetCacheImplInfo() : instance as! ComDayCqDamCommonsUtilImplAssetCacheImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCommonsUtilImplAssetCacheImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCommonsUtilImplAssetCacheImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCommonsUtilImplAssetCacheImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCommonsUtilImplAssetCacheImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCommonsUtilImplAssetCacheImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCommonsUtilImplAssetCacheImplProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCommonsUtilImplAssetCacheImplProperties
        Decoders.addDecoder(clazz: ComDayCqDamCommonsUtilImplAssetCacheImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCommonsUtilImplAssetCacheImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCommonsUtilImplAssetCacheImplProperties() : instance as! ComDayCqDamCommonsUtilImplAssetCacheImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["large.file.min"] as AnyObject?) {
                
                case let .success(value): _result.largeFileMin = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cache.apply"] as AnyObject?) {
                
                case let .success(value): _result.cacheApply = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["mime.types"] as AnyObject?) {
                
                case let .success(value): _result.mimeTypes = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCommonsUtilImplAssetCacheImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo() : instance as! ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties() : instance as! ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.config.annotation.pdf.document.width"] as AnyObject?) {
                
                case let .success(value): _result.cqDamConfigAnnotationPdfDocumentWidth = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.config.annotation.pdf.document.height"] as AnyObject?) {
                
                case let .success(value): _result.cqDamConfigAnnotationPdfDocumentHeight = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.config.annotation.pdf.document.padding.horizontal"] as AnyObject?) {
                
                case let .success(value): _result.cqDamConfigAnnotationPdfDocumentPaddingHorizontal = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.config.annotation.pdf.document.padding.vertical"] as AnyObject?) {
                
                case let .success(value): _result.cqDamConfigAnnotationPdfDocumentPaddingVertical = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.config.annotation.pdf.font.size"] as AnyObject?) {
                
                case let .success(value): _result.cqDamConfigAnnotationPdfFontSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.config.annotation.pdf.font.color"] as AnyObject?) {
                
                case let .success(value): _result.cqDamConfigAnnotationPdfFontColor = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.config.annotation.pdf.font.family"] as AnyObject?) {
                
                case let .success(value): _result.cqDamConfigAnnotationPdfFontFamily = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.config.annotation.pdf.font.light"] as AnyObject?) {
                
                case let .success(value): _result.cqDamConfigAnnotationPdfFontLight = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.config.annotation.pdf.marginTextImage"] as AnyObject?) {
                
                case let .success(value): _result.cqDamConfigAnnotationPdfMarginTextImage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.config.annotation.pdf.minImageHeight"] as AnyObject?) {
                
                case let .success(value): _result.cqDamConfigAnnotationPdfMinImageHeight = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.config.annotation.pdf.reviewStatus.width"] as AnyObject?) {
                
                case let .success(value): _result.cqDamConfigAnnotationPdfReviewStatusWidth = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.config.annotation.pdf.reviewStatus.color.approved"] as AnyObject?) {
                
                case let .success(value): _result.cqDamConfigAnnotationPdfReviewStatusColorApproved = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.config.annotation.pdf.reviewStatus.color.rejected"] as AnyObject?) {
                
                case let .success(value): _result.cqDamConfigAnnotationPdfReviewStatusColorRejected = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested"] as AnyObject?) {
                
                case let .success(value): _result.cqDamConfigAnnotationPdfReviewStatusColorChangesRequested = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.config.annotation.pdf.annotationMarker.width"] as AnyObject?) {
                
                case let .success(value): _result.cqDamConfigAnnotationPdfAnnotationMarkerWidth = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.config.annotation.pdf.asset.minheight"] as AnyObject?) {
                
                case let .success(value): _result.cqDamConfigAnnotationPdfAssetMinheight = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplAssetMoveListenerInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplAssetMoveListenerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplAssetMoveListenerInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplAssetMoveListenerInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplAssetMoveListenerInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplAssetMoveListenerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplAssetMoveListenerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplAssetMoveListenerInfo() : instance as! ComDayCqDamCoreImplAssetMoveListenerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplAssetMoveListenerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplAssetMoveListenerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplAssetMoveListenerProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplAssetMoveListenerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplAssetMoveListenerProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplAssetMoveListenerProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplAssetMoveListenerProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplAssetMoveListenerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplAssetMoveListenerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplAssetMoveListenerProperties() : instance as! ComDayCqDamCoreImplAssetMoveListenerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplAssetMoveListenerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo() : instance as! ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties() : instance as! ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["isEnabled"] as AnyObject?) {
                
                case let .success(value): _result.isEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo() : instance as! ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties() : instance as! ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.adhoc.asset.share.prezip.maxcontentsize"] as AnyObject?) {
                
                case let .success(value): _result.cqDamAdhocAssetSharePrezipMaxcontentsize = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo() : instance as! ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties() : instance as! ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.image.cache.max.memory"] as AnyObject?) {
                
                case let .success(value): _result.cqDamImageCacheMaxMemory = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.image.cache.max.age"] as AnyObject?) {
                
                case let .success(value): _result.cqDamImageCacheMaxAge = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.image.cache.max.dimension"] as AnyObject?) {
                
                case let .success(value): _result.cqDamImageCacheMaxDimension = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplDamChangeEventListenerInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplDamChangeEventListenerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplDamChangeEventListenerInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplDamChangeEventListenerInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplDamChangeEventListenerInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplDamChangeEventListenerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplDamChangeEventListenerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplDamChangeEventListenerInfo() : instance as! ComDayCqDamCoreImplDamChangeEventListenerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplDamChangeEventListenerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplDamChangeEventListenerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplDamChangeEventListenerProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplDamChangeEventListenerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplDamChangeEventListenerProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplDamChangeEventListenerProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplDamChangeEventListenerProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplDamChangeEventListenerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplDamChangeEventListenerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplDamChangeEventListenerProperties() : instance as! ComDayCqDamCoreImplDamChangeEventListenerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["changeeventlistener.observed.paths"] as AnyObject?) {
                
                case let .success(value): _result.changeeventlistenerObservedPaths = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplDamChangeEventListenerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplDamEventPurgeServiceInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplDamEventPurgeServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplDamEventPurgeServiceInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplDamEventPurgeServiceInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplDamEventPurgeServiceInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplDamEventPurgeServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplDamEventPurgeServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplDamEventPurgeServiceInfo() : instance as! ComDayCqDamCoreImplDamEventPurgeServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplDamEventPurgeServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplDamEventPurgeServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplDamEventPurgeServiceProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplDamEventPurgeServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplDamEventPurgeServiceProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplDamEventPurgeServiceProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplDamEventPurgeServiceProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplDamEventPurgeServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplDamEventPurgeServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplDamEventPurgeServiceProperties() : instance as! ComDayCqDamCoreImplDamEventPurgeServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"] as AnyObject?) {
                
                case let .success(value): _result.schedulerExpression = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxSavedActivities"] as AnyObject?) {
                
                case let .success(value): _result.maxSavedActivities = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["saveInterval"] as AnyObject?) {
                
                case let .success(value): _result.saveInterval = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableActivityPurge"] as AnyObject?) {
                
                case let .success(value): _result.enableActivityPurge = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["eventTypes"] as AnyObject?) {
                
                case let .success(value): _result.eventTypes = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplDamEventPurgeServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplDamEventRecorderImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplDamEventRecorderImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplDamEventRecorderImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplDamEventRecorderImplInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplDamEventRecorderImplInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplDamEventRecorderImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplDamEventRecorderImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplDamEventRecorderImplInfo() : instance as! ComDayCqDamCoreImplDamEventRecorderImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplDamEventRecorderImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplDamEventRecorderImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplDamEventRecorderImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplDamEventRecorderImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplDamEventRecorderImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplDamEventRecorderImplProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplDamEventRecorderImplProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplDamEventRecorderImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplDamEventRecorderImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplDamEventRecorderImplProperties() : instance as! ComDayCqDamCoreImplDamEventRecorderImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"] as AnyObject?) {
                
                case let .success(value): _result.eventFilter = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["event.queue.length"] as AnyObject?) {
                
                case let .success(value): _result.eventQueueLength = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["eventrecorder.enabled"] as AnyObject?) {
                
                case let .success(value): _result.eventrecorderEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["eventrecorder.blacklist"] as AnyObject?) {
                
                case let .success(value): _result.eventrecorderBlacklist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["eventrecorder.eventtypes"] as AnyObject?) {
                
                case let .success(value): _result.eventrecorderEventtypes = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplDamEventRecorderImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplEventDamEventAuditListenerInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplEventDamEventAuditListenerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplEventDamEventAuditListenerInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplEventDamEventAuditListenerInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplEventDamEventAuditListenerInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplEventDamEventAuditListenerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplEventDamEventAuditListenerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplEventDamEventAuditListenerInfo() : instance as! ComDayCqDamCoreImplEventDamEventAuditListenerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplEventDamEventAuditListenerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplEventDamEventAuditListenerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplEventDamEventAuditListenerProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplEventDamEventAuditListenerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplEventDamEventAuditListenerProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplEventDamEventAuditListenerProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplEventDamEventAuditListenerProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplEventDamEventAuditListenerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplEventDamEventAuditListenerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplEventDamEventAuditListenerProperties() : instance as! ComDayCqDamCoreImplEventDamEventAuditListenerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"] as AnyObject?) {
                
                case let .success(value): _result.eventFilter = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplEventDamEventAuditListenerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplExpiryNotificationJobImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplExpiryNotificationJobImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplExpiryNotificationJobImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplExpiryNotificationJobImplInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplExpiryNotificationJobImplInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplExpiryNotificationJobImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplExpiryNotificationJobImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplExpiryNotificationJobImplInfo() : instance as! ComDayCqDamCoreImplExpiryNotificationJobImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplExpiryNotificationJobImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplExpiryNotificationJobImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplExpiryNotificationJobImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplExpiryNotificationJobImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplExpiryNotificationJobImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplExpiryNotificationJobImplProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplExpiryNotificationJobImplProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplExpiryNotificationJobImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplExpiryNotificationJobImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplExpiryNotificationJobImplProperties() : instance as! ComDayCqDamCoreImplExpiryNotificationJobImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.expiry.notification.scheduler.istimebased"] as AnyObject?) {
                
                case let .success(value): _result.cqDamExpiryNotificationSchedulerIstimebased = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.expiry.notification.scheduler.timebased.rule"] as AnyObject?) {
                
                case let .success(value): _result.cqDamExpiryNotificationSchedulerTimebasedRule = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.expiry.notification.scheduler.period.rule"] as AnyObject?) {
                
                case let .success(value): _result.cqDamExpiryNotificationSchedulerPeriodRule = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["send_email"] as AnyObject?) {
                
                case let .success(value): _result.sendEmail = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["asset_expired_limit"] as AnyObject?) {
                
                case let .success(value): _result.assetExpiredLimit = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["prior_notification_seconds"] as AnyObject?) {
                
                case let .success(value): _result.priorNotificationSeconds = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.expiry.notification.url.protocol"] as AnyObject?) {
                
                case let .success(value): _result.cqDamExpiryNotificationUrlProtocol = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplExpiryNotificationJobImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo() : instance as! ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties() : instance as! ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["isEnabled"] as AnyObject?) {
                
                case let .success(value): _result.isEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplGfxCommonsGfxRendererInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplGfxCommonsGfxRendererInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplGfxCommonsGfxRendererInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplGfxCommonsGfxRendererInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplGfxCommonsGfxRendererInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplGfxCommonsGfxRendererInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplGfxCommonsGfxRendererInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplGfxCommonsGfxRendererInfo() : instance as! ComDayCqDamCoreImplGfxCommonsGfxRendererInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplGfxCommonsGfxRendererProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplGfxCommonsGfxRendererInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplGfxCommonsGfxRendererProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplGfxCommonsGfxRendererProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplGfxCommonsGfxRendererProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplGfxCommonsGfxRendererProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplGfxCommonsGfxRendererProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplGfxCommonsGfxRendererProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplGfxCommonsGfxRendererProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplGfxCommonsGfxRendererProperties() : instance as! ComDayCqDamCoreImplGfxCommonsGfxRendererProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["skip.bufferedcache"] as AnyObject?) {
                
                case let .success(value): _result.skipBufferedcache = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplGfxCommonsGfxRendererProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo() : instance as! ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplHandlerEPSFormatHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplHandlerEPSFormatHandlerProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplHandlerEPSFormatHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplHandlerEPSFormatHandlerProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplHandlerEPSFormatHandlerProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplHandlerEPSFormatHandlerProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplHandlerEPSFormatHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplHandlerEPSFormatHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplHandlerEPSFormatHandlerProperties() : instance as! ComDayCqDamCoreImplHandlerEPSFormatHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["mimetype"] as AnyObject?) {
                
                case let .success(value): _result.mimetype = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplHandlerEPSFormatHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo() : instance as! ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties() : instance as! ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["mimetype"] as AnyObject?) {
                
                case let .success(value): _result.mimetype = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplHandlerJpegHandlerInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplHandlerJpegHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplHandlerJpegHandlerInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplHandlerJpegHandlerInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplHandlerJpegHandlerInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplHandlerJpegHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplHandlerJpegHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplHandlerJpegHandlerInfo() : instance as! ComDayCqDamCoreImplHandlerJpegHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplHandlerJpegHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplHandlerJpegHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplHandlerJpegHandlerProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplHandlerJpegHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplHandlerJpegHandlerProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplHandlerJpegHandlerProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplHandlerJpegHandlerProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplHandlerJpegHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplHandlerJpegHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplHandlerJpegHandlerProperties() : instance as! ComDayCqDamCoreImplHandlerJpegHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.enable.ext.meta.extraction"] as AnyObject?) {
                
                case let .success(value): _result.cqDamEnableExtMetaExtraction = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["large_file_threshold"] as AnyObject?) {
                
                case let .success(value): _result.largeFileThreshold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["large_comment_threshold"] as AnyObject?) {
                
                case let .success(value): _result.largeCommentThreshold = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplHandlerJpegHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo() : instance as! ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerProperties() : instance as! ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["xmphandler.cq.formats"] as AnyObject?) {
                
                case let .success(value): _result.xmphandlerCqFormats = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo() : instance as! ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties() : instance as! ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jmx.objectname"] as AnyObject?) {
                
                case let .success(value): _result.jmxObjectname = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["property.measure.enabled"] as AnyObject?) {
                
                case let .success(value): _result.propertyMeasureEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["property.name"] as AnyObject?) {
                
                case let .success(value): _result.propertyName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["property.max.wait.ms"] as AnyObject?) {
                
                case let .success(value): _result.propertyMaxWaitMs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyFloat.self, source: sourceDictionary["property.max.rate"] as AnyObject?) {
                
                case let .success(value): _result.propertyMaxRate = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["fulltext.measure.enabled"] as AnyObject?) {
                
                case let .success(value): _result.fulltextMeasureEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["fulltext.name"] as AnyObject?) {
                
                case let .success(value): _result.fulltextName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["fulltext.max.wait.ms"] as AnyObject?) {
                
                case let .success(value): _result.fulltextMaxWaitMs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyFloat.self, source: sourceDictionary["fulltext.max.rate"] as AnyObject?) {
                
                case let .success(value): _result.fulltextMaxRate = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo() : instance as! ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties() : instance as! ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jmx.objectname"] as AnyObject?) {
                
                case let .success(value): _result.jmxObjectname = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo() : instance as! ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties() : instance as! ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jmx.objectname"] as AnyObject?) {
                
                case let .success(value): _result.jmxObjectname = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["active"] as AnyObject?) {
                
                case let .success(value): _result.active = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo() : instance as! ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties() : instance as! ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["operation"] as AnyObject?) {
                
                case let .success(value): _result.operation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["emailEnabled"] as AnyObject?) {
                
                case let .success(value): _result.emailEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo() : instance as! ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties() : instance as! ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["operation"] as AnyObject?) {
                
                case let .success(value): _result.operation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["operationIcon"] as AnyObject?) {
                
                case let .success(value): _result.operationIcon = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["topicName"] as AnyObject?) {
                
                case let .success(value): _result.topicName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["emailEnabled"] as AnyObject?) {
                
                case let .success(value): _result.emailEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplLightboxLightboxServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplLightboxLightboxServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplLightboxLightboxServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplLightboxLightboxServletInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplLightboxLightboxServletInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplLightboxLightboxServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplLightboxLightboxServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplLightboxLightboxServletInfo() : instance as! ComDayCqDamCoreImplLightboxLightboxServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplLightboxLightboxServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplLightboxLightboxServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplLightboxLightboxServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplLightboxLightboxServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplLightboxLightboxServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplLightboxLightboxServletProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplLightboxLightboxServletProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplLightboxLightboxServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplLightboxLightboxServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplLightboxLightboxServletProperties() : instance as! ComDayCqDamCoreImplLightboxLightboxServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.paths"] as AnyObject?) {
                
                case let .success(value): _result.slingServletPaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.servlet.methods"] as AnyObject?) {
                
                case let .success(value): _result.slingServletMethods = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.enable.anonymous"] as AnyObject?) {
                
                case let .success(value): _result.cqDamEnableAnonymous = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplLightboxLightboxServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo() : instance as! ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties() : instance as! ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["granite:data"] as AnyObject?) {
                
                case let .success(value): _result.granitedata = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo() : instance as! ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties() : instance as! ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.allow.all.mime"] as AnyObject?) {
                
                case let .success(value): _result.cqDamAllowAllMime = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.dam.allowed.asset.mimes"] as AnyObject?) {
                
                case let .success(value): _result.cqDamAllowedAssetMimes = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo() : instance as! ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties() : instance as! ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.detect.asset.mime.from.content"] as AnyObject?) {
                
                case let .success(value): _result.cqDamDetectAssetMimeFromContent = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplMissingMetadataNotificationJobInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplMissingMetadataNotificationJobInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplMissingMetadataNotificationJobInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplMissingMetadataNotificationJobInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplMissingMetadataNotificationJobInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplMissingMetadataNotificationJobInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplMissingMetadataNotificationJobInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplMissingMetadataNotificationJobInfo() : instance as! ComDayCqDamCoreImplMissingMetadataNotificationJobInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplMissingMetadataNotificationJobProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplMissingMetadataNotificationJobInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplMissingMetadataNotificationJobProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplMissingMetadataNotificationJobProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplMissingMetadataNotificationJobProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplMissingMetadataNotificationJobProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplMissingMetadataNotificationJobProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplMissingMetadataNotificationJobProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplMissingMetadataNotificationJobProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplMissingMetadataNotificationJobProperties() : instance as! ComDayCqDamCoreImplMissingMetadataNotificationJobProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.missingmetadata.notification.scheduler.istimebased"] as AnyObject?) {
                
                case let .success(value): _result.cqDamMissingmetadataNotificationSchedulerIstimebased = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.missingmetadata.notification.scheduler.timebased.rule"] as AnyObject?) {
                
                case let .success(value): _result.cqDamMissingmetadataNotificationSchedulerTimebasedRule = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.missingmetadata.notification.scheduler.period.rule"] as AnyObject?) {
                
                case let .success(value): _result.cqDamMissingmetadataNotificationSchedulerPeriodRule = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.missingmetadata.notification.recipient"] as AnyObject?) {
                
                case let .success(value): _result.cqDamMissingmetadataNotificationRecipient = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplMissingMetadataNotificationJobProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo() : instance as! ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties() : instance as! ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["process.label"] as AnyObject?) {
                
                case let .success(value): _result.processLabel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["Notify on Complete"] as AnyObject?) {
                
                case let .success(value): _result.notifyOnComplete = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplProcessTextExtractionProcessInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplProcessTextExtractionProcessInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplProcessTextExtractionProcessInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplProcessTextExtractionProcessInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplProcessTextExtractionProcessInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplProcessTextExtractionProcessInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplProcessTextExtractionProcessInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplProcessTextExtractionProcessInfo() : instance as! ComDayCqDamCoreImplProcessTextExtractionProcessInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplProcessTextExtractionProcessProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplProcessTextExtractionProcessInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplProcessTextExtractionProcessProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplProcessTextExtractionProcessProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplProcessTextExtractionProcessProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplProcessTextExtractionProcessProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplProcessTextExtractionProcessProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplProcessTextExtractionProcessProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplProcessTextExtractionProcessProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplProcessTextExtractionProcessProperties() : instance as! ComDayCqDamCoreImplProcessTextExtractionProcessProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["mimeTypes"] as AnyObject?) {
                
                case let .success(value): _result.mimeTypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxExtract"] as AnyObject?) {
                
                case let .success(value): _result.maxExtract = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplProcessTextExtractionProcessProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplRenditionMakerImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplRenditionMakerImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplRenditionMakerImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplRenditionMakerImplInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplRenditionMakerImplInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplRenditionMakerImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplRenditionMakerImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplRenditionMakerImplInfo() : instance as! ComDayCqDamCoreImplRenditionMakerImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplRenditionMakerImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplRenditionMakerImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplRenditionMakerImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplRenditionMakerImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplRenditionMakerImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplRenditionMakerImplProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplRenditionMakerImplProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplRenditionMakerImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplRenditionMakerImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplRenditionMakerImplProperties() : instance as! ComDayCqDamCoreImplRenditionMakerImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["xmp.propagate"] as AnyObject?) {
                
                case let .success(value): _result.xmpPropagate = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["xmp.excludes"] as AnyObject?) {
                
                case let .success(value): _result.xmpExcludes = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplRenditionMakerImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplReportsReportExportServiceInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplReportsReportExportServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplReportsReportExportServiceInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplReportsReportExportServiceInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplReportsReportExportServiceInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplReportsReportExportServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplReportsReportExportServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplReportsReportExportServiceInfo() : instance as! ComDayCqDamCoreImplReportsReportExportServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplReportsReportExportServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplReportsReportExportServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplReportsReportExportServiceProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplReportsReportExportServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplReportsReportExportServiceProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplReportsReportExportServiceProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplReportsReportExportServiceProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplReportsReportExportServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplReportsReportExportServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplReportsReportExportServiceProperties() : instance as! ComDayCqDamCoreImplReportsReportExportServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queryBatchSize"] as AnyObject?) {
                
                case let .success(value): _result.queryBatchSize = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplReportsReportExportServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplReportsReportPurgeServiceInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplReportsReportPurgeServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplReportsReportPurgeServiceInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplReportsReportPurgeServiceInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplReportsReportPurgeServiceInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplReportsReportPurgeServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplReportsReportPurgeServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplReportsReportPurgeServiceInfo() : instance as! ComDayCqDamCoreImplReportsReportPurgeServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplReportsReportPurgeServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplReportsReportPurgeServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplReportsReportPurgeServiceProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplReportsReportPurgeServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplReportsReportPurgeServiceProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplReportsReportPurgeServiceProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplReportsReportPurgeServiceProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplReportsReportPurgeServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplReportsReportPurgeServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplReportsReportPurgeServiceProperties() : instance as! ComDayCqDamCoreImplReportsReportPurgeServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"] as AnyObject?) {
                
                case let .success(value): _result.schedulerExpression = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxSavedReports"] as AnyObject?) {
                
                case let .success(value): _result.maxSavedReports = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["timeDuration"] as AnyObject?) {
                
                case let .success(value): _result.timeDuration = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableReportPurge"] as AnyObject?) {
                
                case let .success(value): _result.enableReportPurge = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplReportsReportPurgeServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletAssetDownloadServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletAssetDownloadServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletAssetDownloadServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletAssetDownloadServletInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletAssetDownloadServletInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletAssetDownloadServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletAssetDownloadServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletAssetDownloadServletInfo() : instance as! ComDayCqDamCoreImplServletAssetDownloadServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletAssetDownloadServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletAssetDownloadServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletAssetDownloadServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletAssetDownloadServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletAssetDownloadServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletAssetDownloadServletProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletAssetDownloadServletProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletAssetDownloadServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletAssetDownloadServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletAssetDownloadServletProperties() : instance as! ComDayCqDamCoreImplServletAssetDownloadServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletAssetDownloadServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletAssetStatusServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletAssetStatusServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletAssetStatusServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletAssetStatusServletInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletAssetStatusServletInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletAssetStatusServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletAssetStatusServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletAssetStatusServletInfo() : instance as! ComDayCqDamCoreImplServletAssetStatusServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletAssetStatusServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletAssetStatusServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletAssetStatusServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletAssetStatusServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletAssetStatusServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletAssetStatusServletProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletAssetStatusServletProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletAssetStatusServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletAssetStatusServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletAssetStatusServletProperties() : instance as! ComDayCqDamCoreImplServletAssetStatusServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.batch.status.maxassets"] as AnyObject?) {
                
                case let .success(value): _result.cqDamBatchStatusMaxassets = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletAssetStatusServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletAssetXMPSearchServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletAssetXMPSearchServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletAssetXMPSearchServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletAssetXMPSearchServletInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletAssetXMPSearchServletInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletAssetXMPSearchServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletAssetXMPSearchServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletAssetXMPSearchServletInfo() : instance as! ComDayCqDamCoreImplServletAssetXMPSearchServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletAssetXMPSearchServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletAssetXMPSearchServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletAssetXMPSearchServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletAssetXMPSearchServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletAssetXMPSearchServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletAssetXMPSearchServletProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletAssetXMPSearchServletProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletAssetXMPSearchServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletAssetXMPSearchServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletAssetXMPSearchServletProperties() : instance as! ComDayCqDamCoreImplServletAssetXMPSearchServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.batch.indesign.maxassets"] as AnyObject?) {
                
                case let .success(value): _result.cqDamBatchIndesignMaxassets = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletAssetXMPSearchServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletBatchMetadataServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletBatchMetadataServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletBatchMetadataServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletBatchMetadataServletInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletBatchMetadataServletInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletBatchMetadataServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletBatchMetadataServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletBatchMetadataServletInfo() : instance as! ComDayCqDamCoreImplServletBatchMetadataServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletBatchMetadataServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletBatchMetadataServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletBatchMetadataServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletBatchMetadataServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletBatchMetadataServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletBatchMetadataServletProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletBatchMetadataServletProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletBatchMetadataServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletBatchMetadataServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletBatchMetadataServletProperties() : instance as! ComDayCqDamCoreImplServletBatchMetadataServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.dam.batch.metadata.asset.default"] as AnyObject?) {
                
                case let .success(value): _result.cqDamBatchMetadataAssetDefault = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.dam.batch.metadata.collection.default"] as AnyObject?) {
                
                case let .success(value): _result.cqDamBatchMetadataCollectionDefault = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.batch.metadata.maxresources"] as AnyObject?) {
                
                case let .success(value): _result.cqDamBatchMetadataMaxresources = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletBatchMetadataServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletBinaryProviderServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletBinaryProviderServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletBinaryProviderServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletBinaryProviderServletInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletBinaryProviderServletInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletBinaryProviderServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletBinaryProviderServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletBinaryProviderServletInfo() : instance as! ComDayCqDamCoreImplServletBinaryProviderServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletBinaryProviderServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletBinaryProviderServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletBinaryProviderServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletBinaryProviderServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletBinaryProviderServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletBinaryProviderServletProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletBinaryProviderServletProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletBinaryProviderServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletBinaryProviderServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletBinaryProviderServletProperties() : instance as! ComDayCqDamCoreImplServletBinaryProviderServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.servlet.resourceTypes"] as AnyObject?) {
                
                case let .success(value): _result.slingServletResourceTypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.servlet.methods"] as AnyObject?) {
                
                case let .success(value): _result.slingServletMethods = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.drm.enable"] as AnyObject?) {
                
                case let .success(value): _result.cqDamDrmEnable = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletBinaryProviderServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletCollectionServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletCollectionServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletCollectionServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletCollectionServletInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletCollectionServletInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletCollectionServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletCollectionServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletCollectionServletInfo() : instance as! ComDayCqDamCoreImplServletCollectionServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletCollectionServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletCollectionServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletCollectionServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletCollectionServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletCollectionServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletCollectionServletProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletCollectionServletProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletCollectionServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletCollectionServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletCollectionServletProperties() : instance as! ComDayCqDamCoreImplServletCollectionServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.dam.batch.collection.properties"] as AnyObject?) {
                
                case let .success(value): _result.cqDamBatchCollectionProperties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.batch.collection.maxcollections"] as AnyObject?) {
                
                case let .success(value): _result.cqDamBatchCollectionMaxcollections = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletCollectionServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletCollectionsServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletCollectionsServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletCollectionsServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletCollectionsServletInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletCollectionsServletInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletCollectionsServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletCollectionsServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletCollectionsServletInfo() : instance as! ComDayCqDamCoreImplServletCollectionsServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletCollectionsServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletCollectionsServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletCollectionsServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletCollectionsServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletCollectionsServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletCollectionsServletProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletCollectionsServletProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletCollectionsServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletCollectionsServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletCollectionsServletProperties() : instance as! ComDayCqDamCoreImplServletCollectionsServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.dam.batch.collections.properties"] as AnyObject?) {
                
                case let .success(value): _result.cqDamBatchCollectionsProperties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.batch.collections.limit"] as AnyObject?) {
                
                case let .success(value): _result.cqDamBatchCollectionsLimit = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletCollectionsServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletCompanionServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletCompanionServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletCompanionServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletCompanionServletInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletCompanionServletInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletCompanionServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletCompanionServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletCompanionServletInfo() : instance as! ComDayCqDamCoreImplServletCompanionServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletCompanionServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletCompanionServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletCompanionServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletCompanionServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletCompanionServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletCompanionServletProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletCompanionServletProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletCompanionServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletCompanionServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletCompanionServletProperties() : instance as! ComDayCqDamCoreImplServletCompanionServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["More Info"] as AnyObject?) {
                
                case let .success(value): _result.moreInfo = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}"] as AnyObject?) {
                
                case let .success(value): _result.mntoverlaydamguicontentassetsmoreinfoHtmlpath = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletCompanionServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletCreateAssetServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletCreateAssetServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletCreateAssetServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletCreateAssetServletInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletCreateAssetServletInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletCreateAssetServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletCreateAssetServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletCreateAssetServletInfo() : instance as! ComDayCqDamCoreImplServletCreateAssetServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletCreateAssetServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletCreateAssetServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletCreateAssetServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletCreateAssetServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletCreateAssetServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletCreateAssetServletProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletCreateAssetServletProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletCreateAssetServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletCreateAssetServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletCreateAssetServletProperties() : instance as! ComDayCqDamCoreImplServletCreateAssetServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["detect_duplicate"] as AnyObject?) {
                
                case let .success(value): _result.detectDuplicate = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletCreateAssetServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletDamContentDispositionFilterInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletDamContentDispositionFilterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletDamContentDispositionFilterInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletDamContentDispositionFilterInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletDamContentDispositionFilterInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletDamContentDispositionFilterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletDamContentDispositionFilterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletDamContentDispositionFilterInfo() : instance as! ComDayCqDamCoreImplServletDamContentDispositionFilterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletDamContentDispositionFilterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletDamContentDispositionFilterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletDamContentDispositionFilterProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletDamContentDispositionFilterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletDamContentDispositionFilterProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletDamContentDispositionFilterProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletDamContentDispositionFilterProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletDamContentDispositionFilterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletDamContentDispositionFilterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletDamContentDispositionFilterProperties() : instance as! ComDayCqDamCoreImplServletDamContentDispositionFilterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.mime.type.blacklist"] as AnyObject?) {
                
                case let .success(value): _result.cqMimeTypeBlacklist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.empty.mime"] as AnyObject?) {
                
                case let .success(value): _result.cqDamEmptyMime = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletDamContentDispositionFilterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletGuidLookupFilterInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletGuidLookupFilterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletGuidLookupFilterInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletGuidLookupFilterInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletGuidLookupFilterInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletGuidLookupFilterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletGuidLookupFilterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletGuidLookupFilterInfo() : instance as! ComDayCqDamCoreImplServletGuidLookupFilterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletGuidLookupFilterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletGuidLookupFilterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletGuidLookupFilterProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletGuidLookupFilterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletGuidLookupFilterProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletGuidLookupFilterProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletGuidLookupFilterProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletGuidLookupFilterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletGuidLookupFilterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletGuidLookupFilterProperties() : instance as! ComDayCqDamCoreImplServletGuidLookupFilterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.core.guidlookupfilter.enabled"] as AnyObject?) {
                
                case let .success(value): _result.cqDamCoreGuidlookupfilterEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletGuidLookupFilterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletHealthCheckServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletHealthCheckServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletHealthCheckServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletHealthCheckServletInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletHealthCheckServletInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletHealthCheckServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletHealthCheckServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletHealthCheckServletInfo() : instance as! ComDayCqDamCoreImplServletHealthCheckServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletHealthCheckServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletHealthCheckServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletHealthCheckServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletHealthCheckServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletHealthCheckServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletHealthCheckServletProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletHealthCheckServletProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletHealthCheckServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletHealthCheckServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletHealthCheckServletProperties() : instance as! ComDayCqDamCoreImplServletHealthCheckServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.sync.workflow.id"] as AnyObject?) {
                
                case let .success(value): _result.cqDamSyncWorkflowId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.dam.sync.folder.types"] as AnyObject?) {
                
                case let .success(value): _result.cqDamSyncFolderTypes = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletHealthCheckServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletMetadataGetServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletMetadataGetServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletMetadataGetServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletMetadataGetServletInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletMetadataGetServletInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletMetadataGetServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletMetadataGetServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletMetadataGetServletInfo() : instance as! ComDayCqDamCoreImplServletMetadataGetServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletMetadataGetServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletMetadataGetServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletMetadataGetServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletMetadataGetServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletMetadataGetServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletMetadataGetServletProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletMetadataGetServletProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletMetadataGetServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletMetadataGetServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletMetadataGetServletProperties() : instance as! ComDayCqDamCoreImplServletMetadataGetServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.resourceTypes"] as AnyObject?) {
                
                case let .success(value): _result.slingServletResourceTypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.methods"] as AnyObject?) {
                
                case let .success(value): _result.slingServletMethods = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.extensions"] as AnyObject?) {
                
                case let .success(value): _result.slingServletExtensions = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.selectors"] as AnyObject?) {
                
                case let .success(value): _result.slingServletSelectors = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletMetadataGetServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo() : instance as! ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties() : instance as! ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.drm.enable"] as AnyObject?) {
                
                case let .success(value): _result.cqDamDrmEnable = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletResourceCollectionServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletResourceCollectionServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletResourceCollectionServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletResourceCollectionServletInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletResourceCollectionServletInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletResourceCollectionServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletResourceCollectionServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletResourceCollectionServletInfo() : instance as! ComDayCqDamCoreImplServletResourceCollectionServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletResourceCollectionServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletResourceCollectionServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplServletResourceCollectionServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletResourceCollectionServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplServletResourceCollectionServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplServletResourceCollectionServletProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplServletResourceCollectionServletProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletResourceCollectionServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplServletResourceCollectionServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplServletResourceCollectionServletProperties() : instance as! ComDayCqDamCoreImplServletResourceCollectionServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.servlet.resourceTypes"] as AnyObject?) {
                
                case let .success(value): _result.slingServletResourceTypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.methods"] as AnyObject?) {
                
                case let .success(value): _result.slingServletMethods = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.selectors"] as AnyObject?) {
                
                case let .success(value): _result.slingServletSelectors = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["download.config"] as AnyObject?) {
                
                case let .success(value): _result.downloadConfig = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["view.selector"] as AnyObject?) {
                
                case let .success(value): _result.viewSelector = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["send_email"] as AnyObject?) {
                
                case let .success(value): _result.sendEmail = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplServletResourceCollectionServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo() : instance as! ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties() : instance as! ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["createPreviewEnabled"] as AnyObject?) {
                
                case let .success(value): _result.createPreviewEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["updatePreviewEnabled"] as AnyObject?) {
                
                case let .success(value): _result.updatePreviewEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queueSize"] as AnyObject?) {
                
                case let .success(value): _result.queueSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["folderPreviewRenditionRegex"] as AnyObject?) {
                
                case let .success(value): _result.folderPreviewRenditionRegex = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplUnzipUnzipConfigInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplUnzipUnzipConfigInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplUnzipUnzipConfigInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplUnzipUnzipConfigInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplUnzipUnzipConfigInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplUnzipUnzipConfigInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplUnzipUnzipConfigInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplUnzipUnzipConfigInfo() : instance as! ComDayCqDamCoreImplUnzipUnzipConfigInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreImplUnzipUnzipConfigProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplUnzipUnzipConfigInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreImplUnzipUnzipConfigProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreImplUnzipUnzipConfigProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreImplUnzipUnzipConfigProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreImplUnzipUnzipConfigProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreImplUnzipUnzipConfigProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreImplUnzipUnzipConfigProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreImplUnzipUnzipConfigProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreImplUnzipUnzipConfigProperties() : instance as! ComDayCqDamCoreImplUnzipUnzipConfigProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.config.unzip.maxuncompressedsize"] as AnyObject?) {
                
                case let .success(value): _result.cqDamConfigUnzipMaxuncompressedsize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.config.unzip.encoding"] as AnyObject?) {
                
                case let .success(value): _result.cqDamConfigUnzipEncoding = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreImplUnzipUnzipConfigProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo() : instance as! ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties() : instance as! ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["process.label"] as AnyObject?) {
                
                case let .success(value): _result.processLabel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.enable.sha1"] as AnyObject?) {
                
                case let .success(value): _result.cqDamEnableSha1 = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreProcessExtractMetadataProcessInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreProcessExtractMetadataProcessInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreProcessExtractMetadataProcessInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreProcessExtractMetadataProcessInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreProcessExtractMetadataProcessInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreProcessExtractMetadataProcessInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreProcessExtractMetadataProcessInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreProcessExtractMetadataProcessInfo() : instance as! ComDayCqDamCoreProcessExtractMetadataProcessInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreProcessExtractMetadataProcessProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreProcessExtractMetadataProcessInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreProcessExtractMetadataProcessProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreProcessExtractMetadataProcessProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreProcessExtractMetadataProcessProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreProcessExtractMetadataProcessProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreProcessExtractMetadataProcessProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreProcessExtractMetadataProcessProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreProcessExtractMetadataProcessProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreProcessExtractMetadataProcessProperties() : instance as! ComDayCqDamCoreProcessExtractMetadataProcessProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["process.label"] as AnyObject?) {
                
                case let .success(value): _result.processLabel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.enable.sha1"] as AnyObject?) {
                
                case let .success(value): _result.cqDamEnableSha1 = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreProcessExtractMetadataProcessProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreProcessMetadataProcessorProcessInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreProcessMetadataProcessorProcessInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreProcessMetadataProcessorProcessInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreProcessMetadataProcessorProcessInfo].self, source: source)
        }

        // Decoder for ComDayCqDamCoreProcessMetadataProcessorProcessInfo
        Decoders.addDecoder(clazz: ComDayCqDamCoreProcessMetadataProcessorProcessInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreProcessMetadataProcessorProcessInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreProcessMetadataProcessorProcessInfo() : instance as! ComDayCqDamCoreProcessMetadataProcessorProcessInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamCoreProcessMetadataProcessorProcessProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreProcessMetadataProcessorProcessInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamCoreProcessMetadataProcessorProcessProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamCoreProcessMetadataProcessorProcessProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamCoreProcessMetadataProcessorProcessProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamCoreProcessMetadataProcessorProcessProperties].self, source: source)
        }

        // Decoder for ComDayCqDamCoreProcessMetadataProcessorProcessProperties
        Decoders.addDecoder(clazz: ComDayCqDamCoreProcessMetadataProcessorProcessProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamCoreProcessMetadataProcessorProcessProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamCoreProcessMetadataProcessorProcessProperties() : instance as! ComDayCqDamCoreProcessMetadataProcessorProcessProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["process.label"] as AnyObject?) {
                
                case let .success(value): _result.processLabel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.enable.sha1"] as AnyObject?) {
                
                case let .success(value): _result.cqDamEnableSha1 = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.dam.metadata.xssprotected.properties"] as AnyObject?) {
                
                case let .success(value): _result.cqDamMetadataXssprotectedProperties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamCoreProcessMetadataProcessorProcessProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamHandlerFfmpegLocatorImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamHandlerFfmpegLocatorImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamHandlerFfmpegLocatorImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamHandlerFfmpegLocatorImplInfo].self, source: source)
        }

        // Decoder for ComDayCqDamHandlerFfmpegLocatorImplInfo
        Decoders.addDecoder(clazz: ComDayCqDamHandlerFfmpegLocatorImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamHandlerFfmpegLocatorImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamHandlerFfmpegLocatorImplInfo() : instance as! ComDayCqDamHandlerFfmpegLocatorImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamHandlerFfmpegLocatorImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamHandlerFfmpegLocatorImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamHandlerFfmpegLocatorImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamHandlerFfmpegLocatorImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamHandlerFfmpegLocatorImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamHandlerFfmpegLocatorImplProperties].self, source: source)
        }

        // Decoder for ComDayCqDamHandlerFfmpegLocatorImplProperties
        Decoders.addDecoder(clazz: ComDayCqDamHandlerFfmpegLocatorImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamHandlerFfmpegLocatorImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamHandlerFfmpegLocatorImplProperties() : instance as! ComDayCqDamHandlerFfmpegLocatorImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["executable.searchpath"] as AnyObject?) {
                
                case let .success(value): _result.executableSearchpath = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamHandlerFfmpegLocatorImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo].self, source: source)
        }

        // Decoder for ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo
        Decoders.addDecoder(clazz: ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo() : instance as! ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties].self, source: source)
        }

        // Decoder for ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties
        Decoders.addDecoder(clazz: ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties() : instance as! ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"] as AnyObject?) {
                
                case let .success(value): _result.eventFilter = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fontmgr.system.font.dir"] as AnyObject?) {
                
                case let .success(value): _result.fontmgrSystemFontDir = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["fontmgr.adobe.font.dir"] as AnyObject?) {
                
                case let .success(value): _result.fontmgrAdobeFontDir = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["fontmgr.customer.font.dir"] as AnyObject?) {
                
                case let .success(value): _result.fontmgrCustomerFontDir = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamHandlerStandardPdfPdfHandlerInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamHandlerStandardPdfPdfHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamHandlerStandardPdfPdfHandlerInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamHandlerStandardPdfPdfHandlerInfo].self, source: source)
        }

        // Decoder for ComDayCqDamHandlerStandardPdfPdfHandlerInfo
        Decoders.addDecoder(clazz: ComDayCqDamHandlerStandardPdfPdfHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamHandlerStandardPdfPdfHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamHandlerStandardPdfPdfHandlerInfo() : instance as! ComDayCqDamHandlerStandardPdfPdfHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamHandlerStandardPdfPdfHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamHandlerStandardPdfPdfHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamHandlerStandardPdfPdfHandlerProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamHandlerStandardPdfPdfHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamHandlerStandardPdfPdfHandlerProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamHandlerStandardPdfPdfHandlerProperties].self, source: source)
        }

        // Decoder for ComDayCqDamHandlerStandardPdfPdfHandlerProperties
        Decoders.addDecoder(clazz: ComDayCqDamHandlerStandardPdfPdfHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamHandlerStandardPdfPdfHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamHandlerStandardPdfPdfHandlerProperties() : instance as! ComDayCqDamHandlerStandardPdfPdfHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["raster.annotation"] as AnyObject?) {
                
                case let .success(value): _result.rasterAnnotation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamHandlerStandardPdfPdfHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamHandlerStandardPsPostScriptHandlerInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamHandlerStandardPsPostScriptHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamHandlerStandardPsPostScriptHandlerInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamHandlerStandardPsPostScriptHandlerInfo].self, source: source)
        }

        // Decoder for ComDayCqDamHandlerStandardPsPostScriptHandlerInfo
        Decoders.addDecoder(clazz: ComDayCqDamHandlerStandardPsPostScriptHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamHandlerStandardPsPostScriptHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamHandlerStandardPsPostScriptHandlerInfo() : instance as! ComDayCqDamHandlerStandardPsPostScriptHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamHandlerStandardPsPostScriptHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamHandlerStandardPsPostScriptHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamHandlerStandardPsPostScriptHandlerProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamHandlerStandardPsPostScriptHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamHandlerStandardPsPostScriptHandlerProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamHandlerStandardPsPostScriptHandlerProperties].self, source: source)
        }

        // Decoder for ComDayCqDamHandlerStandardPsPostScriptHandlerProperties
        Decoders.addDecoder(clazz: ComDayCqDamHandlerStandardPsPostScriptHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamHandlerStandardPsPostScriptHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamHandlerStandardPsPostScriptHandlerProperties() : instance as! ComDayCqDamHandlerStandardPsPostScriptHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["raster.annotation"] as AnyObject?) {
                
                case let .success(value): _result.rasterAnnotation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamHandlerStandardPsPostScriptHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamHandlerStandardPsdPsdHandlerInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamHandlerStandardPsdPsdHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamHandlerStandardPsdPsdHandlerInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamHandlerStandardPsdPsdHandlerInfo].self, source: source)
        }

        // Decoder for ComDayCqDamHandlerStandardPsdPsdHandlerInfo
        Decoders.addDecoder(clazz: ComDayCqDamHandlerStandardPsdPsdHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamHandlerStandardPsdPsdHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamHandlerStandardPsdPsdHandlerInfo() : instance as! ComDayCqDamHandlerStandardPsdPsdHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamHandlerStandardPsdPsdHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamHandlerStandardPsdPsdHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamHandlerStandardPsdPsdHandlerProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamHandlerStandardPsdPsdHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamHandlerStandardPsdPsdHandlerProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamHandlerStandardPsdPsdHandlerProperties].self, source: source)
        }

        // Decoder for ComDayCqDamHandlerStandardPsdPsdHandlerProperties
        Decoders.addDecoder(clazz: ComDayCqDamHandlerStandardPsdPsdHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamHandlerStandardPsdPsdHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamHandlerStandardPsdPsdHandlerProperties() : instance as! ComDayCqDamHandlerStandardPsdPsdHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["large_file_threshold"] as AnyObject?) {
                
                case let .success(value): _result.largeFileThreshold = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamHandlerStandardPsdPsdHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamIdsImplIDSJobProcessorInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamIdsImplIDSJobProcessorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamIdsImplIDSJobProcessorInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamIdsImplIDSJobProcessorInfo].self, source: source)
        }

        // Decoder for ComDayCqDamIdsImplIDSJobProcessorInfo
        Decoders.addDecoder(clazz: ComDayCqDamIdsImplIDSJobProcessorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamIdsImplIDSJobProcessorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamIdsImplIDSJobProcessorInfo() : instance as! ComDayCqDamIdsImplIDSJobProcessorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamIdsImplIDSJobProcessorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamIdsImplIDSJobProcessorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamIdsImplIDSJobProcessorProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamIdsImplIDSJobProcessorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamIdsImplIDSJobProcessorProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamIdsImplIDSJobProcessorProperties].self, source: source)
        }

        // Decoder for ComDayCqDamIdsImplIDSJobProcessorProperties
        Decoders.addDecoder(clazz: ComDayCqDamIdsImplIDSJobProcessorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamIdsImplIDSJobProcessorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamIdsImplIDSJobProcessorProperties() : instance as! ComDayCqDamIdsImplIDSJobProcessorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enable.multisession"] as AnyObject?) {
                
                case let .success(value): _result.enableMultisession = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["ids.cc.enable"] as AnyObject?) {
                
                case let .success(value): _result.idsCcEnable = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enable.retry"] as AnyObject?) {
                
                case let .success(value): _result.enableRetry = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enable.retry.scripterror"] as AnyObject?) {
                
                case let .success(value): _result.enableRetryScripterror = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["externalizer.domain.cqhost"] as AnyObject?) {
                
                case let .success(value): _result.externalizerDomainCqhost = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["externalizer.domain.http"] as AnyObject?) {
                
                case let .success(value): _result.externalizerDomainHttp = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamIdsImplIDSJobProcessorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamIdsImplIDSPoolManagerImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamIdsImplIDSPoolManagerImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamIdsImplIDSPoolManagerImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamIdsImplIDSPoolManagerImplInfo].self, source: source)
        }

        // Decoder for ComDayCqDamIdsImplIDSPoolManagerImplInfo
        Decoders.addDecoder(clazz: ComDayCqDamIdsImplIDSPoolManagerImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamIdsImplIDSPoolManagerImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamIdsImplIDSPoolManagerImplInfo() : instance as! ComDayCqDamIdsImplIDSPoolManagerImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamIdsImplIDSPoolManagerImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamIdsImplIDSPoolManagerImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamIdsImplIDSPoolManagerImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamIdsImplIDSPoolManagerImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamIdsImplIDSPoolManagerImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamIdsImplIDSPoolManagerImplProperties].self, source: source)
        }

        // Decoder for ComDayCqDamIdsImplIDSPoolManagerImplProperties
        Decoders.addDecoder(clazz: ComDayCqDamIdsImplIDSPoolManagerImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamIdsImplIDSPoolManagerImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamIdsImplIDSPoolManagerImplProperties() : instance as! ComDayCqDamIdsImplIDSPoolManagerImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["max.errors.to.blacklist"] as AnyObject?) {
                
                case let .success(value): _result.maxErrorsToBlacklist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["retry.interval.to.whitelist"] as AnyObject?) {
                
                case let .success(value): _result.retryIntervalToWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["connect.timeout"] as AnyObject?) {
                
                case let .success(value): _result.connectTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["socket.timeout"] as AnyObject?) {
                
                case let .success(value): _result.socketTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["process.label"] as AnyObject?) {
                
                case let .success(value): _result.processLabel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["connection.use.max"] as AnyObject?) {
                
                case let .success(value): _result.connectionUseMax = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamIdsImplIDSPoolManagerImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo].self, source: source)
        }

        // Decoder for ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo
        Decoders.addDecoder(clazz: ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo() : instance as! ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamInddImplHandlerIndesignXMPHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamInddImplHandlerIndesignXMPHandlerProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamInddImplHandlerIndesignXMPHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamInddImplHandlerIndesignXMPHandlerProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamInddImplHandlerIndesignXMPHandlerProperties].self, source: source)
        }

        // Decoder for ComDayCqDamInddImplHandlerIndesignXMPHandlerProperties
        Decoders.addDecoder(clazz: ComDayCqDamInddImplHandlerIndesignXMPHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamInddImplHandlerIndesignXMPHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamInddImplHandlerIndesignXMPHandlerProperties() : instance as! ComDayCqDamInddImplHandlerIndesignXMPHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["process.label"] as AnyObject?) {
                
                case let .success(value): _result.processLabel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["extract.pages"] as AnyObject?) {
                
                case let .success(value): _result.extractPages = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamInddImplHandlerIndesignXMPHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamInddImplServletSnippetCreationServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamInddImplServletSnippetCreationServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamInddImplServletSnippetCreationServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamInddImplServletSnippetCreationServletInfo].self, source: source)
        }

        // Decoder for ComDayCqDamInddImplServletSnippetCreationServletInfo
        Decoders.addDecoder(clazz: ComDayCqDamInddImplServletSnippetCreationServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamInddImplServletSnippetCreationServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamInddImplServletSnippetCreationServletInfo() : instance as! ComDayCqDamInddImplServletSnippetCreationServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamInddImplServletSnippetCreationServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamInddImplServletSnippetCreationServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamInddImplServletSnippetCreationServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamInddImplServletSnippetCreationServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamInddImplServletSnippetCreationServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamInddImplServletSnippetCreationServletProperties].self, source: source)
        }

        // Decoder for ComDayCqDamInddImplServletSnippetCreationServletProperties
        Decoders.addDecoder(clazz: ComDayCqDamInddImplServletSnippetCreationServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamInddImplServletSnippetCreationServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamInddImplServletSnippetCreationServletProperties() : instance as! ComDayCqDamInddImplServletSnippetCreationServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["snippetcreation.maxcollections"] as AnyObject?) {
                
                case let .success(value): _result.snippetcreationMaxcollections = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamInddImplServletSnippetCreationServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamInddProcessINDDMediaExtractProcessInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamInddProcessINDDMediaExtractProcessInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamInddProcessINDDMediaExtractProcessInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamInddProcessINDDMediaExtractProcessInfo].self, source: source)
        }

        // Decoder for ComDayCqDamInddProcessINDDMediaExtractProcessInfo
        Decoders.addDecoder(clazz: ComDayCqDamInddProcessINDDMediaExtractProcessInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamInddProcessINDDMediaExtractProcessInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamInddProcessINDDMediaExtractProcessInfo() : instance as! ComDayCqDamInddProcessINDDMediaExtractProcessInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamInddProcessINDDMediaExtractProcessProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamInddProcessINDDMediaExtractProcessInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamInddProcessINDDMediaExtractProcessProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamInddProcessINDDMediaExtractProcessProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamInddProcessINDDMediaExtractProcessProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamInddProcessINDDMediaExtractProcessProperties].self, source: source)
        }

        // Decoder for ComDayCqDamInddProcessINDDMediaExtractProcessProperties
        Decoders.addDecoder(clazz: ComDayCqDamInddProcessINDDMediaExtractProcessProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamInddProcessINDDMediaExtractProcessProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamInddProcessINDDMediaExtractProcessProperties() : instance as! ComDayCqDamInddProcessINDDMediaExtractProcessProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["process.label"] as AnyObject?) {
                
                case let .success(value): _result.processLabel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.indd.pages.regex"] as AnyObject?) {
                
                case let .success(value): _result.cqDamInddPagesRegex = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["ids.job.decoupled"] as AnyObject?) {
                
                case let .success(value): _result.idsJobDecoupled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["ids.job.workflow.model"] as AnyObject?) {
                
                case let .success(value): _result.idsJobWorkflowModel = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamInddProcessINDDMediaExtractProcessProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo].self, source: source)
        }

        // Decoder for ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo
        Decoders.addDecoder(clazz: ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo() : instance as! ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties].self, source: source)
        }

        // Decoder for ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties
        Decoders.addDecoder(clazz: ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties() : instance as! ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["batch.commit.size"] as AnyObject?) {
                
                case let .success(value): _result.batchCommitSize = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo].self, source: source)
        }

        // Decoder for ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo
        Decoders.addDecoder(clazz: ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo() : instance as! ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties].self, source: source)
        }

        // Decoder for ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties
        Decoders.addDecoder(clazz: ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties() : instance as! ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"] as AnyObject?) {
                
                case let .success(value): _result.schedulerExpression = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo].self, source: source)
        }

        // Decoder for ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo
        Decoders.addDecoder(clazz: ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo() : instance as! ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties].self, source: source)
        }

        // Decoder for ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties
        Decoders.addDecoder(clazz: ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties() : instance as! ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["delete.zip.file"] as AnyObject?) {
                
                case let .success(value): _result.deleteZipFile = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo].self, source: source)
        }

        // Decoder for ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo
        Decoders.addDecoder(clazz: ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo() : instance as! ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties].self, source: source)
        }

        // Decoder for ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties
        Decoders.addDecoder(clazz: ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties() : instance as! ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled"] as AnyObject?) {
                
                case let .success(value): _result.cqDamS7damDynamicmediaconfigeventlistenerEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo].self, source: source)
        }

        // Decoder for ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo
        Decoders.addDecoder(clazz: ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo() : instance as! ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties].self, source: source)
        }

        // Decoder for ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties
        Decoders.addDecoder(clazz: ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties() : instance as! ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"] as AnyObject?) {
                
                case let .success(value): _result.schedulerExpression = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["scheduler.concurrent"] as AnyObject?) {
                
                case let .success(value): _result.schedulerConcurrent = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo].self, source: source)
        }

        // Decoder for ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo
        Decoders.addDecoder(clazz: ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo() : instance as! ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties].self, source: source)
        }

        // Decoder for ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties
        Decoders.addDecoder(clazz: ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties() : instance as! ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.post.operation"] as AnyObject?) {
                
                case let .success(value): _result.slingPostOperation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.methods"] as AnyObject?) {
                
                case let .success(value): _result.slingServletMethods = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo].self, source: source)
        }

        // Decoder for ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo
        Decoders.addDecoder(clazz: ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo() : instance as! ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties].self, source: source)
        }

        // Decoder for ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties
        Decoders.addDecoder(clazz: ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties() : instance as! ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.post.operation"] as AnyObject?) {
                
                case let .success(value): _result.slingPostOperation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.methods"] as AnyObject?) {
                
                case let .success(value): _result.slingServletMethods = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo].self, source: source)
        }

        // Decoder for ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo
        Decoders.addDecoder(clazz: ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo() : instance as! ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties].self, source: source)
        }

        // Decoder for ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties
        Decoders.addDecoder(clazz: ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties() : instance as! ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["process.label"] as AnyObject?) {
                
                case let .success(value): _result.processLabel = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo].self, source: source)
        }

        // Decoder for ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo
        Decoders.addDecoder(clazz: ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo() : instance as! ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties].self, source: source)
        }

        // Decoder for ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties
        Decoders.addDecoder(clazz: ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties() : instance as! ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.s7dam.damchangeeventlistener.enabled"] as AnyObject?) {
                
                case let .success(value): _result.cqDamS7damDamchangeeventlistenerEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo].self, source: source)
        }

        // Decoder for ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo
        Decoders.addDecoder(clazz: ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo() : instance as! ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties].self, source: source)
        }

        // Decoder for ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties
        Decoders.addDecoder(clazz: ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties() : instance as! ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.paths"] as AnyObject?) {
                
                case let .success(value): _result.slingServletPaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.methods"] as AnyObject?) {
                
                case let .success(value): _result.slingServletMethods = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo].self, source: source)
        }

        // Decoder for ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo
        Decoders.addDecoder(clazz: ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo() : instance as! ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties].self, source: source)
        }

        // Decoder for ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties
        Decoders.addDecoder(clazz: ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties() : instance as! ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name"] as AnyObject?) {
                
                case let .success(value): _result.cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name"] as AnyObject?) {
                
                case let .success(value): _result.cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name"] as AnyObject?) {
                
                case let .success(value): _result.cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name"] as AnyObject?) {
                
                case let .success(value): _result.cqDamS7damVideoproxyclientserviceHttpReadtimeoutName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name"] as AnyObject?) {
                
                case let .success(value): _result.cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name"] as AnyObject?) {
                
                case let .success(value): _result.cqDamS7damVideoproxyclientserviceHttpMaxretrycountName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name"] as AnyObject?) {
                
                case let .success(value): _result.cqDamS7damVideoproxyclientserviceUploadprogressIntervalName = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamScene7ImplScene7APIClientImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamScene7ImplScene7APIClientImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamScene7ImplScene7APIClientImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamScene7ImplScene7APIClientImplInfo].self, source: source)
        }

        // Decoder for ComDayCqDamScene7ImplScene7APIClientImplInfo
        Decoders.addDecoder(clazz: ComDayCqDamScene7ImplScene7APIClientImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamScene7ImplScene7APIClientImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamScene7ImplScene7APIClientImplInfo() : instance as! ComDayCqDamScene7ImplScene7APIClientImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamScene7ImplScene7APIClientImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamScene7ImplScene7APIClientImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamScene7ImplScene7APIClientImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamScene7ImplScene7APIClientImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamScene7ImplScene7APIClientImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamScene7ImplScene7APIClientImplProperties].self, source: source)
        }

        // Decoder for ComDayCqDamScene7ImplScene7APIClientImplProperties
        Decoders.addDecoder(clazz: ComDayCqDamScene7ImplScene7APIClientImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamScene7ImplScene7APIClientImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamScene7ImplScene7APIClientImplProperties() : instance as! ComDayCqDamScene7ImplScene7APIClientImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.scene7.apiclient.recordsperpage.nofilter.name"] as AnyObject?) {
                
                case let .success(value): _result.cqDamScene7ApiclientRecordsperpageNofilterName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.scene7.apiclient.recordsperpage.withfilter.name"] as AnyObject?) {
                
                case let .success(value): _result.cqDamScene7ApiclientRecordsperpageWithfilterName = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamScene7ImplScene7APIClientImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo].self, source: source)
        }

        // Decoder for ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo
        Decoders.addDecoder(clazz: ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo() : instance as! ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties].self, source: source)
        }

        // Decoder for ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties
        Decoders.addDecoder(clazz: ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties() : instance as! ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.dam.scene7.assetmimetypeservice.mapping"] as AnyObject?) {
                
                case let .success(value): _result.cqDamScene7AssetmimetypeserviceMapping = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo].self, source: source)
        }

        // Decoder for ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo
        Decoders.addDecoder(clazz: ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo() : instance as! ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties].self, source: source)
        }

        // Decoder for ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties
        Decoders.addDecoder(clazz: ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties() : instance as! ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.scene7.configurationeventlistener.enabled"] as AnyObject?) {
                
                case let .success(value): _result.cqDamScene7ConfigurationeventlistenerEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo].self, source: source)
        }

        // Decoder for ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo
        Decoders.addDecoder(clazz: ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo() : instance as! ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties].self, source: source)
        }

        // Decoder for ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties
        Decoders.addDecoder(clazz: ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties() : instance as! ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.scene7.damchangeeventlistener.enabled"] as AnyObject?) {
                
                case let .success(value): _result.cqDamScene7DamchangeeventlistenerEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.dam.scene7.damchangeeventlistener.observed.paths"] as AnyObject?) {
                
                case let .success(value): _result.cqDamScene7DamchangeeventlistenerObservedPaths = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo].self, source: source)
        }

        // Decoder for ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo
        Decoders.addDecoder(clazz: ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo() : instance as! ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties].self, source: source)
        }

        // Decoder for ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties
        Decoders.addDecoder(clazz: ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties() : instance as! ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scene7FlashTemplates.rti"] as AnyObject?) {
                
                case let .success(value): _result.scene7FlashTemplatesRti = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scene7FlashTemplates.rsi"] as AnyObject?) {
                
                case let .success(value): _result.scene7FlashTemplatesRsi = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scene7FlashTemplates.rb"] as AnyObject?) {
                
                case let .success(value): _result.scene7FlashTemplatesRb = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scene7FlashTemplates.rurl"] as AnyObject?) {
                
                case let .success(value): _result.scene7FlashTemplatesRurl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scene7FlashTemplate.urlFormatParameter"] as AnyObject?) {
                
                case let .success(value): _result.scene7FlashTemplateUrlFormatParameter = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamScene7ImplScene7UploadServiceImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamScene7ImplScene7UploadServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamScene7ImplScene7UploadServiceImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamScene7ImplScene7UploadServiceImplInfo].self, source: source)
        }

        // Decoder for ComDayCqDamScene7ImplScene7UploadServiceImplInfo
        Decoders.addDecoder(clazz: ComDayCqDamScene7ImplScene7UploadServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamScene7ImplScene7UploadServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamScene7ImplScene7UploadServiceImplInfo() : instance as! ComDayCqDamScene7ImplScene7UploadServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamScene7ImplScene7UploadServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamScene7ImplScene7UploadServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamScene7ImplScene7UploadServiceImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamScene7ImplScene7UploadServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamScene7ImplScene7UploadServiceImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamScene7ImplScene7UploadServiceImplProperties].self, source: source)
        }

        // Decoder for ComDayCqDamScene7ImplScene7UploadServiceImplProperties
        Decoders.addDecoder(clazz: ComDayCqDamScene7ImplScene7UploadServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamScene7ImplScene7UploadServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamScene7ImplScene7UploadServiceImplProperties() : instance as! ComDayCqDamScene7ImplScene7UploadServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.scene7.uploadservice.activejobtimeout.label"] as AnyObject?) {
                
                case let .success(value): _result.cqDamScene7UploadserviceActivejobtimeoutLabel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.scene7.uploadservice.connectionmaxperroute.label"] as AnyObject?) {
                
                case let .success(value): _result.cqDamScene7UploadserviceConnectionmaxperrouteLabel = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamScene7ImplScene7UploadServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo].self, source: source)
        }

        // Decoder for ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo
        Decoders.addDecoder(clazz: ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo() : instance as! ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties].self, source: source)
        }

        // Decoder for ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties
        Decoders.addDecoder(clazz: ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties() : instance as! ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["getCacheExpirationUnit"] as AnyObject?) {
                
                case let .success(value): _result.getCacheExpirationUnit = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["getCacheExpirationValue"] as AnyObject?) {
                
                case let .success(value): _result.getCacheExpirationValue = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo].self, source: source)
        }

        // Decoder for ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo
        Decoders.addDecoder(clazz: ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo() : instance as! ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties].self, source: source)
        }

        // Decoder for ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties
        Decoders.addDecoder(clazz: ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties() : instance as! ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["locale"] as AnyObject?) {
                
                case let .success(value): _result.locale = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["imsConfig"] as AnyObject?) {
                
                case let .success(value): _result.imsConfig = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamVideoImplServletVideoTestServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqDamVideoImplServletVideoTestServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamVideoImplServletVideoTestServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqDamVideoImplServletVideoTestServletInfo].self, source: source)
        }

        // Decoder for ComDayCqDamVideoImplServletVideoTestServletInfo
        Decoders.addDecoder(clazz: ComDayCqDamVideoImplServletVideoTestServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamVideoImplServletVideoTestServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamVideoImplServletVideoTestServletInfo() : instance as! ComDayCqDamVideoImplServletVideoTestServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqDamVideoImplServletVideoTestServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamVideoImplServletVideoTestServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqDamVideoImplServletVideoTestServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqDamVideoImplServletVideoTestServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqDamVideoImplServletVideoTestServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqDamVideoImplServletVideoTestServletProperties].self, source: source)
        }

        // Decoder for ComDayCqDamVideoImplServletVideoTestServletProperties
        Decoders.addDecoder(clazz: ComDayCqDamVideoImplServletVideoTestServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqDamVideoImplServletVideoTestServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqDamVideoImplServletVideoTestServletProperties() : instance as! ComDayCqDamVideoImplServletVideoTestServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqDamVideoImplServletVideoTestServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqExtwidgetServletsImageSpriteServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqExtwidgetServletsImageSpriteServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqExtwidgetServletsImageSpriteServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqExtwidgetServletsImageSpriteServletInfo].self, source: source)
        }

        // Decoder for ComDayCqExtwidgetServletsImageSpriteServletInfo
        Decoders.addDecoder(clazz: ComDayCqExtwidgetServletsImageSpriteServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqExtwidgetServletsImageSpriteServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqExtwidgetServletsImageSpriteServletInfo() : instance as! ComDayCqExtwidgetServletsImageSpriteServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqExtwidgetServletsImageSpriteServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqExtwidgetServletsImageSpriteServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqExtwidgetServletsImageSpriteServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqExtwidgetServletsImageSpriteServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqExtwidgetServletsImageSpriteServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqExtwidgetServletsImageSpriteServletProperties].self, source: source)
        }

        // Decoder for ComDayCqExtwidgetServletsImageSpriteServletProperties
        Decoders.addDecoder(clazz: ComDayCqExtwidgetServletsImageSpriteServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqExtwidgetServletsImageSpriteServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqExtwidgetServletsImageSpriteServletProperties() : instance as! ComDayCqExtwidgetServletsImageSpriteServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxWidth"] as AnyObject?) {
                
                case let .success(value): _result.maxWidth = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxHeight"] as AnyObject?) {
                
                case let .success(value): _result.maxHeight = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqExtwidgetServletsImageSpriteServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqImageInternalFontFontHelperInfo]
        Decoders.addDecoder(clazz: [ComDayCqImageInternalFontFontHelperInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqImageInternalFontFontHelperInfo]> in
            return Decoders.decode(clazz: [ComDayCqImageInternalFontFontHelperInfo].self, source: source)
        }

        // Decoder for ComDayCqImageInternalFontFontHelperInfo
        Decoders.addDecoder(clazz: ComDayCqImageInternalFontFontHelperInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqImageInternalFontFontHelperInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqImageInternalFontFontHelperInfo() : instance as! ComDayCqImageInternalFontFontHelperInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqImageInternalFontFontHelperProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqImageInternalFontFontHelperInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqImageInternalFontFontHelperProperties]
        Decoders.addDecoder(clazz: [ComDayCqImageInternalFontFontHelperProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqImageInternalFontFontHelperProperties]> in
            return Decoders.decode(clazz: [ComDayCqImageInternalFontFontHelperProperties].self, source: source)
        }

        // Decoder for ComDayCqImageInternalFontFontHelperProperties
        Decoders.addDecoder(clazz: ComDayCqImageInternalFontFontHelperProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqImageInternalFontFontHelperProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqImageInternalFontFontHelperProperties() : instance as! ComDayCqImageInternalFontFontHelperProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fontpath"] as AnyObject?) {
                
                case let .success(value): _result.fontpath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["oversamplingFactor"] as AnyObject?) {
                
                case let .success(value): _result.oversamplingFactor = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqImageInternalFontFontHelperProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqJcrclustersupportClusterStartLevelControllerInfo]
        Decoders.addDecoder(clazz: [ComDayCqJcrclustersupportClusterStartLevelControllerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqJcrclustersupportClusterStartLevelControllerInfo]> in
            return Decoders.decode(clazz: [ComDayCqJcrclustersupportClusterStartLevelControllerInfo].self, source: source)
        }

        // Decoder for ComDayCqJcrclustersupportClusterStartLevelControllerInfo
        Decoders.addDecoder(clazz: ComDayCqJcrclustersupportClusterStartLevelControllerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqJcrclustersupportClusterStartLevelControllerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqJcrclustersupportClusterStartLevelControllerInfo() : instance as! ComDayCqJcrclustersupportClusterStartLevelControllerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqJcrclustersupportClusterStartLevelControllerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqJcrclustersupportClusterStartLevelControllerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqJcrclustersupportClusterStartLevelControllerProperties]
        Decoders.addDecoder(clazz: [ComDayCqJcrclustersupportClusterStartLevelControllerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqJcrclustersupportClusterStartLevelControllerProperties]> in
            return Decoders.decode(clazz: [ComDayCqJcrclustersupportClusterStartLevelControllerProperties].self, source: source)
        }

        // Decoder for ComDayCqJcrclustersupportClusterStartLevelControllerProperties
        Decoders.addDecoder(clazz: ComDayCqJcrclustersupportClusterStartLevelControllerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqJcrclustersupportClusterStartLevelControllerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqJcrclustersupportClusterStartLevelControllerProperties() : instance as! ComDayCqJcrclustersupportClusterStartLevelControllerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cluster.level.enable"] as AnyObject?) {
                
                case let .success(value): _result.clusterLevelEnable = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.master.level"] as AnyObject?) {
                
                case let .success(value): _result.clusterMasterLevel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.slave.level"] as AnyObject?) {
                
                case let .success(value): _result.clusterSlaveLevel = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqJcrclustersupportClusterStartLevelControllerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMailerDefaultMailServiceInfo]
        Decoders.addDecoder(clazz: [ComDayCqMailerDefaultMailServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMailerDefaultMailServiceInfo]> in
            return Decoders.decode(clazz: [ComDayCqMailerDefaultMailServiceInfo].self, source: source)
        }

        // Decoder for ComDayCqMailerDefaultMailServiceInfo
        Decoders.addDecoder(clazz: ComDayCqMailerDefaultMailServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMailerDefaultMailServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMailerDefaultMailServiceInfo() : instance as! ComDayCqMailerDefaultMailServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqMailerDefaultMailServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMailerDefaultMailServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMailerDefaultMailServiceProperties]
        Decoders.addDecoder(clazz: [ComDayCqMailerDefaultMailServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMailerDefaultMailServiceProperties]> in
            return Decoders.decode(clazz: [ComDayCqMailerDefaultMailServiceProperties].self, source: source)
        }

        // Decoder for ComDayCqMailerDefaultMailServiceProperties
        Decoders.addDecoder(clazz: ComDayCqMailerDefaultMailServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMailerDefaultMailServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMailerDefaultMailServiceProperties() : instance as! ComDayCqMailerDefaultMailServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["smtp.host"] as AnyObject?) {
                
                case let .success(value): _result.smtpHost = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["smtp.port"] as AnyObject?) {
                
                case let .success(value): _result.smtpPort = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["smtp.user"] as AnyObject?) {
                
                case let .success(value): _result.smtpUser = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["smtp.password"] as AnyObject?) {
                
                case let .success(value): _result.smtpPassword = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["from.address"] as AnyObject?) {
                
                case let .success(value): _result.fromAddress = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["smtp.ssl"] as AnyObject?) {
                
                case let .success(value): _result.smtpSsl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["smtp.starttls"] as AnyObject?) {
                
                case let .success(value): _result.smtpStarttls = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["debug.email"] as AnyObject?) {
                
                case let .success(value): _result.debugEmail = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMailerDefaultMailServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMailerImplCqMailingServiceInfo]
        Decoders.addDecoder(clazz: [ComDayCqMailerImplCqMailingServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMailerImplCqMailingServiceInfo]> in
            return Decoders.decode(clazz: [ComDayCqMailerImplCqMailingServiceInfo].self, source: source)
        }

        // Decoder for ComDayCqMailerImplCqMailingServiceInfo
        Decoders.addDecoder(clazz: ComDayCqMailerImplCqMailingServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMailerImplCqMailingServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMailerImplCqMailingServiceInfo() : instance as! ComDayCqMailerImplCqMailingServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqMailerImplCqMailingServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMailerImplCqMailingServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMailerImplCqMailingServiceProperties]
        Decoders.addDecoder(clazz: [ComDayCqMailerImplCqMailingServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMailerImplCqMailingServiceProperties]> in
            return Decoders.decode(clazz: [ComDayCqMailerImplCqMailingServiceProperties].self, source: source)
        }

        // Decoder for ComDayCqMailerImplCqMailingServiceProperties
        Decoders.addDecoder(clazz: ComDayCqMailerImplCqMailingServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMailerImplCqMailingServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMailerImplCqMailingServiceProperties() : instance as! ComDayCqMailerImplCqMailingServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["max.recipient.count"] as AnyObject?) {
                
                case let .success(value): _result.maxRecipientCount = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMailerImplCqMailingServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo]
        Decoders.addDecoder(clazz: [ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo]> in
            return Decoders.decode(clazz: [ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo].self, source: source)
        }

        // Decoder for ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo
        Decoders.addDecoder(clazz: ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo() : instance as! ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties]
        Decoders.addDecoder(clazz: [ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties]> in
            return Decoders.decode(clazz: [ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties].self, source: source)
        }

        // Decoder for ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties
        Decoders.addDecoder(clazz: ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties() : instance as! ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["mailer.email.charset"] as AnyObject?) {
                
                case let .success(value): _result.mailerEmailCharset = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo]
        Decoders.addDecoder(clazz: [ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo]> in
            return Decoders.decode(clazz: [ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo].self, source: source)
        }

        // Decoder for ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo
        Decoders.addDecoder(clazz: ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo() : instance as! ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties]
        Decoders.addDecoder(clazz: [ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties]> in
            return Decoders.decode(clazz: [ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties].self, source: source)
        }

        // Decoder for ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties
        Decoders.addDecoder(clazz: ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties() : instance as! ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["mailer.email.embed"] as AnyObject?) {
                
                case let .success(value): _result.mailerEmailEmbed = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["mailer.email.charset"] as AnyObject?) {
                
                case let .success(value): _result.mailerEmailCharset = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["mailer.email.retrieverUserID"] as AnyObject?) {
                
                case let .success(value): _result.mailerEmailRetrieverUserID = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["mailer.email.retrieverUserPWD"] as AnyObject?) {
                
                case let .success(value): _result.mailerEmailRetrieverUserPWD = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMcmCampaignImplIntegrationConfigImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqMcmCampaignImplIntegrationConfigImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMcmCampaignImplIntegrationConfigImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqMcmCampaignImplIntegrationConfigImplInfo].self, source: source)
        }

        // Decoder for ComDayCqMcmCampaignImplIntegrationConfigImplInfo
        Decoders.addDecoder(clazz: ComDayCqMcmCampaignImplIntegrationConfigImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMcmCampaignImplIntegrationConfigImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMcmCampaignImplIntegrationConfigImplInfo() : instance as! ComDayCqMcmCampaignImplIntegrationConfigImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqMcmCampaignImplIntegrationConfigImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMcmCampaignImplIntegrationConfigImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMcmCampaignImplIntegrationConfigImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqMcmCampaignImplIntegrationConfigImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMcmCampaignImplIntegrationConfigImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqMcmCampaignImplIntegrationConfigImplProperties].self, source: source)
        }

        // Decoder for ComDayCqMcmCampaignImplIntegrationConfigImplProperties
        Decoders.addDecoder(clazz: ComDayCqMcmCampaignImplIntegrationConfigImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMcmCampaignImplIntegrationConfigImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMcmCampaignImplIntegrationConfigImplProperties() : instance as! ComDayCqMcmCampaignImplIntegrationConfigImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["aem.mcm.campaign.formConstraints"] as AnyObject?) {
                
                case let .success(value): _result.aemMcmCampaignFormConstraints = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["aem.mcm.campaign.publicUrl"] as AnyObject?) {
                
                case let .success(value): _result.aemMcmCampaignPublicUrl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["aem.mcm.campaign.relaxedSSL"] as AnyObject?) {
                
                case let .success(value): _result.aemMcmCampaignRelaxedSSL = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMcmCampaignImplIntegrationConfigImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo]
        Decoders.addDecoder(clazz: [ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo]> in
            return Decoders.decode(clazz: [ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo].self, source: source)
        }

        // Decoder for ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo
        Decoders.addDecoder(clazz: ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo() : instance as! ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties]
        Decoders.addDecoder(clazz: [ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties]> in
            return Decoders.decode(clazz: [ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties].self, source: source)
        }

        // Decoder for ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties
        Decoders.addDecoder(clazz: ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties() : instance as! ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"] as AnyObject?) {
                
                case let .success(value): _result.tagpattern = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo].self, source: source)
        }

        // Decoder for ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo
        Decoders.addDecoder(clazz: ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo() : instance as! ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties].self, source: source)
        }

        // Decoder for ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties
        Decoders.addDecoder(clazz: ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties() : instance as! ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["from.address"] as AnyObject?) {
                
                case let .success(value): _result.fromAddress = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sender.host"] as AnyObject?) {
                
                case let .success(value): _result.senderHost = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["max.bounce.count"] as AnyObject?) {
                
                case let .success(value): _result.maxBounceCount = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMcmImplMCMConfigurationInfo]
        Decoders.addDecoder(clazz: [ComDayCqMcmImplMCMConfigurationInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMcmImplMCMConfigurationInfo]> in
            return Decoders.decode(clazz: [ComDayCqMcmImplMCMConfigurationInfo].self, source: source)
        }

        // Decoder for ComDayCqMcmImplMCMConfigurationInfo
        Decoders.addDecoder(clazz: ComDayCqMcmImplMCMConfigurationInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMcmImplMCMConfigurationInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMcmImplMCMConfigurationInfo() : instance as! ComDayCqMcmImplMCMConfigurationInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqMcmImplMCMConfigurationProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMcmImplMCMConfigurationInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMcmImplMCMConfigurationProperties]
        Decoders.addDecoder(clazz: [ComDayCqMcmImplMCMConfigurationProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMcmImplMCMConfigurationProperties]> in
            return Decoders.decode(clazz: [ComDayCqMcmImplMCMConfigurationProperties].self, source: source)
        }

        // Decoder for ComDayCqMcmImplMCMConfigurationProperties
        Decoders.addDecoder(clazz: ComDayCqMcmImplMCMConfigurationProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMcmImplMCMConfigurationProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMcmImplMCMConfigurationProperties() : instance as! ComDayCqMcmImplMCMConfigurationProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["experience.indirection"] as AnyObject?) {
                
                case let .success(value): _result.experienceIndirection = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["touchpoint.indirection"] as AnyObject?) {
                
                case let .success(value): _result.touchpointIndirection = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMcmImplMCMConfigurationProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo]
        Decoders.addDecoder(clazz: [ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo]> in
            return Decoders.decode(clazz: [ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo].self, source: source)
        }

        // Decoder for ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo
        Decoders.addDecoder(clazz: ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo() : instance as! ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties]
        Decoders.addDecoder(clazz: [ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties]> in
            return Decoders.decode(clazz: [ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties].self, source: source)
        }

        // Decoder for ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties
        Decoders.addDecoder(clazz: ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties() : instance as! ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"] as AnyObject?) {
                
                case let .success(value): _result.tagpattern = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["component.resourceType"] as AnyObject?) {
                
                case let .success(value): _result.componentResourceType = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo]
        Decoders.addDecoder(clazz: [ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo]> in
            return Decoders.decode(clazz: [ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo].self, source: source)
        }

        // Decoder for ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo
        Decoders.addDecoder(clazz: ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo() : instance as! ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties]
        Decoders.addDecoder(clazz: [ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties]> in
            return Decoders.decode(clazz: [ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties].self, source: source)
        }

        // Decoder for ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties
        Decoders.addDecoder(clazz: ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties() : instance as! ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"] as AnyObject?) {
                
                case let .success(value): _result.tagpattern = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["component.resourceType"] as AnyObject?) {
                
                case let .success(value): _result.componentResourceType = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo]
        Decoders.addDecoder(clazz: [ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo]> in
            return Decoders.decode(clazz: [ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo].self, source: source)
        }

        // Decoder for ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo
        Decoders.addDecoder(clazz: ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo() : instance as! ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentProperties]
        Decoders.addDecoder(clazz: [ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentProperties]> in
            return Decoders.decode(clazz: [ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentProperties].self, source: source)
        }

        // Decoder for ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentProperties
        Decoders.addDecoder(clazz: ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentProperties() : instance as! ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"] as AnyObject?) {
                
                case let .success(value): _result.tagpattern = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo]
        Decoders.addDecoder(clazz: [ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo]> in
            return Decoders.decode(clazz: [ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo].self, source: source)
        }

        // Decoder for ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo
        Decoders.addDecoder(clazz: ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo() : instance as! ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties]
        Decoders.addDecoder(clazz: [ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties]> in
            return Decoders.decode(clazz: [ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties].self, source: source)
        }

        // Decoder for ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties
        Decoders.addDecoder(clazz: ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties() : instance as! ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"] as AnyObject?) {
                
                case let .success(value): _result.tagpattern = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo]
        Decoders.addDecoder(clazz: [ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo]> in
            return Decoders.decode(clazz: [ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo].self, source: source)
        }

        // Decoder for ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo
        Decoders.addDecoder(clazz: ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo() : instance as! ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties]
        Decoders.addDecoder(clazz: [ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties]> in
            return Decoders.decode(clazz: [ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties].self, source: source)
        }

        // Decoder for ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties
        Decoders.addDecoder(clazz: ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties() : instance as! ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"] as AnyObject?) {
                
                case let .success(value): _result.tagpattern = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["component.resourceType"] as AnyObject?) {
                
                case let .success(value): _result.componentResourceType = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqNotificationImplNotificationServiceImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqNotificationImplNotificationServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqNotificationImplNotificationServiceImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqNotificationImplNotificationServiceImplInfo].self, source: source)
        }

        // Decoder for ComDayCqNotificationImplNotificationServiceImplInfo
        Decoders.addDecoder(clazz: ComDayCqNotificationImplNotificationServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqNotificationImplNotificationServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqNotificationImplNotificationServiceImplInfo() : instance as! ComDayCqNotificationImplNotificationServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqNotificationImplNotificationServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqNotificationImplNotificationServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqNotificationImplNotificationServiceImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqNotificationImplNotificationServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqNotificationImplNotificationServiceImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqNotificationImplNotificationServiceImplProperties].self, source: source)
        }

        // Decoder for ComDayCqNotificationImplNotificationServiceImplProperties
        Decoders.addDecoder(clazz: ComDayCqNotificationImplNotificationServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqNotificationImplNotificationServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqNotificationImplNotificationServiceImplProperties() : instance as! ComDayCqNotificationImplNotificationServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"] as AnyObject?) {
                
                case let .success(value): _result.eventFilter = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqNotificationImplNotificationServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo].self, source: source)
        }

        // Decoder for ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo
        Decoders.addDecoder(clazz: ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo() : instance as! ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties].self, source: source)
        }

        // Decoder for ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties
        Decoders.addDecoder(clazz: ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties() : instance as! ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["forcelocation"] as AnyObject?) {
                
                case let .success(value): _result.forcelocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqPollingImporterImplManagedPollConfigImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqPollingImporterImplManagedPollConfigImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqPollingImporterImplManagedPollConfigImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqPollingImporterImplManagedPollConfigImplInfo].self, source: source)
        }

        // Decoder for ComDayCqPollingImporterImplManagedPollConfigImplInfo
        Decoders.addDecoder(clazz: ComDayCqPollingImporterImplManagedPollConfigImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqPollingImporterImplManagedPollConfigImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqPollingImporterImplManagedPollConfigImplInfo() : instance as! ComDayCqPollingImporterImplManagedPollConfigImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqPollingImporterImplManagedPollConfigImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqPollingImporterImplManagedPollConfigImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqPollingImporterImplManagedPollConfigImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqPollingImporterImplManagedPollConfigImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqPollingImporterImplManagedPollConfigImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqPollingImporterImplManagedPollConfigImplProperties].self, source: source)
        }

        // Decoder for ComDayCqPollingImporterImplManagedPollConfigImplProperties
        Decoders.addDecoder(clazz: ComDayCqPollingImporterImplManagedPollConfigImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqPollingImporterImplManagedPollConfigImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqPollingImporterImplManagedPollConfigImplProperties() : instance as! ComDayCqPollingImporterImplManagedPollConfigImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["reference"] as AnyObject?) {
                
                case let .success(value): _result.reference = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["interval"] as AnyObject?) {
                
                case let .success(value): _result.interval = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["expression"] as AnyObject?) {
                
                case let .success(value): _result.expression = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["source"] as AnyObject?) {
                
                case let .success(value): _result.source = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["target"] as AnyObject?) {
                
                case let .success(value): _result.target = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["login"] as AnyObject?) {
                
                case let .success(value): _result.login = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["password"] as AnyObject?) {
                
                case let .success(value): _result.password = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqPollingImporterImplManagedPollConfigImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqPollingImporterImplManagedPollingImporterImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqPollingImporterImplManagedPollingImporterImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqPollingImporterImplManagedPollingImporterImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqPollingImporterImplManagedPollingImporterImplInfo].self, source: source)
        }

        // Decoder for ComDayCqPollingImporterImplManagedPollingImporterImplInfo
        Decoders.addDecoder(clazz: ComDayCqPollingImporterImplManagedPollingImporterImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqPollingImporterImplManagedPollingImporterImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqPollingImporterImplManagedPollingImporterImplInfo() : instance as! ComDayCqPollingImporterImplManagedPollingImporterImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqPollingImporterImplManagedPollingImporterImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqPollingImporterImplManagedPollingImporterImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqPollingImporterImplManagedPollingImporterImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqPollingImporterImplManagedPollingImporterImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqPollingImporterImplManagedPollingImporterImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqPollingImporterImplManagedPollingImporterImplProperties].self, source: source)
        }

        // Decoder for ComDayCqPollingImporterImplManagedPollingImporterImplProperties
        Decoders.addDecoder(clazz: ComDayCqPollingImporterImplManagedPollingImporterImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqPollingImporterImplManagedPollingImporterImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqPollingImporterImplManagedPollingImporterImplProperties() : instance as! ComDayCqPollingImporterImplManagedPollingImporterImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["importer.user"] as AnyObject?) {
                
                case let .success(value): _result.importerUser = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqPollingImporterImplManagedPollingImporterImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqPollingImporterImplPollingImporterImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqPollingImporterImplPollingImporterImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqPollingImporterImplPollingImporterImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqPollingImporterImplPollingImporterImplInfo].self, source: source)
        }

        // Decoder for ComDayCqPollingImporterImplPollingImporterImplInfo
        Decoders.addDecoder(clazz: ComDayCqPollingImporterImplPollingImporterImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqPollingImporterImplPollingImporterImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqPollingImporterImplPollingImporterImplInfo() : instance as! ComDayCqPollingImporterImplPollingImporterImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqPollingImporterImplPollingImporterImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqPollingImporterImplPollingImporterImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqPollingImporterImplPollingImporterImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqPollingImporterImplPollingImporterImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqPollingImporterImplPollingImporterImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqPollingImporterImplPollingImporterImplProperties].self, source: source)
        }

        // Decoder for ComDayCqPollingImporterImplPollingImporterImplProperties
        Decoders.addDecoder(clazz: ComDayCqPollingImporterImplPollingImporterImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqPollingImporterImplPollingImporterImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqPollingImporterImplPollingImporterImplProperties() : instance as! ComDayCqPollingImporterImplPollingImporterImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["importer.min.interval"] as AnyObject?) {
                
                case let .success(value): _result.importerMinInterval = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["importer.user"] as AnyObject?) {
                
                case let .success(value): _result.importerUser = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["exclude.paths"] as AnyObject?) {
                
                case let .success(value): _result.excludePaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["include.paths"] as AnyObject?) {
                
                case let .success(value): _result.includePaths = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqPollingImporterImplPollingImporterImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReplicationAuditReplicationEventListenerInfo]
        Decoders.addDecoder(clazz: [ComDayCqReplicationAuditReplicationEventListenerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReplicationAuditReplicationEventListenerInfo]> in
            return Decoders.decode(clazz: [ComDayCqReplicationAuditReplicationEventListenerInfo].self, source: source)
        }

        // Decoder for ComDayCqReplicationAuditReplicationEventListenerInfo
        Decoders.addDecoder(clazz: ComDayCqReplicationAuditReplicationEventListenerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReplicationAuditReplicationEventListenerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReplicationAuditReplicationEventListenerInfo() : instance as! ComDayCqReplicationAuditReplicationEventListenerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqReplicationAuditReplicationEventListenerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReplicationAuditReplicationEventListenerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReplicationAuditReplicationEventListenerProperties]
        Decoders.addDecoder(clazz: [ComDayCqReplicationAuditReplicationEventListenerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReplicationAuditReplicationEventListenerProperties]> in
            return Decoders.decode(clazz: [ComDayCqReplicationAuditReplicationEventListenerProperties].self, source: source)
        }

        // Decoder for ComDayCqReplicationAuditReplicationEventListenerProperties
        Decoders.addDecoder(clazz: ComDayCqReplicationAuditReplicationEventListenerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReplicationAuditReplicationEventListenerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReplicationAuditReplicationEventListenerProperties() : instance as! ComDayCqReplicationAuditReplicationEventListenerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReplicationAuditReplicationEventListenerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReplicationContentStaticContentBuilderInfo]
        Decoders.addDecoder(clazz: [ComDayCqReplicationContentStaticContentBuilderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReplicationContentStaticContentBuilderInfo]> in
            return Decoders.decode(clazz: [ComDayCqReplicationContentStaticContentBuilderInfo].self, source: source)
        }

        // Decoder for ComDayCqReplicationContentStaticContentBuilderInfo
        Decoders.addDecoder(clazz: ComDayCqReplicationContentStaticContentBuilderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReplicationContentStaticContentBuilderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReplicationContentStaticContentBuilderInfo() : instance as! ComDayCqReplicationContentStaticContentBuilderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqReplicationContentStaticContentBuilderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReplicationContentStaticContentBuilderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReplicationContentStaticContentBuilderProperties]
        Decoders.addDecoder(clazz: [ComDayCqReplicationContentStaticContentBuilderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReplicationContentStaticContentBuilderProperties]> in
            return Decoders.decode(clazz: [ComDayCqReplicationContentStaticContentBuilderProperties].self, source: source)
        }

        // Decoder for ComDayCqReplicationContentStaticContentBuilderProperties
        Decoders.addDecoder(clazz: ComDayCqReplicationContentStaticContentBuilderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReplicationContentStaticContentBuilderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReplicationContentStaticContentBuilderProperties() : instance as! ComDayCqReplicationContentStaticContentBuilderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["host"] as AnyObject?) {
                
                case let .success(value): _result.host = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["port"] as AnyObject?) {
                
                case let .success(value): _result.port = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReplicationContentStaticContentBuilderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReplicationImplAgentManagerImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqReplicationImplAgentManagerImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReplicationImplAgentManagerImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqReplicationImplAgentManagerImplInfo].self, source: source)
        }

        // Decoder for ComDayCqReplicationImplAgentManagerImplInfo
        Decoders.addDecoder(clazz: ComDayCqReplicationImplAgentManagerImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReplicationImplAgentManagerImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReplicationImplAgentManagerImplInfo() : instance as! ComDayCqReplicationImplAgentManagerImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqReplicationImplAgentManagerImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReplicationImplAgentManagerImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReplicationImplAgentManagerImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqReplicationImplAgentManagerImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReplicationImplAgentManagerImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqReplicationImplAgentManagerImplProperties].self, source: source)
        }

        // Decoder for ComDayCqReplicationImplAgentManagerImplProperties
        Decoders.addDecoder(clazz: ComDayCqReplicationImplAgentManagerImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReplicationImplAgentManagerImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReplicationImplAgentManagerImplProperties() : instance as! ComDayCqReplicationImplAgentManagerImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["job.topics"] as AnyObject?) {
                
                case let .success(value): _result.jobTopics = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceUser.target"] as AnyObject?) {
                
                case let .success(value): _result.serviceUserTarget = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["agentProvider.target"] as AnyObject?) {
                
                case let .success(value): _result.agentProviderTarget = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReplicationImplAgentManagerImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo]
        Decoders.addDecoder(clazz: [ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo]> in
            return Decoders.decode(clazz: [ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo].self, source: source)
        }

        // Decoder for ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo
        Decoders.addDecoder(clazz: ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo() : instance as! ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties]
        Decoders.addDecoder(clazz: [ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties]> in
            return Decoders.decode(clazz: [ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties].self, source: source)
        }

        // Decoder for ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties
        Decoders.addDecoder(clazz: ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties() : instance as! ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["binary.threshold"] as AnyObject?) {
                
                case let .success(value): _result.binaryThreshold = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo]
        Decoders.addDecoder(clazz: [ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo]> in
            return Decoders.decode(clazz: [ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo].self, source: source)
        }

        // Decoder for ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo
        Decoders.addDecoder(clazz: ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo() : instance as! ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties]
        Decoders.addDecoder(clazz: [ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties]> in
            return Decoders.decode(clazz: [ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties].self, source: source)
        }

        // Decoder for ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties
        Decoders.addDecoder(clazz: ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties() : instance as! ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["preserve.hierarchy.nodes"] as AnyObject?) {
                
                case let .success(value): _result.preserveHierarchyNodes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["ignore.versioning"] as AnyObject?) {
                
                case let .success(value): _result.ignoreVersioning = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["import.acl"] as AnyObject?) {
                
                case let .success(value): _result.importAcl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["save.threshold"] as AnyObject?) {
                
                case let .success(value): _result.saveThreshold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["preserve.user.paths"] as AnyObject?) {
                
                case let .success(value): _result.preserveUserPaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["preserve.uuid"] as AnyObject?) {
                
                case let .success(value): _result.preserveUuid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["preserve.uuid.nodetypes"] as AnyObject?) {
                
                case let .success(value): _result.preserveUuidNodetypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["preserve.uuid.subtrees"] as AnyObject?) {
                
                case let .success(value): _result.preserveUuidSubtrees = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["auto.commit"] as AnyObject?) {
                
                case let .success(value): _result.autoCommit = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo].self, source: source)
        }

        // Decoder for ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo
        Decoders.addDecoder(clazz: ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo() : instance as! ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties].self, source: source)
        }

        // Decoder for ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties
        Decoders.addDecoder(clazz: ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties() : instance as! ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["replication.content.useFileStorage"] as AnyObject?) {
                
                case let .success(value): _result.replicationContentUseFileStorage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["replication.content.maxCommitAttempts"] as AnyObject?) {
                
                case let .success(value): _result.replicationContentMaxCommitAttempts = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReplicationImplReplicationReceiverImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqReplicationImplReplicationReceiverImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReplicationImplReplicationReceiverImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqReplicationImplReplicationReceiverImplInfo].self, source: source)
        }

        // Decoder for ComDayCqReplicationImplReplicationReceiverImplInfo
        Decoders.addDecoder(clazz: ComDayCqReplicationImplReplicationReceiverImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReplicationImplReplicationReceiverImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReplicationImplReplicationReceiverImplInfo() : instance as! ComDayCqReplicationImplReplicationReceiverImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqReplicationImplReplicationReceiverImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReplicationImplReplicationReceiverImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReplicationImplReplicationReceiverImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqReplicationImplReplicationReceiverImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReplicationImplReplicationReceiverImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqReplicationImplReplicationReceiverImplProperties].self, source: source)
        }

        // Decoder for ComDayCqReplicationImplReplicationReceiverImplProperties
        Decoders.addDecoder(clazz: ComDayCqReplicationImplReplicationReceiverImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReplicationImplReplicationReceiverImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReplicationImplReplicationReceiverImplProperties() : instance as! ComDayCqReplicationImplReplicationReceiverImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["receiver.tmpfile.threshold"] as AnyObject?) {
                
                case let .success(value): _result.receiverTmpfileThreshold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["receiver.packages.use.install"] as AnyObject?) {
                
                case let .success(value): _result.receiverPackagesUseInstall = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReplicationImplReplicationReceiverImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReplicationImplReplicatorImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqReplicationImplReplicatorImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReplicationImplReplicatorImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqReplicationImplReplicatorImplInfo].self, source: source)
        }

        // Decoder for ComDayCqReplicationImplReplicatorImplInfo
        Decoders.addDecoder(clazz: ComDayCqReplicationImplReplicatorImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReplicationImplReplicatorImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReplicationImplReplicatorImplInfo() : instance as! ComDayCqReplicationImplReplicatorImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqReplicationImplReplicatorImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReplicationImplReplicatorImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReplicationImplReplicatorImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqReplicationImplReplicatorImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReplicationImplReplicatorImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqReplicationImplReplicatorImplProperties].self, source: source)
        }

        // Decoder for ComDayCqReplicationImplReplicatorImplProperties
        Decoders.addDecoder(clazz: ComDayCqReplicationImplReplicatorImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReplicationImplReplicatorImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReplicationImplReplicatorImplProperties() : instance as! ComDayCqReplicationImplReplicatorImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["distribute_events"] as AnyObject?) {
                
                case let .success(value): _result.distributeEvents = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReplicationImplReplicatorImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReplicationImplReverseReplicatorInfo]
        Decoders.addDecoder(clazz: [ComDayCqReplicationImplReverseReplicatorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReplicationImplReverseReplicatorInfo]> in
            return Decoders.decode(clazz: [ComDayCqReplicationImplReverseReplicatorInfo].self, source: source)
        }

        // Decoder for ComDayCqReplicationImplReverseReplicatorInfo
        Decoders.addDecoder(clazz: ComDayCqReplicationImplReverseReplicatorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReplicationImplReverseReplicatorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReplicationImplReverseReplicatorInfo() : instance as! ComDayCqReplicationImplReverseReplicatorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqReplicationImplReverseReplicatorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"] as AnyObject?) {
                
                case let .success(value): _result.additionalProperties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReplicationImplReverseReplicatorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReplicationImplReverseReplicatorProperties]
        Decoders.addDecoder(clazz: [ComDayCqReplicationImplReverseReplicatorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReplicationImplReverseReplicatorProperties]> in
            return Decoders.decode(clazz: [ComDayCqReplicationImplReverseReplicatorProperties].self, source: source)
        }

        // Decoder for ComDayCqReplicationImplReverseReplicatorProperties
        Decoders.addDecoder(clazz: ComDayCqReplicationImplReverseReplicatorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReplicationImplReverseReplicatorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReplicationImplReverseReplicatorProperties() : instance as! ComDayCqReplicationImplReverseReplicatorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["scheduler.period"] as AnyObject?) {
                
                case let .success(value): _result.schedulerPeriod = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReplicationImplReverseReplicatorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo]
        Decoders.addDecoder(clazz: [ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo]> in
            return Decoders.decode(clazz: [ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo].self, source: source)
        }

        // Decoder for ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo
        Decoders.addDecoder(clazz: ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo() : instance as! ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties]
        Decoders.addDecoder(clazz: [ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties]> in
            return Decoders.decode(clazz: [ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties].self, source: source)
        }

        // Decoder for ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties
        Decoders.addDecoder(clazz: ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties() : instance as! ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["disabled.cipher.suites"] as AnyObject?) {
                
                case let .success(value): _result.disabledCipherSuites = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["enabled.cipher.suites"] as AnyObject?) {
                
                case let .success(value): _result.enabledCipherSuites = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReplicationImplTransportHttpInfo]
        Decoders.addDecoder(clazz: [ComDayCqReplicationImplTransportHttpInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReplicationImplTransportHttpInfo]> in
            return Decoders.decode(clazz: [ComDayCqReplicationImplTransportHttpInfo].self, source: source)
        }

        // Decoder for ComDayCqReplicationImplTransportHttpInfo
        Decoders.addDecoder(clazz: ComDayCqReplicationImplTransportHttpInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReplicationImplTransportHttpInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReplicationImplTransportHttpInfo() : instance as! ComDayCqReplicationImplTransportHttpInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqReplicationImplTransportHttpProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReplicationImplTransportHttpInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReplicationImplTransportHttpProperties]
        Decoders.addDecoder(clazz: [ComDayCqReplicationImplTransportHttpProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReplicationImplTransportHttpProperties]> in
            return Decoders.decode(clazz: [ComDayCqReplicationImplTransportHttpProperties].self, source: source)
        }

        // Decoder for ComDayCqReplicationImplTransportHttpProperties
        Decoders.addDecoder(clazz: ComDayCqReplicationImplTransportHttpProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReplicationImplTransportHttpProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReplicationImplTransportHttpProperties() : instance as! ComDayCqReplicationImplTransportHttpProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["disabled.cipher.suites"] as AnyObject?) {
                
                case let .success(value): _result.disabledCipherSuites = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["enabled.cipher.suites"] as AnyObject?) {
                
                case let .success(value): _result.enabledCipherSuites = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReplicationImplTransportHttpProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReportingImplCacheCacheImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqReportingImplCacheCacheImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReportingImplCacheCacheImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqReportingImplCacheCacheImplInfo].self, source: source)
        }

        // Decoder for ComDayCqReportingImplCacheCacheImplInfo
        Decoders.addDecoder(clazz: ComDayCqReportingImplCacheCacheImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReportingImplCacheCacheImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReportingImplCacheCacheImplInfo() : instance as! ComDayCqReportingImplCacheCacheImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqReportingImplCacheCacheImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReportingImplCacheCacheImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReportingImplCacheCacheImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqReportingImplCacheCacheImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReportingImplCacheCacheImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqReportingImplCacheCacheImplProperties].self, source: source)
        }

        // Decoder for ComDayCqReportingImplCacheCacheImplProperties
        Decoders.addDecoder(clazz: ComDayCqReportingImplCacheCacheImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReportingImplCacheCacheImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReportingImplCacheCacheImplProperties() : instance as! ComDayCqReportingImplCacheCacheImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["repcache.enable"] as AnyObject?) {
                
                case let .success(value): _result.repcacheEnable = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["repcache.ttl"] as AnyObject?) {
                
                case let .success(value): _result.repcacheTtl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["repcache.max"] as AnyObject?) {
                
                case let .success(value): _result.repcacheMax = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReportingImplCacheCacheImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReportingImplConfigServiceImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqReportingImplConfigServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReportingImplConfigServiceImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqReportingImplConfigServiceImplInfo].self, source: source)
        }

        // Decoder for ComDayCqReportingImplConfigServiceImplInfo
        Decoders.addDecoder(clazz: ComDayCqReportingImplConfigServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReportingImplConfigServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReportingImplConfigServiceImplInfo() : instance as! ComDayCqReportingImplConfigServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqReportingImplConfigServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReportingImplConfigServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReportingImplConfigServiceImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqReportingImplConfigServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReportingImplConfigServiceImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqReportingImplConfigServiceImplProperties].self, source: source)
        }

        // Decoder for ComDayCqReportingImplConfigServiceImplProperties
        Decoders.addDecoder(clazz: ComDayCqReportingImplConfigServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReportingImplConfigServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReportingImplConfigServiceImplProperties() : instance as! ComDayCqReportingImplConfigServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["repconf.timezone"] as AnyObject?) {
                
                case let .success(value): _result.repconfTimezone = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["repconf.locale"] as AnyObject?) {
                
                case let .success(value): _result.repconfLocale = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["repconf.snapshots"] as AnyObject?) {
                
                case let .success(value): _result.repconfSnapshots = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["repconf.repdir"] as AnyObject?) {
                
                case let .success(value): _result.repconfRepdir = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["repconf.hourofday"] as AnyObject?) {
                
                case let .success(value): _result.repconfHourofday = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["repconf.minofhour"] as AnyObject?) {
                
                case let .success(value): _result.repconfMinofhour = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["repconf.maxrows"] as AnyObject?) {
                
                case let .success(value): _result.repconfMaxrows = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["repconf.fakedata"] as AnyObject?) {
                
                case let .success(value): _result.repconfFakedata = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["repconf.snapshotuser"] as AnyObject?) {
                
                case let .success(value): _result.repconfSnapshotuser = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["repconf.enforcesnapshotuser"] as AnyObject?) {
                
                case let .success(value): _result.repconfEnforcesnapshotuser = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReportingImplConfigServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReportingImplRLogAnalyzerInfo]
        Decoders.addDecoder(clazz: [ComDayCqReportingImplRLogAnalyzerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReportingImplRLogAnalyzerInfo]> in
            return Decoders.decode(clazz: [ComDayCqReportingImplRLogAnalyzerInfo].self, source: source)
        }

        // Decoder for ComDayCqReportingImplRLogAnalyzerInfo
        Decoders.addDecoder(clazz: ComDayCqReportingImplRLogAnalyzerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReportingImplRLogAnalyzerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReportingImplRLogAnalyzerInfo() : instance as! ComDayCqReportingImplRLogAnalyzerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqReportingImplRLogAnalyzerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReportingImplRLogAnalyzerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqReportingImplRLogAnalyzerProperties]
        Decoders.addDecoder(clazz: [ComDayCqReportingImplRLogAnalyzerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqReportingImplRLogAnalyzerProperties]> in
            return Decoders.decode(clazz: [ComDayCqReportingImplRLogAnalyzerProperties].self, source: source)
        }

        // Decoder for ComDayCqReportingImplRLogAnalyzerProperties
        Decoders.addDecoder(clazz: ComDayCqReportingImplRLogAnalyzerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqReportingImplRLogAnalyzerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqReportingImplRLogAnalyzerProperties() : instance as! ComDayCqReportingImplRLogAnalyzerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["request.log.output"] as AnyObject?) {
                
                case let .success(value): _result.requestLogOutput = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqReportingImplRLogAnalyzerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo].self, source: source)
        }

        // Decoder for ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo
        Decoders.addDecoder(clazz: ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo() : instance as! ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties].self, source: source)
        }

        // Decoder for ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties
        Decoders.addDecoder(clazz: ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties() : instance as! ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["scheduler.period"] as AnyObject?) {
                
                case let .success(value): _result.schedulerPeriod = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["scheduler.concurrent"] as AnyObject?) {
                
                case let .success(value): _result.schedulerConcurrent = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.bad_link_tolerance_interval"] as AnyObject?) {
                
                case let .success(value): _result.serviceBadLinkToleranceInterval = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["service.check_override_patterns"] as AnyObject?) {
                
                case let .success(value): _result.serviceCheckOverridePatterns = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["service.cache_broken_internal_links"] as AnyObject?) {
                
                case let .success(value): _result.serviceCacheBrokenInternalLinks = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["service.special_link_prefix"] as AnyObject?) {
                
                case let .success(value): _result.serviceSpecialLinkPrefix = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["service.special_link_patterns"] as AnyObject?) {
                
                case let .success(value): _result.serviceSpecialLinkPatterns = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo]
        Decoders.addDecoder(clazz: [ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo]> in
            return Decoders.decode(clazz: [ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo].self, source: source)
        }

        // Decoder for ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo
        Decoders.addDecoder(clazz: ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo() : instance as! ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties]
        Decoders.addDecoder(clazz: [ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties]> in
            return Decoders.decode(clazz: [ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties].self, source: source)
        }

        // Decoder for ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties
        Decoders.addDecoder(clazz: ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties() : instance as! ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["scheduler.period"] as AnyObject?) {
                
                case let .success(value): _result.schedulerPeriod = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["scheduler.concurrent"] as AnyObject?) {
                
                case let .success(value): _result.schedulerConcurrent = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["good_link_test_interval"] as AnyObject?) {
                
                case let .success(value): _result.goodLinkTestInterval = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["bad_link_test_interval"] as AnyObject?) {
                
                case let .success(value): _result.badLinkTestInterval = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["link_unused_interval"] as AnyObject?) {
                
                case let .success(value): _result.linkUnusedInterval = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["connection.timeout"] as AnyObject?) {
                
                case let .success(value): _result.connectionTimeout = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo]
        Decoders.addDecoder(clazz: [ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo]> in
            return Decoders.decode(clazz: [ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo].self, source: source)
        }

        // Decoder for ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo
        Decoders.addDecoder(clazz: ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo() : instance as! ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties]
        Decoders.addDecoder(clazz: [ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties]> in
            return Decoders.decode(clazz: [ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties].self, source: source)
        }

        // Decoder for ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties
        Decoders.addDecoder(clazz: ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties() : instance as! ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["linkcheckertransformer.disableRewriting"] as AnyObject?) {
                
                case let .success(value): _result.linkcheckertransformerDisableRewriting = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["linkcheckertransformer.disableChecking"] as AnyObject?) {
                
                case let .success(value): _result.linkcheckertransformerDisableChecking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["linkcheckertransformer.mapCacheSize"] as AnyObject?) {
                
                case let .success(value): _result.linkcheckertransformerMapCacheSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["linkcheckertransformer.strictExtensionCheck"] as AnyObject?) {
                
                case let .success(value): _result.linkcheckertransformerStrictExtensionCheck = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["linkcheckertransformer.stripHtmltExtension"] as AnyObject?) {
                
                case let .success(value): _result.linkcheckertransformerStripHtmltExtension = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["linkcheckertransformer.rewriteElements"] as AnyObject?) {
                
                case let .success(value): _result.linkcheckertransformerRewriteElements = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["linkcheckertransformer.stripExtensionPathBlacklist"] as AnyObject?) {
                
                case let .success(value): _result.linkcheckertransformerStripExtensionPathBlacklist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo].self, source: source)
        }

        // Decoder for ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo
        Decoders.addDecoder(clazz: ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo() : instance as! ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties].self, source: source)
        }

        // Decoder for ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties
        Decoders.addDecoder(clazz: ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties() : instance as! ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.max_links_per_host"] as AnyObject?) {
                
                case let .success(value): _result.serviceMaxLinksPerHost = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["service.save_external_link_references"] as AnyObject?) {
                
                case let .success(value): _result.serviceSaveExternalLinkReferences = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqRewriterProcessorImplHtmlParserFactoryInfo]
        Decoders.addDecoder(clazz: [ComDayCqRewriterProcessorImplHtmlParserFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqRewriterProcessorImplHtmlParserFactoryInfo]> in
            return Decoders.decode(clazz: [ComDayCqRewriterProcessorImplHtmlParserFactoryInfo].self, source: source)
        }

        // Decoder for ComDayCqRewriterProcessorImplHtmlParserFactoryInfo
        Decoders.addDecoder(clazz: ComDayCqRewriterProcessorImplHtmlParserFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqRewriterProcessorImplHtmlParserFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqRewriterProcessorImplHtmlParserFactoryInfo() : instance as! ComDayCqRewriterProcessorImplHtmlParserFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqRewriterProcessorImplHtmlParserFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqRewriterProcessorImplHtmlParserFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqRewriterProcessorImplHtmlParserFactoryProperties]
        Decoders.addDecoder(clazz: [ComDayCqRewriterProcessorImplHtmlParserFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqRewriterProcessorImplHtmlParserFactoryProperties]> in
            return Decoders.decode(clazz: [ComDayCqRewriterProcessorImplHtmlParserFactoryProperties].self, source: source)
        }

        // Decoder for ComDayCqRewriterProcessorImplHtmlParserFactoryProperties
        Decoders.addDecoder(clazz: ComDayCqRewriterProcessorImplHtmlParserFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqRewriterProcessorImplHtmlParserFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqRewriterProcessorImplHtmlParserFactoryProperties() : instance as! ComDayCqRewriterProcessorImplHtmlParserFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["htmlparser.processTags"] as AnyObject?) {
                
                case let .success(value): _result.htmlparserProcessTags = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmlparser.preserveCamelCase"] as AnyObject?) {
                
                case let .success(value): _result.htmlparserPreserveCamelCase = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqRewriterProcessorImplHtmlParserFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqSearchImplBuilderQueryBuilderImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqSearchImplBuilderQueryBuilderImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqSearchImplBuilderQueryBuilderImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqSearchImplBuilderQueryBuilderImplInfo].self, source: source)
        }

        // Decoder for ComDayCqSearchImplBuilderQueryBuilderImplInfo
        Decoders.addDecoder(clazz: ComDayCqSearchImplBuilderQueryBuilderImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqSearchImplBuilderQueryBuilderImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqSearchImplBuilderQueryBuilderImplInfo() : instance as! ComDayCqSearchImplBuilderQueryBuilderImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqSearchImplBuilderQueryBuilderImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqSearchImplBuilderQueryBuilderImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqSearchImplBuilderQueryBuilderImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqSearchImplBuilderQueryBuilderImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqSearchImplBuilderQueryBuilderImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqSearchImplBuilderQueryBuilderImplProperties].self, source: source)
        }

        // Decoder for ComDayCqSearchImplBuilderQueryBuilderImplProperties
        Decoders.addDecoder(clazz: ComDayCqSearchImplBuilderQueryBuilderImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqSearchImplBuilderQueryBuilderImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqSearchImplBuilderQueryBuilderImplProperties() : instance as! ComDayCqSearchImplBuilderQueryBuilderImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["excerpt.properties"] as AnyObject?) {
                
                case let .success(value): _result.excerptProperties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.max.entries"] as AnyObject?) {
                
                case let .success(value): _result.cacheMaxEntries = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.entry.lifetime"] as AnyObject?) {
                
                case let .success(value): _result.cacheEntryLifetime = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["xpath.union"] as AnyObject?) {
                
                case let .success(value): _result.xpathUnion = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqSearchImplBuilderQueryBuilderImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo].self, source: source)
        }

        // Decoder for ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo
        Decoders.addDecoder(clazz: ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo() : instance as! ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties].self, source: source)
        }

        // Decoder for ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties
        Decoders.addDecoder(clazz: ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties() : instance as! ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pathBuilder.target"] as AnyObject?) {
                
                case let .success(value): _result.pathBuilderTarget = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["suggest.basepath"] as AnyObject?) {
                
                case let .success(value): _result.suggestBasepath = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo]
        Decoders.addDecoder(clazz: [ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo]> in
            return Decoders.decode(clazz: [ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo].self, source: source)
        }

        // Decoder for ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo
        Decoders.addDecoder(clazz: ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo() : instance as! ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties]
        Decoders.addDecoder(clazz: [ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties]> in
            return Decoders.decode(clazz: [ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties].self, source: source)
        }

        // Decoder for ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties
        Decoders.addDecoder(clazz: ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties() : instance as! ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.searchpromote.confighandler.enabled"] as AnyObject?) {
                
                case let .success(value): _result.cqSearchpromoteConfighandlerEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo].self, source: source)
        }

        // Decoder for ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo
        Decoders.addDecoder(clazz: ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo() : instance as! ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties].self, source: source)
        }

        // Decoder for ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties
        Decoders.addDecoder(clazz: ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties() : instance as! ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.searchpromote.configuration.server.uri"] as AnyObject?) {
                
                case let .success(value): _result.cqSearchpromoteConfigurationServerUri = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.searchpromote.configuration.environment"] as AnyObject?) {
                
                case let .success(value): _result.cqSearchpromoteConfigurationEnvironment = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["connection.timeout"] as AnyObject?) {
                
                case let .success(value): _result.connectionTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["socket.timeout"] as AnyObject?) {
                
                case let .success(value): _result.socketTimeout = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqSecurityACLSetupInfo]
        Decoders.addDecoder(clazz: [ComDayCqSecurityACLSetupInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqSecurityACLSetupInfo]> in
            return Decoders.decode(clazz: [ComDayCqSecurityACLSetupInfo].self, source: source)
        }

        // Decoder for ComDayCqSecurityACLSetupInfo
        Decoders.addDecoder(clazz: ComDayCqSecurityACLSetupInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqSecurityACLSetupInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqSecurityACLSetupInfo() : instance as! ComDayCqSecurityACLSetupInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqSecurityACLSetupProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqSecurityACLSetupInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqSecurityACLSetupProperties]
        Decoders.addDecoder(clazz: [ComDayCqSecurityACLSetupProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqSecurityACLSetupProperties]> in
            return Decoders.decode(clazz: [ComDayCqSecurityACLSetupProperties].self, source: source)
        }

        // Decoder for ComDayCqSecurityACLSetupProperties
        Decoders.addDecoder(clazz: ComDayCqSecurityACLSetupProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqSecurityACLSetupProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqSecurityACLSetupProperties() : instance as! ComDayCqSecurityACLSetupProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.aclsetup.rules"] as AnyObject?) {
                
                case let .success(value): _result.cqAclsetupRules = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqSecurityACLSetupProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqStatisticsImplStatisticsServiceImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqStatisticsImplStatisticsServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqStatisticsImplStatisticsServiceImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqStatisticsImplStatisticsServiceImplInfo].self, source: source)
        }

        // Decoder for ComDayCqStatisticsImplStatisticsServiceImplInfo
        Decoders.addDecoder(clazz: ComDayCqStatisticsImplStatisticsServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqStatisticsImplStatisticsServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqStatisticsImplStatisticsServiceImplInfo() : instance as! ComDayCqStatisticsImplStatisticsServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqStatisticsImplStatisticsServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqStatisticsImplStatisticsServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqStatisticsImplStatisticsServiceImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqStatisticsImplStatisticsServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqStatisticsImplStatisticsServiceImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqStatisticsImplStatisticsServiceImplProperties].self, source: source)
        }

        // Decoder for ComDayCqStatisticsImplStatisticsServiceImplProperties
        Decoders.addDecoder(clazz: ComDayCqStatisticsImplStatisticsServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqStatisticsImplStatisticsServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqStatisticsImplStatisticsServiceImplProperties() : instance as! ComDayCqStatisticsImplStatisticsServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["scheduler.period"] as AnyObject?) {
                
                case let .success(value): _result.schedulerPeriod = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["scheduler.concurrent"] as AnyObject?) {
                
                case let .success(value): _result.schedulerConcurrent = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"] as AnyObject?) {
                
                case let .success(value): _result.path = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["workspace"] as AnyObject?) {
                
                case let .success(value): _result.workspace = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["keywordsPath"] as AnyObject?) {
                
                case let .success(value): _result.keywordsPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["asyncEntries"] as AnyObject?) {
                
                case let .success(value): _result.asyncEntries = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqStatisticsImplStatisticsServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqTaggingImplJcrTagManagerFactoryImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqTaggingImplJcrTagManagerFactoryImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqTaggingImplJcrTagManagerFactoryImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqTaggingImplJcrTagManagerFactoryImplInfo].self, source: source)
        }

        // Decoder for ComDayCqTaggingImplJcrTagManagerFactoryImplInfo
        Decoders.addDecoder(clazz: ComDayCqTaggingImplJcrTagManagerFactoryImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqTaggingImplJcrTagManagerFactoryImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqTaggingImplJcrTagManagerFactoryImplInfo() : instance as! ComDayCqTaggingImplJcrTagManagerFactoryImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqTaggingImplJcrTagManagerFactoryImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqTaggingImplJcrTagManagerFactoryImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqTaggingImplJcrTagManagerFactoryImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqTaggingImplJcrTagManagerFactoryImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqTaggingImplJcrTagManagerFactoryImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqTaggingImplJcrTagManagerFactoryImplProperties].self, source: source)
        }

        // Decoder for ComDayCqTaggingImplJcrTagManagerFactoryImplProperties
        Decoders.addDecoder(clazz: ComDayCqTaggingImplJcrTagManagerFactoryImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqTaggingImplJcrTagManagerFactoryImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqTaggingImplJcrTagManagerFactoryImplProperties() : instance as! ComDayCqTaggingImplJcrTagManagerFactoryImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["validation.enabled"] as AnyObject?) {
                
                case let .success(value): _result.validationEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqTaggingImplJcrTagManagerFactoryImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo]
        Decoders.addDecoder(clazz: [ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo]> in
            return Decoders.decode(clazz: [ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo].self, source: source)
        }

        // Decoder for ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo
        Decoders.addDecoder(clazz: ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo() : instance as! ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties]
        Decoders.addDecoder(clazz: [ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties]> in
            return Decoders.decode(clazz: [ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties].self, source: source)
        }

        // Decoder for ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties
        Decoders.addDecoder(clazz: ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties() : instance as! ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["ignore_path"] as AnyObject?) {
                
                case let .success(value): _result.ignorePath = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqTaggingImplTagGarbageCollectorInfo]
        Decoders.addDecoder(clazz: [ComDayCqTaggingImplTagGarbageCollectorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqTaggingImplTagGarbageCollectorInfo]> in
            return Decoders.decode(clazz: [ComDayCqTaggingImplTagGarbageCollectorInfo].self, source: source)
        }

        // Decoder for ComDayCqTaggingImplTagGarbageCollectorInfo
        Decoders.addDecoder(clazz: ComDayCqTaggingImplTagGarbageCollectorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqTaggingImplTagGarbageCollectorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqTaggingImplTagGarbageCollectorInfo() : instance as! ComDayCqTaggingImplTagGarbageCollectorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqTaggingImplTagGarbageCollectorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqTaggingImplTagGarbageCollectorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqTaggingImplTagGarbageCollectorProperties]
        Decoders.addDecoder(clazz: [ComDayCqTaggingImplTagGarbageCollectorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqTaggingImplTagGarbageCollectorProperties]> in
            return Decoders.decode(clazz: [ComDayCqTaggingImplTagGarbageCollectorProperties].self, source: source)
        }

        // Decoder for ComDayCqTaggingImplTagGarbageCollectorProperties
        Decoders.addDecoder(clazz: ComDayCqTaggingImplTagGarbageCollectorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqTaggingImplTagGarbageCollectorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqTaggingImplTagGarbageCollectorProperties() : instance as! ComDayCqTaggingImplTagGarbageCollectorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"] as AnyObject?) {
                
                case let .success(value): _result.schedulerExpression = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqTaggingImplTagGarbageCollectorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo
        Decoders.addDecoder(clazz: ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo() : instance as! ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties
        Decoders.addDecoder(clazz: ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties() : instance as! ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.pagesupdatehandler.imageresourcetypes"] as AnyObject?) {
                
                case let .success(value): _result.cqPagesupdatehandlerImageresourcetypes = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo
        Decoders.addDecoder(clazz: ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo() : instance as! ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties
        Decoders.addDecoder(clazz: ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties() : instance as! ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.contentsync.pathrewritertransformer.mapping.links"] as AnyObject?) {
                
                case let .success(value): _result.cqContentsyncPathrewritertransformerMappingLinks = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.contentsync.pathrewritertransformer.mapping.clientlibs"] as AnyObject?) {
                
                case let .success(value): _result.cqContentsyncPathrewritertransformerMappingClientlibs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.contentsync.pathrewritertransformer.mapping.images"] as AnyObject?) {
                
                case let .success(value): _result.cqContentsyncPathrewritertransformerMappingImages = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.contentsync.pathrewritertransformer.attribute.pattern"] as AnyObject?) {
                
                case let .success(value): _result.cqContentsyncPathrewritertransformerAttributePattern = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.contentsync.pathrewritertransformer.clientlibrary.pattern"] as AnyObject?) {
                
                case let .success(value): _result.cqContentsyncPathrewritertransformerClientlibraryPattern = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.contentsync.pathrewritertransformer.clientlibrary.replace"] as AnyObject?) {
                
                case let .success(value): _result.cqContentsyncPathrewritertransformerClientlibraryReplace = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo() : instance as! ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplAuthoringUIModeServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"] as AnyObject?) {
                
                case let .success(value): _result.additionalProperties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplAuthoringUIModeServiceImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplAuthoringUIModeServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplAuthoringUIModeServiceImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplAuthoringUIModeServiceImplProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplAuthoringUIModeServiceImplProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplAuthoringUIModeServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplAuthoringUIModeServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplAuthoringUIModeServiceImplProperties() : instance as! ComDayCqWcmCoreImplAuthoringUIModeServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["authoringUIModeService.default"] as AnyObject?) {
                
                case let .success(value): _result.authoringUIModeServiceDefault = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplAuthoringUIModeServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplCommandsWCMCommandServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplCommandsWCMCommandServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplCommandsWCMCommandServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplCommandsWCMCommandServletInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplCommandsWCMCommandServletInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplCommandsWCMCommandServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplCommandsWCMCommandServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplCommandsWCMCommandServletInfo() : instance as! ComDayCqWcmCoreImplCommandsWCMCommandServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplCommandsWCMCommandServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplCommandsWCMCommandServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplCommandsWCMCommandServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplCommandsWCMCommandServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplCommandsWCMCommandServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplCommandsWCMCommandServletProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplCommandsWCMCommandServletProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplCommandsWCMCommandServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplCommandsWCMCommandServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplCommandsWCMCommandServletProperties() : instance as! ComDayCqWcmCoreImplCommandsWCMCommandServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["wcmcommandservlet.delete_whitelist"] as AnyObject?) {
                
                case let .success(value): _result.wcmcommandservletDeleteWhitelist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplCommandsWCMCommandServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo() : instance as! ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties() : instance as! ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["dim.default.mode"] as AnyObject?) {
                
                case let .success(value): _result.dimDefaultMode = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["dim.appcache.enabled"] as AnyObject?) {
                
                case let .success(value): _result.dimAppcacheEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplEventPageEventAuditListenerInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplEventPageEventAuditListenerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplEventPageEventAuditListenerInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplEventPageEventAuditListenerInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplEventPageEventAuditListenerInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplEventPageEventAuditListenerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplEventPageEventAuditListenerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplEventPageEventAuditListenerInfo() : instance as! ComDayCqWcmCoreImplEventPageEventAuditListenerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplEventPageEventAuditListenerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplEventPageEventAuditListenerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplEventPageEventAuditListenerProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplEventPageEventAuditListenerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplEventPageEventAuditListenerProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplEventPageEventAuditListenerProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplEventPageEventAuditListenerProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplEventPageEventAuditListenerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplEventPageEventAuditListenerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplEventPageEventAuditListenerProperties() : instance as! ComDayCqWcmCoreImplEventPageEventAuditListenerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["configured"] as AnyObject?) {
                
                case let .success(value): _result.configured = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplEventPageEventAuditListenerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplEventPagePostProcessorInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplEventPagePostProcessorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplEventPagePostProcessorInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplEventPagePostProcessorInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplEventPagePostProcessorInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplEventPagePostProcessorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplEventPagePostProcessorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplEventPagePostProcessorInfo() : instance as! ComDayCqWcmCoreImplEventPagePostProcessorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplEventPagePostProcessorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplEventPagePostProcessorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplEventPagePostProcessorProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplEventPagePostProcessorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplEventPagePostProcessorProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplEventPagePostProcessorProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplEventPagePostProcessorProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplEventPagePostProcessorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplEventPagePostProcessorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplEventPagePostProcessorProperties() : instance as! ComDayCqWcmCoreImplEventPagePostProcessorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["paths"] as AnyObject?) {
                
                case let .success(value): _result.paths = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplEventPagePostProcessorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo() : instance as! ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties() : instance as! ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["paths"] as AnyObject?) {
                
                case let .success(value): _result.paths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["excludedPaths"] as AnyObject?) {
                
                case let .success(value): _result.excludedPaths = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplEventTemplatePostProcessorInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplEventTemplatePostProcessorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplEventTemplatePostProcessorInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplEventTemplatePostProcessorInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplEventTemplatePostProcessorInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplEventTemplatePostProcessorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplEventTemplatePostProcessorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplEventTemplatePostProcessorInfo() : instance as! ComDayCqWcmCoreImplEventTemplatePostProcessorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplEventTemplatePostProcessorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplEventTemplatePostProcessorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplEventTemplatePostProcessorProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplEventTemplatePostProcessorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplEventTemplatePostProcessorProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplEventTemplatePostProcessorProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplEventTemplatePostProcessorProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplEventTemplatePostProcessorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplEventTemplatePostProcessorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplEventTemplatePostProcessorProperties() : instance as! ComDayCqWcmCoreImplEventTemplatePostProcessorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["paths"] as AnyObject?) {
                
                case let .success(value): _result.paths = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplEventTemplatePostProcessorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplLanguageManagerImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplLanguageManagerImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplLanguageManagerImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplLanguageManagerImplInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplLanguageManagerImplInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplLanguageManagerImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplLanguageManagerImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplLanguageManagerImplInfo() : instance as! ComDayCqWcmCoreImplLanguageManagerImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplLanguageManagerImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplLanguageManagerImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplLanguageManagerImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplLanguageManagerImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplLanguageManagerImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplLanguageManagerImplProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplLanguageManagerImplProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplLanguageManagerImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplLanguageManagerImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplLanguageManagerImplProperties() : instance as! ComDayCqWcmCoreImplLanguageManagerImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["langmgr.list.path"] as AnyObject?) {
                
                case let .success(value): _result.langmgrListPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["langmgr.country.default"] as AnyObject?) {
                
                case let .success(value): _result.langmgrCountryDefault = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplLanguageManagerImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo() : instance as! ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties() : instance as! ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["link.expired.prefix"] as AnyObject?) {
                
                case let .success(value): _result.linkExpiredPrefix = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["link.expired.remove"] as AnyObject?) {
                
                case let .success(value): _result.linkExpiredRemove = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["link.expired.suffix"] as AnyObject?) {
                
                case let .success(value): _result.linkExpiredSuffix = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["link.invalid.prefix"] as AnyObject?) {
                
                case let .success(value): _result.linkInvalidPrefix = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["link.invalid.remove"] as AnyObject?) {
                
                case let .success(value): _result.linkInvalidRemove = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["link.invalid.suffix"] as AnyObject?) {
                
                case let .success(value): _result.linkInvalidSuffix = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["link.predated.prefix"] as AnyObject?) {
                
                case let .success(value): _result.linkPredatedPrefix = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["link.predated.remove"] as AnyObject?) {
                
                case let .success(value): _result.linkPredatedRemove = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["link.predated.suffix"] as AnyObject?) {
                
                case let .success(value): _result.linkPredatedSuffix = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["link.wcmmodes"] as AnyObject?) {
                
                case let .success(value): _result.linkWcmmodes = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo() : instance as! ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties() : instance as! ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["page.info.provider.property.regex.default"] as AnyObject?) {
                
                case let .success(value): _result.pageInfoProviderPropertyRegexDefault = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["page.info.provider.property.name"] as AnyObject?) {
                
                case let .success(value): _result.pageInfoProviderPropertyName = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo() : instance as! ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties() : instance as! ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["illegalCharMapping"] as AnyObject?) {
                
                case let .success(value): _result.illegalCharMapping = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["pageSubTreeActivationCheck"] as AnyObject?) {
                
                case let .success(value): _result.pageSubTreeActivationCheck = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo() : instance as! ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties() : instance as! ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["contentReferenceConfig.resourceTypes"] as AnyObject?) {
                
                case let .success(value): _result.contentReferenceConfigResourceTypes = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo() : instance as! ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties() : instance as! ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["dam.showexpired"] as AnyObject?) {
                
                case let .success(value): _result.damShowexpired = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["dam.showhidden"] as AnyObject?) {
                
                case let .success(value): _result.damShowhidden = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["tagTitleSearch"] as AnyObject?) {
                
                case let .success(value): _result.tagTitleSearch = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["guessTotal"] as AnyObject?) {
                
                case let .success(value): _result.guessTotal = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["dam.expiryProperty"] as AnyObject?) {
                
                case let .success(value): _result.damExpiryProperty = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo() : instance as! ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties() : instance as! ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["item.resource.types"] as AnyObject?) {
                
                case let .success(value): _result.itemResourceTypes = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo() : instance as! ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties() : instance as! ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["guessTotal"] as AnyObject?) {
                
                case let .success(value): _result.guessTotal = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["tagTitleSearch"] as AnyObject?) {
                
                case let .success(value): _result.tagTitleSearch = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplServletsFindReplaceServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplServletsFindReplaceServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplServletsFindReplaceServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplServletsFindReplaceServletInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplServletsFindReplaceServletInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplServletsFindReplaceServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplServletsFindReplaceServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplServletsFindReplaceServletInfo() : instance as! ComDayCqWcmCoreImplServletsFindReplaceServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplServletsFindReplaceServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplServletsFindReplaceServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplServletsFindReplaceServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplServletsFindReplaceServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplServletsFindReplaceServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplServletsFindReplaceServletProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplServletsFindReplaceServletProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplServletsFindReplaceServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplServletsFindReplaceServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplServletsFindReplaceServletProperties() : instance as! ComDayCqWcmCoreImplServletsFindReplaceServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["scope"] as AnyObject?) {
                
                case let .success(value): _result.scope = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplServletsFindReplaceServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplServletsReferenceSearchServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplServletsReferenceSearchServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplServletsReferenceSearchServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplServletsReferenceSearchServletInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplServletsReferenceSearchServletInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplServletsReferenceSearchServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplServletsReferenceSearchServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplServletsReferenceSearchServletInfo() : instance as! ComDayCqWcmCoreImplServletsReferenceSearchServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplServletsReferenceSearchServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplServletsReferenceSearchServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplServletsReferenceSearchServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplServletsReferenceSearchServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplServletsReferenceSearchServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplServletsReferenceSearchServletProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplServletsReferenceSearchServletProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplServletsReferenceSearchServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplServletsReferenceSearchServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplServletsReferenceSearchServletProperties() : instance as! ComDayCqWcmCoreImplServletsReferenceSearchServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["referencesearchservlet.maxReferencesPerPage"] as AnyObject?) {
                
                case let .success(value): _result.referencesearchservletMaxReferencesPerPage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["referencesearchservlet.maxPages"] as AnyObject?) {
                
                case let .success(value): _result.referencesearchservletMaxPages = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplServletsReferenceSearchServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplServletsThumbnailServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplServletsThumbnailServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplServletsThumbnailServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplServletsThumbnailServletInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplServletsThumbnailServletInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplServletsThumbnailServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplServletsThumbnailServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplServletsThumbnailServletInfo() : instance as! ComDayCqWcmCoreImplServletsThumbnailServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplServletsThumbnailServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplServletsThumbnailServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplServletsThumbnailServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplServletsThumbnailServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplServletsThumbnailServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplServletsThumbnailServletProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplServletsThumbnailServletProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplServletsThumbnailServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplServletsThumbnailServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplServletsThumbnailServletProperties() : instance as! ComDayCqWcmCoreImplServletsThumbnailServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["workspace"] as AnyObject?) {
                
                case let .success(value): _result.workspace = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["dimensions"] as AnyObject?) {
                
                case let .success(value): _result.dimensions = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplServletsThumbnailServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo() : instance as! ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties() : instance as! ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["nonValidChars"] as AnyObject?) {
                
                case let .success(value): _result.nonValidChars = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo() : instance as! ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties() : instance as! ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["default.externalizer.domain"] as AnyObject?) {
                
                case let .success(value): _result.defaultExternalizerDomain = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplVersionManagerImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplVersionManagerImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplVersionManagerImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplVersionManagerImplInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplVersionManagerImplInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplVersionManagerImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplVersionManagerImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplVersionManagerImplInfo() : instance as! ComDayCqWcmCoreImplVersionManagerImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplVersionManagerImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplVersionManagerImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplVersionManagerImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplVersionManagerImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplVersionManagerImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplVersionManagerImplProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplVersionManagerImplProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplVersionManagerImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplVersionManagerImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplVersionManagerImplProperties() : instance as! ComDayCqWcmCoreImplVersionManagerImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["versionmanager.createVersionOnActivation"] as AnyObject?) {
                
                case let .success(value): _result.versionmanagerCreateVersionOnActivation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["versionmanager.purgingEnabled"] as AnyObject?) {
                
                case let .success(value): _result.versionmanagerPurgingEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["versionmanager.purgePaths"] as AnyObject?) {
                
                case let .success(value): _result.versionmanagerPurgePaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["versionmanager.ivPaths"] as AnyObject?) {
                
                case let .success(value): _result.versionmanagerIvPaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["versionmanager.maxAgeDays"] as AnyObject?) {
                
                case let .success(value): _result.versionmanagerMaxAgeDays = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["versionmanager.maxNumberVersions"] as AnyObject?) {
                
                case let .success(value): _result.versionmanagerMaxNumberVersions = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["versionmanager.minNumberVersions"] as AnyObject?) {
                
                case let .success(value): _result.versionmanagerMinNumberVersions = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplVersionManagerImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplVersionPurgeTaskInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplVersionPurgeTaskInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplVersionPurgeTaskInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplVersionPurgeTaskInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplVersionPurgeTaskInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplVersionPurgeTaskInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplVersionPurgeTaskInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplVersionPurgeTaskInfo() : instance as! ComDayCqWcmCoreImplVersionPurgeTaskInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplVersionPurgeTaskProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplVersionPurgeTaskInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplVersionPurgeTaskProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplVersionPurgeTaskProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplVersionPurgeTaskProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplVersionPurgeTaskProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplVersionPurgeTaskProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplVersionPurgeTaskProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplVersionPurgeTaskProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplVersionPurgeTaskProperties() : instance as! ComDayCqWcmCoreImplVersionPurgeTaskProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["versionpurge.paths"] as AnyObject?) {
                
                case let .success(value): _result.versionpurgePaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["versionpurge.recursive"] as AnyObject?) {
                
                case let .success(value): _result.versionpurgeRecursive = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["versionpurge.maxVersions"] as AnyObject?) {
                
                case let .success(value): _result.versionpurgeMaxVersions = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["versionpurge.minVersions"] as AnyObject?) {
                
                case let .success(value): _result.versionpurgeMinVersions = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["versionpurge.maxAgeDays"] as AnyObject?) {
                
                case let .success(value): _result.versionpurgeMaxAgeDays = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplVersionPurgeTaskProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplWCMDebugFilterInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplWCMDebugFilterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplWCMDebugFilterInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplWCMDebugFilterInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplWCMDebugFilterInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplWCMDebugFilterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplWCMDebugFilterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplWCMDebugFilterInfo() : instance as! ComDayCqWcmCoreImplWCMDebugFilterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplWCMDebugFilterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplWCMDebugFilterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplWCMDebugFilterProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplWCMDebugFilterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplWCMDebugFilterProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplWCMDebugFilterProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplWCMDebugFilterProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplWCMDebugFilterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplWCMDebugFilterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplWCMDebugFilterProperties() : instance as! ComDayCqWcmCoreImplWCMDebugFilterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["wcmdbgfilter.enabled"] as AnyObject?) {
                
                case let .success(value): _result.wcmdbgfilterEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["wcmdbgfilter.jspDebug"] as AnyObject?) {
                
                case let .success(value): _result.wcmdbgfilterJspDebug = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplWCMDebugFilterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo() : instance as! ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplWCMDeveloperModeFilterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"] as AnyObject?) {
                
                case let .success(value): _result.additionalProperties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplWCMDeveloperModeFilterProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplWCMDeveloperModeFilterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplWCMDeveloperModeFilterProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplWCMDeveloperModeFilterProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplWCMDeveloperModeFilterProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplWCMDeveloperModeFilterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplWCMDeveloperModeFilterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplWCMDeveloperModeFilterProperties() : instance as! ComDayCqWcmCoreImplWCMDeveloperModeFilterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["wcmdevmodefilter.enabled"] as AnyObject?) {
                
                case let .success(value): _result.wcmdevmodefilterEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplWCMDeveloperModeFilterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplWarpTimeWarpFilterInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplWarpTimeWarpFilterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplWarpTimeWarpFilterInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplWarpTimeWarpFilterInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplWarpTimeWarpFilterInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplWarpTimeWarpFilterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplWarpTimeWarpFilterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplWarpTimeWarpFilterInfo() : instance as! ComDayCqWcmCoreImplWarpTimeWarpFilterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplWarpTimeWarpFilterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplWarpTimeWarpFilterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreImplWarpTimeWarpFilterProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplWarpTimeWarpFilterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreImplWarpTimeWarpFilterProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreImplWarpTimeWarpFilterProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreImplWarpTimeWarpFilterProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreImplWarpTimeWarpFilterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreImplWarpTimeWarpFilterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreImplWarpTimeWarpFilterProperties() : instance as! ComDayCqWcmCoreImplWarpTimeWarpFilterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["filter.order"] as AnyObject?) {
                
                case let .success(value): _result.filterOrder = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["filter.scope"] as AnyObject?) {
                
                case let .success(value): _result.filterScope = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreImplWarpTimeWarpFilterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreMvtMVTStatisticsImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreMvtMVTStatisticsImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreMvtMVTStatisticsImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreMvtMVTStatisticsImplInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreMvtMVTStatisticsImplInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreMvtMVTStatisticsImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreMvtMVTStatisticsImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreMvtMVTStatisticsImplInfo() : instance as! ComDayCqWcmCoreMvtMVTStatisticsImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreMvtMVTStatisticsImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreMvtMVTStatisticsImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreMvtMVTStatisticsImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreMvtMVTStatisticsImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreMvtMVTStatisticsImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreMvtMVTStatisticsImplProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreMvtMVTStatisticsImplProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreMvtMVTStatisticsImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreMvtMVTStatisticsImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreMvtMVTStatisticsImplProperties() : instance as! ComDayCqWcmCoreMvtMVTStatisticsImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["mvtstatistics.trackingurl"] as AnyObject?) {
                
                case let .success(value): _result.mvtstatisticsTrackingurl = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreMvtMVTStatisticsImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreStatsPageViewStatisticsImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreStatsPageViewStatisticsImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreStatsPageViewStatisticsImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreStatsPageViewStatisticsImplInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreStatsPageViewStatisticsImplInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreStatsPageViewStatisticsImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreStatsPageViewStatisticsImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreStatsPageViewStatisticsImplInfo() : instance as! ComDayCqWcmCoreStatsPageViewStatisticsImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreStatsPageViewStatisticsImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreStatsPageViewStatisticsImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreStatsPageViewStatisticsImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreStatsPageViewStatisticsImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreStatsPageViewStatisticsImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreStatsPageViewStatisticsImplProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreStatsPageViewStatisticsImplProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreStatsPageViewStatisticsImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreStatsPageViewStatisticsImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreStatsPageViewStatisticsImplProperties() : instance as! ComDayCqWcmCoreStatsPageViewStatisticsImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pageviewstatistics.trackingurl"] as AnyObject?) {
                
                case let .success(value): _result.pageviewstatisticsTrackingurl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pageviewstatistics.trackingscript.enabled"] as AnyObject?) {
                
                case let .success(value): _result.pageviewstatisticsTrackingscriptEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreStatsPageViewStatisticsImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreWCMRequestFilterInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreWCMRequestFilterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreWCMRequestFilterInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreWCMRequestFilterInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreWCMRequestFilterInfo
        Decoders.addDecoder(clazz: ComDayCqWcmCoreWCMRequestFilterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreWCMRequestFilterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreWCMRequestFilterInfo() : instance as! ComDayCqWcmCoreWCMRequestFilterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmCoreWCMRequestFilterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreWCMRequestFilterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmCoreWCMRequestFilterProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmCoreWCMRequestFilterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmCoreWCMRequestFilterProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmCoreWCMRequestFilterProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmCoreWCMRequestFilterProperties
        Decoders.addDecoder(clazz: ComDayCqWcmCoreWCMRequestFilterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmCoreWCMRequestFilterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmCoreWCMRequestFilterProperties() : instance as! ComDayCqWcmCoreWCMRequestFilterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["wcmfilter.mode"] as AnyObject?) {
                
                case let .success(value): _result.wcmfilterMode = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmCoreWCMRequestFilterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterDesignPackageImporterInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterDesignPackageImporterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterDesignPackageImporterInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterDesignPackageImporterInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterDesignPackageImporterInfo
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterDesignPackageImporterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterDesignPackageImporterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterDesignPackageImporterInfo() : instance as! ComDayCqWcmDesignimporterDesignPackageImporterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterDesignPackageImporterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterDesignPackageImporterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterDesignPackageImporterProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterDesignPackageImporterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterDesignPackageImporterProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterDesignPackageImporterProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterDesignPackageImporterProperties
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterDesignPackageImporterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterDesignPackageImporterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterDesignPackageImporterProperties() : instance as! ComDayCqWcmDesignimporterDesignPackageImporterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["extract.filter"] as AnyObject?) {
                
                case let .success(value): _result.extractFilter = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterDesignPackageImporterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo() : instance as! ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties() : instance as! ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["filepattern"] as AnyObject?) {
                
                case let .success(value): _result.filepattern = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["build.page.nodes"] as AnyObject?) {
                
                case let .success(value): _result.buildPageNodes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["build.client.libs"] as AnyObject?) {
                
                case let .success(value): _result.buildClientLibs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["build.canvas.component"] as AnyObject?) {
                
                case let .success(value): _result.buildCanvasComponent = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo() : instance as! ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties() : instance as! ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["minThreadPoolSize"] as AnyObject?) {
                
                case let .success(value): _result.minThreadPoolSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxThreadPoolSize"] as AnyObject?) {
                
                case let .success(value): _result.maxThreadPoolSize = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo() : instance as! ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties() : instance as! ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["search.pattern"] as AnyObject?) {
                
                case let .success(value): _result.searchPattern = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["replace.pattern"] as AnyObject?) {
                
                case let .success(value): _result.replacePattern = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo() : instance as! ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties() : instance as! ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["filepattern"] as AnyObject?) {
                
                case let .success(value): _result.filepattern = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["device.groups"] as AnyObject?) {
                
                case let .success(value): _result.deviceGroups = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["build.page.nodes"] as AnyObject?) {
                
                case let .success(value): _result.buildPageNodes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["build.client.libs"] as AnyObject?) {
                
                case let .success(value): _result.buildClientLibs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["build.canvas.component"] as AnyObject?) {
                
                case let .success(value): _result.buildCanvasComponent = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"] as AnyObject?) {
                
                case let .success(value): _result.tagpattern = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"] as AnyObject?) {
                
                case let .success(value): _result.tagpattern = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"] as AnyObject?) {
                
                case let .success(value): _result.tagpattern = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"] as AnyObject?) {
                
                case let .success(value): _result.tagpattern = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"] as AnyObject?) {
                
                case let .success(value): _result.tagpattern = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"] as AnyObject?) {
                
                case let .success(value): _result.tagpattern = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["component.resourceType"] as AnyObject?) {
                
                case let .success(value): _result.componentResourceType = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"] as AnyObject?) {
                
                case let .success(value): _result.tagpattern = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"] as AnyObject?) {
                
                case let .success(value): _result.tagpattern = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"] as AnyObject?) {
                
                case let .success(value): _result.tagpattern = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"] as AnyObject?) {
                
                case let .success(value): _result.tagpattern = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"] as AnyObject?) {
                
                case let .success(value): _result.tagpattern = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"] as AnyObject?) {
                
                case let .success(value): _result.tagpattern = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["component.resourceType"] as AnyObject?) {
                
                case let .success(value): _result.componentResourceType = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"] as AnyObject?) {
                
                case let .success(value): _result.tagpattern = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"] as AnyObject?) {
                
                case let .success(value): _result.tagpattern = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"] as AnyObject?) {
                
                case let .success(value): _result.tagpattern = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["component.resourceType"] as AnyObject?) {
                
                case let .success(value): _result.componentResourceType = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"] as AnyObject?) {
                
                case let .success(value): _result.tagpattern = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["component.resourceType"] as AnyObject?) {
                
                case let .success(value): _result.componentResourceType = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties
        Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties() : instance as! ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"] as AnyObject?) {
                
                case let .success(value): _result.tagpattern = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmFoundationFormsImplFormChooserServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmFoundationFormsImplFormChooserServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmFoundationFormsImplFormChooserServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmFoundationFormsImplFormChooserServletInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmFoundationFormsImplFormChooserServletInfo
        Decoders.addDecoder(clazz: ComDayCqWcmFoundationFormsImplFormChooserServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmFoundationFormsImplFormChooserServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmFoundationFormsImplFormChooserServletInfo() : instance as! ComDayCqWcmFoundationFormsImplFormChooserServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmFoundationFormsImplFormChooserServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmFoundationFormsImplFormChooserServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmFoundationFormsImplFormChooserServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmFoundationFormsImplFormChooserServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmFoundationFormsImplFormChooserServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmFoundationFormsImplFormChooserServletProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmFoundationFormsImplFormChooserServletProperties
        Decoders.addDecoder(clazz: ComDayCqWcmFoundationFormsImplFormChooserServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmFoundationFormsImplFormChooserServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmFoundationFormsImplFormChooserServletProperties() : instance as! ComDayCqWcmFoundationFormsImplFormChooserServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["service.name"] as AnyObject?) {
                
                case let .success(value): _result.serviceName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.resourceTypes"] as AnyObject?) {
                
                case let .success(value): _result.slingServletResourceTypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.selectors"] as AnyObject?) {
                
                case let .success(value): _result.slingServletSelectors = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.servlet.methods"] as AnyObject?) {
                
                case let .success(value): _result.slingServletMethods = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["forms.formchooserservlet.advansesearch.require"] as AnyObject?) {
                
                case let .success(value): _result.formsFormchooserservletAdvansesearchRequire = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmFoundationFormsImplFormChooserServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo
        Decoders.addDecoder(clazz: ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo() : instance as! ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties
        Decoders.addDecoder(clazz: ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties() : instance as! ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["forms.formparagraphpostprocessor.enabled"] as AnyObject?) {
                
                case let .success(value): _result.formsFormparagraphpostprocessorEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["forms.formparagraphpostprocessor.formresourcetypes"] as AnyObject?) {
                
                case let .success(value): _result.formsFormparagraphpostprocessorFormresourcetypes = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo
        Decoders.addDecoder(clazz: ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo() : instance as! ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties
        Decoders.addDecoder(clazz: ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties() : instance as! ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name.whitelist"] as AnyObject?) {
                
                case let .success(value): _result.nameWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["allow.expressions"] as AnyObject?) {
                
                case let .success(value): _result.allowExpressions = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmFoundationFormsImplMailServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmFoundationFormsImplMailServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmFoundationFormsImplMailServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmFoundationFormsImplMailServletInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmFoundationFormsImplMailServletInfo
        Decoders.addDecoder(clazz: ComDayCqWcmFoundationFormsImplMailServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmFoundationFormsImplMailServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmFoundationFormsImplMailServletInfo() : instance as! ComDayCqWcmFoundationFormsImplMailServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmFoundationFormsImplMailServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmFoundationFormsImplMailServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmFoundationFormsImplMailServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmFoundationFormsImplMailServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmFoundationFormsImplMailServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmFoundationFormsImplMailServletProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmFoundationFormsImplMailServletProperties
        Decoders.addDecoder(clazz: ComDayCqWcmFoundationFormsImplMailServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmFoundationFormsImplMailServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmFoundationFormsImplMailServletProperties() : instance as! ComDayCqWcmFoundationFormsImplMailServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.resourceTypes"] as AnyObject?) {
                
                case let .success(value): _result.slingServletResourceTypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.selectors"] as AnyObject?) {
                
                case let .success(value): _result.slingServletSelectors = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resource.whitelist"] as AnyObject?) {
                
                case let .success(value): _result.resourceWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["resource.blacklist"] as AnyObject?) {
                
                case let .success(value): _result.resourceBlacklist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmFoundationFormsImplMailServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo
        Decoders.addDecoder(clazz: ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo() : instance as! ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties
        Decoders.addDecoder(clazz: ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties() : instance as! ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["adapt.supported.widths"] as AnyObject?) {
                
                case let .success(value): _result.adaptSupportedWidths = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmFoundationImplHTTPAuthHandlerInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmFoundationImplHTTPAuthHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmFoundationImplHTTPAuthHandlerInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmFoundationImplHTTPAuthHandlerInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmFoundationImplHTTPAuthHandlerInfo
        Decoders.addDecoder(clazz: ComDayCqWcmFoundationImplHTTPAuthHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmFoundationImplHTTPAuthHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmFoundationImplHTTPAuthHandlerInfo() : instance as! ComDayCqWcmFoundationImplHTTPAuthHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmFoundationImplHTTPAuthHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmFoundationImplHTTPAuthHandlerProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmFoundationImplHTTPAuthHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmFoundationImplHTTPAuthHandlerProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmFoundationImplHTTPAuthHandlerProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmFoundationImplHTTPAuthHandlerProperties
        Decoders.addDecoder(clazz: ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmFoundationImplHTTPAuthHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmFoundationImplHTTPAuthHandlerProperties() : instance as! ComDayCqWcmFoundationImplHTTPAuthHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"] as AnyObject?) {
                
                case let .success(value): _result.path = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["auth.http.nologin"] as AnyObject?) {
                
                case let .success(value): _result.authHttpNologin = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.http.realm"] as AnyObject?) {
                
                case let .success(value): _result.authHttpRealm = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.default.loginpage"] as AnyObject?) {
                
                case let .success(value): _result.authDefaultLoginpage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["auth.cred.form"] as AnyObject?) {
                
                case let .success(value): _result.authCredForm = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["auth.cred.utf8"] as AnyObject?) {
                
                case let .success(value): _result.authCredUtf8 = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmFoundationImplHTTPAuthHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmFoundationImplPageImpressionsTrackerInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmFoundationImplPageImpressionsTrackerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmFoundationImplPageImpressionsTrackerInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmFoundationImplPageImpressionsTrackerInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmFoundationImplPageImpressionsTrackerInfo
        Decoders.addDecoder(clazz: ComDayCqWcmFoundationImplPageImpressionsTrackerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmFoundationImplPageImpressionsTrackerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmFoundationImplPageImpressionsTrackerInfo() : instance as! ComDayCqWcmFoundationImplPageImpressionsTrackerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmFoundationImplPageImpressionsTrackerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmFoundationImplPageImpressionsTrackerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmFoundationImplPageImpressionsTrackerProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmFoundationImplPageImpressionsTrackerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmFoundationImplPageImpressionsTrackerProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmFoundationImplPageImpressionsTrackerProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmFoundationImplPageImpressionsTrackerProperties
        Decoders.addDecoder(clazz: ComDayCqWcmFoundationImplPageImpressionsTrackerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmFoundationImplPageImpressionsTrackerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmFoundationImplPageImpressionsTrackerProperties() : instance as! ComDayCqWcmFoundationImplPageImpressionsTrackerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.auth.requirements"] as AnyObject?) {
                
                case let .success(value): _result.slingAuthRequirements = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmFoundationImplPageImpressionsTrackerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmFoundationImplPageRedirectServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmFoundationImplPageRedirectServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmFoundationImplPageRedirectServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmFoundationImplPageRedirectServletInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmFoundationImplPageRedirectServletInfo
        Decoders.addDecoder(clazz: ComDayCqWcmFoundationImplPageRedirectServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmFoundationImplPageRedirectServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmFoundationImplPageRedirectServletInfo() : instance as! ComDayCqWcmFoundationImplPageRedirectServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmFoundationImplPageRedirectServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmFoundationImplPageRedirectServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmFoundationImplPageRedirectServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmFoundationImplPageRedirectServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmFoundationImplPageRedirectServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmFoundationImplPageRedirectServletProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmFoundationImplPageRedirectServletProperties
        Decoders.addDecoder(clazz: ComDayCqWcmFoundationImplPageRedirectServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmFoundationImplPageRedirectServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmFoundationImplPageRedirectServletProperties() : instance as! ComDayCqWcmFoundationImplPageRedirectServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["excluded.resource.types"] as AnyObject?) {
                
                case let .success(value): _result.excludedResourceTypes = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmFoundationImplPageRedirectServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo
        Decoders.addDecoder(clazz: ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo() : instance as! ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties
        Decoders.addDecoder(clazz: ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties() : instance as! ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["default.attachment.type.blacklist"] as AnyObject?) {
                
                case let .success(value): _result.defaultAttachmentTypeBlacklist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["baseline.attachment.type.blacklist"] as AnyObject?) {
                
                case let .success(value): _result.baselineAttachmentTypeBlacklist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo
        Decoders.addDecoder(clazz: ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo() : instance as! ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties
        Decoders.addDecoder(clazz: ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties() : instance as! ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["parameter.whitelist"] as AnyObject?) {
                
                case let .success(value): _result.parameterWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["parameter.whitelist.prefixes"] as AnyObject?) {
                
                case let .success(value): _result.parameterWhitelistPrefixes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["binary.parameter.whitelist"] as AnyObject?) {
                
                case let .success(value): _result.binaryParameterWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["modifier.whitelist"] as AnyObject?) {
                
                case let .success(value): _result.modifierWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["operation.whitelist"] as AnyObject?) {
                
                case let .success(value): _result.operationWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["operation.whitelist.prefixes"] as AnyObject?) {
                
                case let .success(value): _result.operationWhitelistPrefixes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["typehint.whitelist"] as AnyObject?) {
                
                case let .success(value): _result.typehintWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resourcetype.whitelist"] as AnyObject?) {
                
                case let .success(value): _result.resourcetypeWhitelist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo
        Decoders.addDecoder(clazz: ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo() : instance as! ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties
        Decoders.addDecoder(clazz: ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties() : instance as! ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["device.info.transformer.enabled"] as AnyObject?) {
                
                case let .success(value): _result.deviceInfoTransformerEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["device.info.transformer.css.style"] as AnyObject?) {
                
                case let .success(value): _result.deviceInfoTransformerCssStyle = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo
        Decoders.addDecoder(clazz: ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo() : instance as! ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties
        Decoders.addDecoder(clazz: ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties() : instance as! ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["redirect.enabled"] as AnyObject?) {
                
                case let .success(value): _result.redirectEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["redirect.stats.enabled"] as AnyObject?) {
                
                case let .success(value): _result.redirectStatsEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["redirect.extensions"] as AnyObject?) {
                
                case let .success(value): _result.redirectExtensions = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["redirect.paths"] as AnyObject?) {
                
                case let .success(value): _result.redirectPaths = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo
        Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo() : instance as! ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties
        Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties() : instance as! ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludednodetypes"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmMsmActionExcludednodetypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedparagraphitems"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmMsmActionExcludedparagraphitems = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedprops"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmMsmActionExcludedprops = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["contentcopyaction.order.style"] as AnyObject?) {
                
                case let .success(value): _result.contentcopyactionOrderStyle = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo
        Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo() : instance as! ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties
        Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties() : instance as! ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludednodetypes"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmMsmActionExcludednodetypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedparagraphitems"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmMsmActionExcludedparagraphitems = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedprops"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmMsmActionExcludedprops = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo
        Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo() : instance as! ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties
        Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties() : instance as! ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludednodetypes"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmMsmActionExcludednodetypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedparagraphitems"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmMsmActionExcludedparagraphitems = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedprops"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmMsmActionExcludedprops = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.ignoredMixin"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmMsmActionIgnoredMixin = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo
        Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo() : instance as! ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties
        Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties() : instance as! ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludednodetypes"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmMsmActionExcludednodetypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedparagraphitems"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmMsmActionExcludedparagraphitems = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedprops"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmMsmActionExcludedprops = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo
        Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo() : instance as! ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties
        Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties() : instance as! ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludednodetypes"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmMsmActionExcludednodetypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedparagraphitems"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmMsmActionExcludedparagraphitems = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedprops"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmMsmActionExcludedprops = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmMsmImplActionsPagemovePropReferenceUpdate = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo
        Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo() : instance as! ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties
        Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties() : instance as! ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludednodetypes"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmMsmActionExcludednodetypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedparagraphitems"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmMsmActionExcludedparagraphitems = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedprops"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmMsmActionExcludedprops = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.wcm.msm.impl.action.referencesupdate.prop_updateNested"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmMsmImplActionReferencesupdatePropUpdateNested = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo
        Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo() : instance as! ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties
        Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties() : instance as! ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludednodetypes"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmMsmActionExcludednodetypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedparagraphitems"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmMsmActionExcludedparagraphitems = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedprops"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmMsmActionExcludedprops = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo
        Decoders.addDecoder(clazz: ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo() : instance as! ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties
        Decoders.addDecoder(clazz: ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties() : instance as! ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["liverelationshipmgr.relationsconfig.default"] as AnyObject?) {
                
                case let .success(value): _result.liverelationshipmgrRelationsconfigDefault = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmMsmImplRolloutManagerImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplRolloutManagerImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmMsmImplRolloutManagerImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmMsmImplRolloutManagerImplInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmMsmImplRolloutManagerImplInfo
        Decoders.addDecoder(clazz: ComDayCqWcmMsmImplRolloutManagerImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmMsmImplRolloutManagerImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmMsmImplRolloutManagerImplInfo() : instance as! ComDayCqWcmMsmImplRolloutManagerImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmMsmImplRolloutManagerImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"] as AnyObject?) {
                
                case let .success(value): _result.additionalProperties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmMsmImplRolloutManagerImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmMsmImplRolloutManagerImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplRolloutManagerImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmMsmImplRolloutManagerImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmMsmImplRolloutManagerImplProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmMsmImplRolloutManagerImplProperties
        Decoders.addDecoder(clazz: ComDayCqWcmMsmImplRolloutManagerImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmMsmImplRolloutManagerImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmMsmImplRolloutManagerImplProperties() : instance as! ComDayCqWcmMsmImplRolloutManagerImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"] as AnyObject?) {
                
                case let .success(value): _result.eventFilter = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["rolloutmgr.excludedprops.default"] as AnyObject?) {
                
                case let .success(value): _result.rolloutmgrExcludedpropsDefault = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["rolloutmgr.excludedparagraphprops.default"] as AnyObject?) {
                
                case let .success(value): _result.rolloutmgrExcludedparagraphpropsDefault = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["rolloutmgr.excludednodetypes.default"] as AnyObject?) {
                
                case let .success(value): _result.rolloutmgrExcludednodetypesDefault = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["rolloutmgr.threadpool.maxsize"] as AnyObject?) {
                
                case let .success(value): _result.rolloutmgrThreadpoolMaxsize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["rolloutmgr.threadpool.maxshutdowntime"] as AnyObject?) {
                
                case let .success(value): _result.rolloutmgrThreadpoolMaxshutdowntime = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["rolloutmgr.threadpool.priority"] as AnyObject?) {
                
                case let .success(value): _result.rolloutmgrThreadpoolPriority = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["rolloutmgr.commit.size"] as AnyObject?) {
                
                case let .success(value): _result.rolloutmgrCommitSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["rolloutmgr.conflicthandling.enabled"] as AnyObject?) {
                
                case let .success(value): _result.rolloutmgrConflicthandlingEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmMsmImplRolloutManagerImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmMsmImplServletsAuditLogServletInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplServletsAuditLogServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmMsmImplServletsAuditLogServletInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmMsmImplServletsAuditLogServletInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmMsmImplServletsAuditLogServletInfo
        Decoders.addDecoder(clazz: ComDayCqWcmMsmImplServletsAuditLogServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmMsmImplServletsAuditLogServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmMsmImplServletsAuditLogServletInfo() : instance as! ComDayCqWcmMsmImplServletsAuditLogServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmMsmImplServletsAuditLogServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmMsmImplServletsAuditLogServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmMsmImplServletsAuditLogServletProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplServletsAuditLogServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmMsmImplServletsAuditLogServletProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmMsmImplServletsAuditLogServletProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmMsmImplServletsAuditLogServletProperties
        Decoders.addDecoder(clazz: ComDayCqWcmMsmImplServletsAuditLogServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmMsmImplServletsAuditLogServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmMsmImplServletsAuditLogServletProperties() : instance as! ComDayCqWcmMsmImplServletsAuditLogServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["auditlogservlet.default.events.count"] as AnyObject?) {
                
                case let .success(value): _result.auditlogservletDefaultEventsCount = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auditlogservlet.default.path"] as AnyObject?) {
                
                case let .success(value): _result.auditlogservletDefaultPath = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmMsmImplServletsAuditLogServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmNotificationEmailImplEmailChannelInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmNotificationEmailImplEmailChannelInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmNotificationEmailImplEmailChannelInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmNotificationEmailImplEmailChannelInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmNotificationEmailImplEmailChannelInfo
        Decoders.addDecoder(clazz: ComDayCqWcmNotificationEmailImplEmailChannelInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmNotificationEmailImplEmailChannelInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmNotificationEmailImplEmailChannelInfo() : instance as! ComDayCqWcmNotificationEmailImplEmailChannelInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmNotificationEmailImplEmailChannelProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmNotificationEmailImplEmailChannelInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmNotificationEmailImplEmailChannelProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmNotificationEmailImplEmailChannelProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmNotificationEmailImplEmailChannelProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmNotificationEmailImplEmailChannelProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmNotificationEmailImplEmailChannelProperties
        Decoders.addDecoder(clazz: ComDayCqWcmNotificationEmailImplEmailChannelProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmNotificationEmailImplEmailChannelProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmNotificationEmailImplEmailChannelProperties() : instance as! ComDayCqWcmNotificationEmailImplEmailChannelProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["email.from"] as AnyObject?) {
                
                case let .success(value): _result.emailFrom = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmNotificationEmailImplEmailChannelProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmNotificationImplNotificationManagerImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmNotificationImplNotificationManagerImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmNotificationImplNotificationManagerImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmNotificationImplNotificationManagerImplInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmNotificationImplNotificationManagerImplInfo
        Decoders.addDecoder(clazz: ComDayCqWcmNotificationImplNotificationManagerImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmNotificationImplNotificationManagerImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmNotificationImplNotificationManagerImplInfo() : instance as! ComDayCqWcmNotificationImplNotificationManagerImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmNotificationImplNotificationManagerImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmNotificationImplNotificationManagerImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmNotificationImplNotificationManagerImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmNotificationImplNotificationManagerImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmNotificationImplNotificationManagerImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmNotificationImplNotificationManagerImplProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmNotificationImplNotificationManagerImplProperties
        Decoders.addDecoder(clazz: ComDayCqWcmNotificationImplNotificationManagerImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmNotificationImplNotificationManagerImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmNotificationImplNotificationManagerImplProperties() : instance as! ComDayCqWcmNotificationImplNotificationManagerImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["event.topics"] as AnyObject?) {
                
                case let .success(value): _result.eventTopics = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmNotificationImplNotificationManagerImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmScriptingImplBVPManagerInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmScriptingImplBVPManagerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmScriptingImplBVPManagerInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmScriptingImplBVPManagerInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmScriptingImplBVPManagerInfo
        Decoders.addDecoder(clazz: ComDayCqWcmScriptingImplBVPManagerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmScriptingImplBVPManagerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmScriptingImplBVPManagerInfo() : instance as! ComDayCqWcmScriptingImplBVPManagerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmScriptingImplBVPManagerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmScriptingImplBVPManagerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmScriptingImplBVPManagerProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmScriptingImplBVPManagerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmScriptingImplBVPManagerProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmScriptingImplBVPManagerProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmScriptingImplBVPManagerProperties
        Decoders.addDecoder(clazz: ComDayCqWcmScriptingImplBVPManagerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmScriptingImplBVPManagerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmScriptingImplBVPManagerProperties() : instance as! ComDayCqWcmScriptingImplBVPManagerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["com.day.cq.wcm.scripting.bvp.script.engines"] as AnyObject?) {
                
                case let .success(value): _result.comDayCqWcmScriptingBvpScriptEngines = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmScriptingImplBVPManagerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmUndoUndoConfigInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmUndoUndoConfigInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmUndoUndoConfigInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmUndoUndoConfigInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmUndoUndoConfigInfo
        Decoders.addDecoder(clazz: ComDayCqWcmUndoUndoConfigInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmUndoUndoConfigInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmUndoUndoConfigInfo() : instance as! ComDayCqWcmUndoUndoConfigInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmUndoUndoConfigProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmUndoUndoConfigInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmUndoUndoConfigProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmUndoUndoConfigProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmUndoUndoConfigProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmUndoUndoConfigProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmUndoUndoConfigProperties
        Decoders.addDecoder(clazz: ComDayCqWcmUndoUndoConfigProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmUndoUndoConfigProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmUndoUndoConfigProperties() : instance as! ComDayCqWcmUndoUndoConfigProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.wcm.undo.enabled"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmUndoEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.wcm.undo.path"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmUndoPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.wcm.undo.validity"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmUndoValidity = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.wcm.undo.steps"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmUndoSteps = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.wcm.undo.persistence"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmUndoPersistence = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.wcm.undo.persistence.mode"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmUndoPersistenceMode = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.wcm.undo.markermode"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmUndoMarkermode = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.undo.whitelist"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmUndoWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.undo.blacklist"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmUndoBlacklist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmUndoUndoConfigProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo
        Decoders.addDecoder(clazz: ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo() : instance as! ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties
        Decoders.addDecoder(clazz: ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties() : instance as! ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["Flush agents"] as AnyObject?) {
                
                case let .success(value): _result.flushAgents = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo
        Decoders.addDecoder(clazz: ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo() : instance as! ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties
        Decoders.addDecoder(clazz: ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties() : instance as! ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"] as AnyObject?) {
                
                case let .success(value): _result.eventFilter = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["minThreadPoolSize"] as AnyObject?) {
                
                case let .success(value): _result.minThreadPoolSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxThreadPoolSize"] as AnyObject?) {
                
                case let .success(value): _result.maxThreadPoolSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.wcm.workflow.terminate.on.activate"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmWorkflowTerminateOnActivate = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.worklfow.terminate.exclusion.list"] as AnyObject?) {
                
                case let .success(value): _result.cqWcmWorklfowTerminateExclusionList = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo]
        Decoders.addDecoder(clazz: [ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo]> in
            return Decoders.decode(clazz: [ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo].self, source: source)
        }

        // Decoder for ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo
        Decoders.addDecoder(clazz: ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo() : instance as! ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties]
        Decoders.addDecoder(clazz: [ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties]> in
            return Decoders.decode(clazz: [ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties].self, source: source)
        }

        // Decoder for ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties
        Decoders.addDecoder(clazz: ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties() : instance as! ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["workflowpackageinfoprovider.filter"] as AnyObject?) {
                
                case let .success(value): _result.workflowpackageinfoproviderFilter = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["workflowpackageinfoprovider.filter.rootpath"] as AnyObject?) {
                
                case let .success(value): _result.workflowpackageinfoproviderFilterRootpath = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWidgetImplHtmlLibraryManagerImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqWidgetImplHtmlLibraryManagerImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWidgetImplHtmlLibraryManagerImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqWidgetImplHtmlLibraryManagerImplInfo].self, source: source)
        }

        // Decoder for ComDayCqWidgetImplHtmlLibraryManagerImplInfo
        Decoders.addDecoder(clazz: ComDayCqWidgetImplHtmlLibraryManagerImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWidgetImplHtmlLibraryManagerImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWidgetImplHtmlLibraryManagerImplInfo() : instance as! ComDayCqWidgetImplHtmlLibraryManagerImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWidgetImplHtmlLibraryManagerImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWidgetImplHtmlLibraryManagerImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWidgetImplHtmlLibraryManagerImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqWidgetImplHtmlLibraryManagerImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWidgetImplHtmlLibraryManagerImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqWidgetImplHtmlLibraryManagerImplProperties].self, source: source)
        }

        // Decoder for ComDayCqWidgetImplHtmlLibraryManagerImplProperties
        Decoders.addDecoder(clazz: ComDayCqWidgetImplHtmlLibraryManagerImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWidgetImplHtmlLibraryManagerImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWidgetImplHtmlLibraryManagerImplProperties() : instance as! ComDayCqWidgetImplHtmlLibraryManagerImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["htmllibmanager.clientmanager"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerClientmanager = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmllibmanager.debug"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerDebug = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmllibmanager.debug.console"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerDebugConsole = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["htmllibmanager.debug.init.js"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerDebugInitJs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["htmllibmanager.defaultthemename"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerDefaultthemename = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["htmllibmanager.defaultuserthemename"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerDefaultuserthemename = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["htmllibmanager.firebuglite.path"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerFirebuglitePath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmllibmanager.forceCQUrlInfo"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerForceCQUrlInfo = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmllibmanager.gzip"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerGzip = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["htmllibmanager.maxage"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerMaxage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["htmllibmanager.maxDataUriSize"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerMaxDataUriSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmllibmanager.minify"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerMinify = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["htmllibmanager.path.list"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerPathList = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmllibmanager.timing"] as AnyObject?) {
                
                case let .success(value): _result.htmllibmanagerTiming = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWidgetImplHtmlLibraryManagerImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWidgetImplWidgetExtensionProviderImplInfo]
        Decoders.addDecoder(clazz: [ComDayCqWidgetImplWidgetExtensionProviderImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWidgetImplWidgetExtensionProviderImplInfo]> in
            return Decoders.decode(clazz: [ComDayCqWidgetImplWidgetExtensionProviderImplInfo].self, source: source)
        }

        // Decoder for ComDayCqWidgetImplWidgetExtensionProviderImplInfo
        Decoders.addDecoder(clazz: ComDayCqWidgetImplWidgetExtensionProviderImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWidgetImplWidgetExtensionProviderImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWidgetImplWidgetExtensionProviderImplInfo() : instance as! ComDayCqWidgetImplWidgetExtensionProviderImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWidgetImplWidgetExtensionProviderImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWidgetImplWidgetExtensionProviderImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWidgetImplWidgetExtensionProviderImplProperties]
        Decoders.addDecoder(clazz: [ComDayCqWidgetImplWidgetExtensionProviderImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWidgetImplWidgetExtensionProviderImplProperties]> in
            return Decoders.decode(clazz: [ComDayCqWidgetImplWidgetExtensionProviderImplProperties].self, source: source)
        }

        // Decoder for ComDayCqWidgetImplWidgetExtensionProviderImplProperties
        Decoders.addDecoder(clazz: ComDayCqWidgetImplWidgetExtensionProviderImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWidgetImplWidgetExtensionProviderImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWidgetImplWidgetExtensionProviderImplProperties() : instance as! ComDayCqWidgetImplWidgetExtensionProviderImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["extendable.widgets"] as AnyObject?) {
                
                case let .success(value): _result.extendableWidgets = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["widgetextensionprovider.debug"] as AnyObject?) {
                
                case let .success(value): _result.widgetextensionproviderDebug = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWidgetImplWidgetExtensionProviderImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWorkflowImplEmailEMailNotificationServiceInfo]
        Decoders.addDecoder(clazz: [ComDayCqWorkflowImplEmailEMailNotificationServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWorkflowImplEmailEMailNotificationServiceInfo]> in
            return Decoders.decode(clazz: [ComDayCqWorkflowImplEmailEMailNotificationServiceInfo].self, source: source)
        }

        // Decoder for ComDayCqWorkflowImplEmailEMailNotificationServiceInfo
        Decoders.addDecoder(clazz: ComDayCqWorkflowImplEmailEMailNotificationServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWorkflowImplEmailEMailNotificationServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWorkflowImplEmailEMailNotificationServiceInfo() : instance as! ComDayCqWorkflowImplEmailEMailNotificationServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWorkflowImplEmailEMailNotificationServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWorkflowImplEmailEMailNotificationServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWorkflowImplEmailEMailNotificationServiceProperties]
        Decoders.addDecoder(clazz: [ComDayCqWorkflowImplEmailEMailNotificationServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWorkflowImplEmailEMailNotificationServiceProperties]> in
            return Decoders.decode(clazz: [ComDayCqWorkflowImplEmailEMailNotificationServiceProperties].self, source: source)
        }

        // Decoder for ComDayCqWorkflowImplEmailEMailNotificationServiceProperties
        Decoders.addDecoder(clazz: ComDayCqWorkflowImplEmailEMailNotificationServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWorkflowImplEmailEMailNotificationServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWorkflowImplEmailEMailNotificationServiceProperties() : instance as! ComDayCqWorkflowImplEmailEMailNotificationServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["from.address"] as AnyObject?) {
                
                case let .success(value): _result.fromAddress = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["host.prefix"] as AnyObject?) {
                
                case let .success(value): _result.hostPrefix = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["notify.onabort"] as AnyObject?) {
                
                case let .success(value): _result.notifyOnabort = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["notify.oncomplete"] as AnyObject?) {
                
                case let .success(value): _result.notifyOncomplete = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["notify.oncontainercomplete"] as AnyObject?) {
                
                case let .success(value): _result.notifyOncontainercomplete = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["notify.useronly"] as AnyObject?) {
                
                case let .success(value): _result.notifyUseronly = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWorkflowImplEmailEMailNotificationServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo]
        Decoders.addDecoder(clazz: [ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo]> in
            return Decoders.decode(clazz: [ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo].self, source: source)
        }

        // Decoder for ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo
        Decoders.addDecoder(clazz: ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo() : instance as! ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties]
        Decoders.addDecoder(clazz: [ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties]> in
            return Decoders.decode(clazz: [ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties].self, source: source)
        }

        // Decoder for ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties
        Decoders.addDecoder(clazz: ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties() : instance as! ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["notify.onupdate"] as AnyObject?) {
                
                case let .success(value): _result.notifyOnupdate = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["notify.oncomplete"] as AnyObject?) {
                
                case let .success(value): _result.notifyOncomplete = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo]
        Decoders.addDecoder(clazz: [ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo]> in
            return Decoders.decode(clazz: [ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo].self, source: source)
        }

        // Decoder for ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo
        Decoders.addDecoder(clazz: ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo() : instance as! ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties]
        Decoders.addDecoder(clazz: [ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties]> in
            return Decoders.decode(clazz: [ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties].self, source: source)
        }

        // Decoder for ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties
        Decoders.addDecoder(clazz: ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties() : instance as! ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"] as AnyObject?) {
                
                case let .success(value): _result.path = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["token.required.attr"] as AnyObject?) {
                
                case let .success(value): _result.tokenRequiredAttr = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["token.alternate.url"] as AnyObject?) {
                
                case let .success(value): _result.tokenAlternateUrl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["token.encapsulated"] as AnyObject?) {
                
                case let .success(value): _result.tokenEncapsulated = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["skip.token.refresh"] as AnyObject?) {
                
                case let .success(value): _result.skipTokenRefresh = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCrxSecurityTokenImplTokenCleanupTaskInfo]
        Decoders.addDecoder(clazz: [ComDayCrxSecurityTokenImplTokenCleanupTaskInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCrxSecurityTokenImplTokenCleanupTaskInfo]> in
            return Decoders.decode(clazz: [ComDayCrxSecurityTokenImplTokenCleanupTaskInfo].self, source: source)
        }

        // Decoder for ComDayCrxSecurityTokenImplTokenCleanupTaskInfo
        Decoders.addDecoder(clazz: ComDayCrxSecurityTokenImplTokenCleanupTaskInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCrxSecurityTokenImplTokenCleanupTaskInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCrxSecurityTokenImplTokenCleanupTaskInfo() : instance as! ComDayCrxSecurityTokenImplTokenCleanupTaskInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ComDayCrxSecurityTokenImplTokenCleanupTaskProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCrxSecurityTokenImplTokenCleanupTaskInfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComDayCrxSecurityTokenImplTokenCleanupTaskProperties]
        Decoders.addDecoder(clazz: [ComDayCrxSecurityTokenImplTokenCleanupTaskProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComDayCrxSecurityTokenImplTokenCleanupTaskProperties]> in
            return Decoders.decode(clazz: [ComDayCrxSecurityTokenImplTokenCleanupTaskProperties].self, source: source)
        }

        // Decoder for ComDayCrxSecurityTokenImplTokenCleanupTaskProperties
        Decoders.addDecoder(clazz: ComDayCrxSecurityTokenImplTokenCleanupTaskProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComDayCrxSecurityTokenImplTokenCleanupTaskProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComDayCrxSecurityTokenImplTokenCleanupTaskProperties() : instance as! ComDayCrxSecurityTokenImplTokenCleanupTaskProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enable.token.cleanup.task"] as AnyObject?) {
                
                case let .success(value): _result.enableTokenCleanupTask = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"] as AnyObject?) {
                
                case let .success(value): _result.schedulerExpression = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["batch.size"] as AnyObject?) {
                
                case let .success(value): _result.batchSize = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComDayCrxSecurityTokenImplTokenCleanupTaskProperties", actual: "\(source)"))
            }
        }
        // Decoder for [ConfigNodePropertyArray]
        Decoders.addDecoder(clazz: [ConfigNodePropertyArray].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ConfigNodePropertyArray]> in
            return Decoders.decode(clazz: [ConfigNodePropertyArray].self, source: source)
        }

        // Decoder for ConfigNodePropertyArray
        Decoders.addDecoder(clazz: ConfigNodePropertyArray.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ConfigNodePropertyArray> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ConfigNodePropertyArray() : instance as! ConfigNodePropertyArray
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["optional"] as AnyObject?) {
                
                case let .success(value): _result._optional = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_set"] as AnyObject?) {
                
                case let .success(value): _result.isSet = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): _result.type = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["values"] as AnyObject?) {
                
                case let .success(value): _result.values = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ConfigNodePropertyArray", actual: "\(source)"))
            }
        }
        // Decoder for [ConfigNodePropertyBoolean]
        Decoders.addDecoder(clazz: [ConfigNodePropertyBoolean].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ConfigNodePropertyBoolean]> in
            return Decoders.decode(clazz: [ConfigNodePropertyBoolean].self, source: source)
        }

        // Decoder for ConfigNodePropertyBoolean
        Decoders.addDecoder(clazz: ConfigNodePropertyBoolean.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ConfigNodePropertyBoolean> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ConfigNodePropertyBoolean() : instance as! ConfigNodePropertyBoolean
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["optional"] as AnyObject?) {
                
                case let .success(value): _result._optional = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_set"] as AnyObject?) {
                
                case let .success(value): _result.isSet = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): _result.type = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["value"] as AnyObject?) {
                
                case let .success(value): _result.value = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ConfigNodePropertyBoolean", actual: "\(source)"))
            }
        }
        // Decoder for [ConfigNodePropertyDropDown]
        Decoders.addDecoder(clazz: [ConfigNodePropertyDropDown].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ConfigNodePropertyDropDown]> in
            return Decoders.decode(clazz: [ConfigNodePropertyDropDown].self, source: source)
        }

        // Decoder for ConfigNodePropertyDropDown
        Decoders.addDecoder(clazz: ConfigNodePropertyDropDown.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ConfigNodePropertyDropDown> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ConfigNodePropertyDropDown() : instance as! ConfigNodePropertyDropDown
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["optional"] as AnyObject?) {
                
                case let .success(value): _result._optional = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_set"] as AnyObject?) {
                
                case let .success(value): _result.isSet = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDownType.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): _result.type = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["value"] as AnyObject?) {
                
                case let .success(value): _result.value = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ConfigNodePropertyDropDown", actual: "\(source)"))
            }
        }
        // Decoder for [ConfigNodePropertyDropDownType]
        Decoders.addDecoder(clazz: [ConfigNodePropertyDropDownType].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ConfigNodePropertyDropDownType]> in
            return Decoders.decode(clazz: [ConfigNodePropertyDropDownType].self, source: source)
        }

        // Decoder for ConfigNodePropertyDropDownType
        Decoders.addDecoder(clazz: ConfigNodePropertyDropDownType.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ConfigNodePropertyDropDownType> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ConfigNodePropertyDropDownType() : instance as! ConfigNodePropertyDropDownType
                switch Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["labels"] as AnyObject?) {
                
                case let .success(value): _result.labels = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["values"] as AnyObject?) {
                
                case let .success(value): _result.values = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ConfigNodePropertyDropDownType", actual: "\(source)"))
            }
        }
        // Decoder for [ConfigNodePropertyFloat]
        Decoders.addDecoder(clazz: [ConfigNodePropertyFloat].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ConfigNodePropertyFloat]> in
            return Decoders.decode(clazz: [ConfigNodePropertyFloat].self, source: source)
        }

        // Decoder for ConfigNodePropertyFloat
        Decoders.addDecoder(clazz: ConfigNodePropertyFloat.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ConfigNodePropertyFloat> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ConfigNodePropertyFloat() : instance as! ConfigNodePropertyFloat
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["optional"] as AnyObject?) {
                
                case let .success(value): _result._optional = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_set"] as AnyObject?) {
                
                case let .success(value): _result.isSet = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): _result.type = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"] as AnyObject?) {
                
                case let .success(value): _result.value = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ConfigNodePropertyFloat", actual: "\(source)"))
            }
        }
        // Decoder for [ConfigNodePropertyInteger]
        Decoders.addDecoder(clazz: [ConfigNodePropertyInteger].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ConfigNodePropertyInteger]> in
            return Decoders.decode(clazz: [ConfigNodePropertyInteger].self, source: source)
        }

        // Decoder for ConfigNodePropertyInteger
        Decoders.addDecoder(clazz: ConfigNodePropertyInteger.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ConfigNodePropertyInteger> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ConfigNodePropertyInteger() : instance as! ConfigNodePropertyInteger
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["optional"] as AnyObject?) {
                
                case let .success(value): _result._optional = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_set"] as AnyObject?) {
                
                case let .success(value): _result.isSet = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): _result.type = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["value"] as AnyObject?) {
                
                case let .success(value): _result.value = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ConfigNodePropertyInteger", actual: "\(source)"))
            }
        }
        // Decoder for [ConfigNodePropertyString]
        Decoders.addDecoder(clazz: [ConfigNodePropertyString].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ConfigNodePropertyString]> in
            return Decoders.decode(clazz: [ConfigNodePropertyString].self, source: source)
        }

        // Decoder for ConfigNodePropertyString
        Decoders.addDecoder(clazz: ConfigNodePropertyString.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ConfigNodePropertyString> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ConfigNodePropertyString() : instance as! ConfigNodePropertyString
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["optional"] as AnyObject?) {
                
                case let .success(value): _result._optional = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_set"] as AnyObject?) {
                
                case let .success(value): _result.isSet = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): _result.type = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?) {
                
                case let .success(value): _result.value = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ConfigNodePropertyString", actual: "\(source)"))
            }
        }
        // Decoder for [GuideLocalizationServiceInfo]
        Decoders.addDecoder(clazz: [GuideLocalizationServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[GuideLocalizationServiceInfo]> in
            return Decoders.decode(clazz: [GuideLocalizationServiceInfo].self, source: source)
        }

        // Decoder for GuideLocalizationServiceInfo
        Decoders.addDecoder(clazz: GuideLocalizationServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<GuideLocalizationServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? GuideLocalizationServiceInfo() : instance as! GuideLocalizationServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: GuideLocalizationServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "GuideLocalizationServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [GuideLocalizationServiceProperties]
        Decoders.addDecoder(clazz: [GuideLocalizationServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[GuideLocalizationServiceProperties]> in
            return Decoders.decode(clazz: [GuideLocalizationServiceProperties].self, source: source)
        }

        // Decoder for GuideLocalizationServiceProperties
        Decoders.addDecoder(clazz: GuideLocalizationServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<GuideLocalizationServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? GuideLocalizationServiceProperties() : instance as! GuideLocalizationServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["supportedLocales"] as AnyObject?) {
                
                case let .success(value): _result.supportedLocales = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["Localizable Properties"] as AnyObject?) {
                
                case let .success(value): _result.localizableProperties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "GuideLocalizationServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [MessagingUserComponentFactoryInfo]
        Decoders.addDecoder(clazz: [MessagingUserComponentFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[MessagingUserComponentFactoryInfo]> in
            return Decoders.decode(clazz: [MessagingUserComponentFactoryInfo].self, source: source)
        }

        // Decoder for MessagingUserComponentFactoryInfo
        Decoders.addDecoder(clazz: MessagingUserComponentFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<MessagingUserComponentFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? MessagingUserComponentFactoryInfo() : instance as! MessagingUserComponentFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: MessagingUserComponentFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "MessagingUserComponentFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [MessagingUserComponentFactoryProperties]
        Decoders.addDecoder(clazz: [MessagingUserComponentFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[MessagingUserComponentFactoryProperties]> in
            return Decoders.decode(clazz: [MessagingUserComponentFactoryProperties].self, source: source)
        }

        // Decoder for MessagingUserComponentFactoryProperties
        Decoders.addDecoder(clazz: MessagingUserComponentFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<MessagingUserComponentFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? MessagingUserComponentFactoryProperties() : instance as! MessagingUserComponentFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priority"] as AnyObject?) {
                
                case let .success(value): _result.priority = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "MessagingUserComponentFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheAriesJmxFrameworkStateConfigInfo]
        Decoders.addDecoder(clazz: [OrgApacheAriesJmxFrameworkStateConfigInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheAriesJmxFrameworkStateConfigInfo]> in
            return Decoders.decode(clazz: [OrgApacheAriesJmxFrameworkStateConfigInfo].self, source: source)
        }

        // Decoder for OrgApacheAriesJmxFrameworkStateConfigInfo
        Decoders.addDecoder(clazz: OrgApacheAriesJmxFrameworkStateConfigInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheAriesJmxFrameworkStateConfigInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheAriesJmxFrameworkStateConfigInfo() : instance as! OrgApacheAriesJmxFrameworkStateConfigInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheAriesJmxFrameworkStateConfigProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheAriesJmxFrameworkStateConfigInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheAriesJmxFrameworkStateConfigProperties]
        Decoders.addDecoder(clazz: [OrgApacheAriesJmxFrameworkStateConfigProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheAriesJmxFrameworkStateConfigProperties]> in
            return Decoders.decode(clazz: [OrgApacheAriesJmxFrameworkStateConfigProperties].self, source: source)
        }

        // Decoder for OrgApacheAriesJmxFrameworkStateConfigProperties
        Decoders.addDecoder(clazz: OrgApacheAriesJmxFrameworkStateConfigProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheAriesJmxFrameworkStateConfigProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheAriesJmxFrameworkStateConfigProperties() : instance as! OrgApacheAriesJmxFrameworkStateConfigProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["attributeChangeNotificationEnabled"] as AnyObject?) {
                
                case let .success(value): _result.attributeChangeNotificationEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheAriesJmxFrameworkStateConfigProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixEventadminImplEventAdminInfo]
        Decoders.addDecoder(clazz: [OrgApacheFelixEventadminImplEventAdminInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixEventadminImplEventAdminInfo]> in
            return Decoders.decode(clazz: [OrgApacheFelixEventadminImplEventAdminInfo].self, source: source)
        }

        // Decoder for OrgApacheFelixEventadminImplEventAdminInfo
        Decoders.addDecoder(clazz: OrgApacheFelixEventadminImplEventAdminInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixEventadminImplEventAdminInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixEventadminImplEventAdminInfo() : instance as! OrgApacheFelixEventadminImplEventAdminInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheFelixEventadminImplEventAdminProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixEventadminImplEventAdminInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixEventadminImplEventAdminProperties]
        Decoders.addDecoder(clazz: [OrgApacheFelixEventadminImplEventAdminProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixEventadminImplEventAdminProperties]> in
            return Decoders.decode(clazz: [OrgApacheFelixEventadminImplEventAdminProperties].self, source: source)
        }

        // Decoder for OrgApacheFelixEventadminImplEventAdminProperties
        Decoders.addDecoder(clazz: OrgApacheFelixEventadminImplEventAdminProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixEventadminImplEventAdminProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixEventadminImplEventAdminProperties() : instance as! OrgApacheFelixEventadminImplEventAdminProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.eventadmin.ThreadPoolSize"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixEventadminThreadPoolSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyFloat.self, source: sourceDictionary["org.apache.felix.eventadmin.AsyncToSyncThreadRatio"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixEventadminAsyncToSyncThreadRatio = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.eventadmin.Timeout"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixEventadminTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.eventadmin.RequireTopic"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixEventadminRequireTopic = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.eventadmin.IgnoreTimeout"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixEventadminIgnoreTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.eventadmin.IgnoreTopic"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixEventadminIgnoreTopic = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixEventadminImplEventAdminProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixHttpInfo]
        Decoders.addDecoder(clazz: [OrgApacheFelixHttpInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixHttpInfo]> in
            return Decoders.decode(clazz: [OrgApacheFelixHttpInfo].self, source: source)
        }

        // Decoder for OrgApacheFelixHttpInfo
        Decoders.addDecoder(clazz: OrgApacheFelixHttpInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixHttpInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixHttpInfo() : instance as! OrgApacheFelixHttpInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheFelixHttpProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixHttpInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixHttpProperties]
        Decoders.addDecoder(clazz: [OrgApacheFelixHttpProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixHttpProperties]> in
            return Decoders.decode(clazz: [OrgApacheFelixHttpProperties].self, source: source)
        }

        // Decoder for OrgApacheFelixHttpProperties
        Decoders.addDecoder(clazz: OrgApacheFelixHttpProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixHttpProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixHttpProperties() : instance as! OrgApacheFelixHttpProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.http.host"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpHost = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.http.enable"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpEnable = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.osgi.service.http.port"] as AnyObject?) {
                
                case let .success(value): _result.orgOsgiServiceHttpPort = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.http.timeout"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.https.enable"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpsEnable = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.osgi.service.http.port.secure"] as AnyObject?) {
                
                case let .success(value): _result.orgOsgiServiceHttpPortSecure = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.https.keystore"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpsKeystore = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.https.keystore.password"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpsKeystorePassword = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.https.keystore.key.password"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpsKeystoreKeyPassword = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.https.truststore"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpsTruststore = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.https.truststore.password"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpsTruststorePassword = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["org.apache.felix.https.clientcertificate"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpsClientcertificate = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.http.context_path"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpContextPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.http.mbeans"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpMbeans = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.http.session.timeout"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpSessionTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.http.jetty.threadpool.max"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpJettyThreadpoolMax = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.http.jetty.acceptors"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpJettyAcceptors = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.http.jetty.selectors"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpJettySelectors = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.http.jetty.headerBufferSize"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpJettyHeaderBufferSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.http.jetty.requestBufferSize"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpJettyRequestBufferSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.http.jetty.responseBufferSize"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpJettyResponseBufferSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.http.jetty.maxFormSize"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpJettyMaxFormSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.http.path_exclusions"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpPathExclusions = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.https.jetty.ciphersuites.excluded"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpsJettyCiphersuitesExcluded = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.https.jetty.ciphersuites.included"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpsJettyCiphersuitesIncluded = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.http.jetty.sendServerHeader"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpJettySendServerHeader = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.https.jetty.protocols.included"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpsJettyProtocolsIncluded = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.https.jetty.protocols.excluded"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpsJettyProtocolsExcluded = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.proxy.load.balancer.connection.enable"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixProxyLoadBalancerConnectionEnable = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.https.jetty.renegotiateAllowed"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpsJettyRenegotiateAllowed = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.https.jetty.session.cookie.httpOnly"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpsJettySessionCookieHttpOnly = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.https.jetty.session.cookie.secure"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpsJettySessionCookieSecure = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.eclipse.jetty.servlet.SessionIdPathParameterName"] as AnyObject?) {
                
                case let .success(value): _result.orgEclipseJettyServletSessionIdPathParameterName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding"] as AnyObject?) {
                
                case let .success(value): _result.orgEclipseJettyServletCheckingRemoteSessionIdEncoding = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.eclipse.jetty.servlet.SessionCookie"] as AnyObject?) {
                
                case let .success(value): _result.orgEclipseJettyServletSessionCookie = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.eclipse.jetty.servlet.SessionDomain"] as AnyObject?) {
                
                case let .success(value): _result.orgEclipseJettyServletSessionDomain = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.eclipse.jetty.servlet.SessionPath"] as AnyObject?) {
                
                case let .success(value): _result.orgEclipseJettyServletSessionPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.eclipse.jetty.servlet.MaxAge"] as AnyObject?) {
                
                case let .success(value): _result.orgEclipseJettyServletMaxAge = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.http.name"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.jetty.gziphandler.enable"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixJettyGziphandlerEnable = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.jetty.gzip.minGzipSize"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixJettyGzipMinGzipSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.jetty.gzip.compressionLevel"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixJettyGzipCompressionLevel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.jetty.gzip.inflateBufferSize"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixJettyGzipInflateBufferSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.jetty.gzip.syncFlush"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixJettyGzipSyncFlush = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.jetty.gzip.excludedUserAgents"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixJettyGzipExcludedUserAgents = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.jetty.gzip.includedMethods"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixJettyGzipIncludedMethods = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.jetty.gzip.excludedMethods"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixJettyGzipExcludedMethods = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.jetty.gzip.includedPaths"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixJettyGzipIncludedPaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.jetty.gzip.excludedPaths"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixJettyGzipExcludedPaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.jetty.gzip.includedMimeTypes"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixJettyGzipIncludedMimeTypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.jetty.gzip.excludedMimeTypes"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixJettyGzipExcludedMimeTypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.http.session.invalidate"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpSessionInvalidate = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.http.session.uniqueid"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheFelixHttpSessionUniqueid = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixHttpProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixHttpSslfilterSslFilterInfo]
        Decoders.addDecoder(clazz: [OrgApacheFelixHttpSslfilterSslFilterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixHttpSslfilterSslFilterInfo]> in
            return Decoders.decode(clazz: [OrgApacheFelixHttpSslfilterSslFilterInfo].self, source: source)
        }

        // Decoder for OrgApacheFelixHttpSslfilterSslFilterInfo
        Decoders.addDecoder(clazz: OrgApacheFelixHttpSslfilterSslFilterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixHttpSslfilterSslFilterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixHttpSslfilterSslFilterInfo() : instance as! OrgApacheFelixHttpSslfilterSslFilterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheFelixHttpSslfilterSslFilterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixHttpSslfilterSslFilterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixHttpSslfilterSslFilterProperties]
        Decoders.addDecoder(clazz: [OrgApacheFelixHttpSslfilterSslFilterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixHttpSslfilterSslFilterProperties]> in
            return Decoders.decode(clazz: [OrgApacheFelixHttpSslfilterSslFilterProperties].self, source: source)
        }

        // Decoder for OrgApacheFelixHttpSslfilterSslFilterProperties
        Decoders.addDecoder(clazz: OrgApacheFelixHttpSslfilterSslFilterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixHttpSslfilterSslFilterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixHttpSslfilterSslFilterProperties() : instance as! OrgApacheFelixHttpSslfilterSslFilterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["ssl-forward.header"] as AnyObject?) {
                
                case let .success(value): _result.sslForwardHeader = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["ssl-forward.value"] as AnyObject?) {
                
                case let .success(value): _result.sslForwardValue = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["ssl-forward-cert.header"] as AnyObject?) {
                
                case let .success(value): _result.sslForwardCertHeader = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["rewrite.absolute.urls"] as AnyObject?) {
                
                case let .success(value): _result.rewriteAbsoluteUrls = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixHttpSslfilterSslFilterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixJaasConfigurationFactoryInfo]
        Decoders.addDecoder(clazz: [OrgApacheFelixJaasConfigurationFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixJaasConfigurationFactoryInfo]> in
            return Decoders.decode(clazz: [OrgApacheFelixJaasConfigurationFactoryInfo].self, source: source)
        }

        // Decoder for OrgApacheFelixJaasConfigurationFactoryInfo
        Decoders.addDecoder(clazz: OrgApacheFelixJaasConfigurationFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixJaasConfigurationFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixJaasConfigurationFactoryInfo() : instance as! OrgApacheFelixJaasConfigurationFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheFelixJaasConfigurationFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixJaasConfigurationFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixJaasConfigurationFactoryProperties]
        Decoders.addDecoder(clazz: [OrgApacheFelixJaasConfigurationFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixJaasConfigurationFactoryProperties]> in
            return Decoders.decode(clazz: [OrgApacheFelixJaasConfigurationFactoryProperties].self, source: source)
        }

        // Decoder for OrgApacheFelixJaasConfigurationFactoryProperties
        Decoders.addDecoder(clazz: OrgApacheFelixJaasConfigurationFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixJaasConfigurationFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixJaasConfigurationFactoryProperties() : instance as! OrgApacheFelixJaasConfigurationFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["jaas.controlFlag"] as AnyObject?) {
                
                case let .success(value): _result.jaasControlFlag = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["jaas.ranking"] as AnyObject?) {
                
                case let .success(value): _result.jaasRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jaas.realmName"] as AnyObject?) {
                
                case let .success(value): _result.jaasRealmName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jaas.classname"] as AnyObject?) {
                
                case let .success(value): _result.jaasClassname = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["jaas.options"] as AnyObject?) {
                
                case let .success(value): _result.jaasOptions = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixJaasConfigurationFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixJaasConfigurationSpiInfo]
        Decoders.addDecoder(clazz: [OrgApacheFelixJaasConfigurationSpiInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixJaasConfigurationSpiInfo]> in
            return Decoders.decode(clazz: [OrgApacheFelixJaasConfigurationSpiInfo].self, source: source)
        }

        // Decoder for OrgApacheFelixJaasConfigurationSpiInfo
        Decoders.addDecoder(clazz: OrgApacheFelixJaasConfigurationSpiInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixJaasConfigurationSpiInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixJaasConfigurationSpiInfo() : instance as! OrgApacheFelixJaasConfigurationSpiInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheFelixJaasConfigurationSpiProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixJaasConfigurationSpiInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixJaasConfigurationSpiProperties]
        Decoders.addDecoder(clazz: [OrgApacheFelixJaasConfigurationSpiProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixJaasConfigurationSpiProperties]> in
            return Decoders.decode(clazz: [OrgApacheFelixJaasConfigurationSpiProperties].self, source: source)
        }

        // Decoder for OrgApacheFelixJaasConfigurationSpiProperties
        Decoders.addDecoder(clazz: OrgApacheFelixJaasConfigurationSpiProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixJaasConfigurationSpiProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixJaasConfigurationSpiProperties() : instance as! OrgApacheFelixJaasConfigurationSpiProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jaas.defaultRealmName"] as AnyObject?) {
                
                case let .success(value): _result.jaasDefaultRealmName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jaas.configProviderName"] as AnyObject?) {
                
                case let .success(value): _result.jaasConfigProviderName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["jaas.globalConfigPolicy"] as AnyObject?) {
                
                case let .success(value): _result.jaasGlobalConfigPolicy = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixJaasConfigurationSpiProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixScrScrServiceInfo]
        Decoders.addDecoder(clazz: [OrgApacheFelixScrScrServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixScrScrServiceInfo]> in
            return Decoders.decode(clazz: [OrgApacheFelixScrScrServiceInfo].self, source: source)
        }

        // Decoder for OrgApacheFelixScrScrServiceInfo
        Decoders.addDecoder(clazz: OrgApacheFelixScrScrServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixScrScrServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixScrScrServiceInfo() : instance as! OrgApacheFelixScrScrServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheFelixScrScrServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixScrScrServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixScrScrServiceProperties]
        Decoders.addDecoder(clazz: [OrgApacheFelixScrScrServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixScrScrServiceProperties]> in
            return Decoders.decode(clazz: [OrgApacheFelixScrScrServiceProperties].self, source: source)
        }

        // Decoder for OrgApacheFelixScrScrServiceProperties
        Decoders.addDecoder(clazz: OrgApacheFelixScrScrServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixScrScrServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixScrScrServiceProperties() : instance as! OrgApacheFelixScrScrServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["ds.loglevel"] as AnyObject?) {
                
                case let .success(value): _result.dsLoglevel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["ds.factory.enabled"] as AnyObject?) {
                
                case let .success(value): _result.dsFactoryEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["ds.delayed.keepInstances"] as AnyObject?) {
                
                case let .success(value): _result.dsDelayedKeepInstances = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["ds.lock.timeout.milliseconds"] as AnyObject?) {
                
                case let .success(value): _result.dsLockTimeoutMilliseconds = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["ds.stop.timeout.milliseconds"] as AnyObject?) {
                
                case let .success(value): _result.dsStopTimeoutMilliseconds = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["ds.global.extender"] as AnyObject?) {
                
                case let .success(value): _result.dsGlobalExtender = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixScrScrServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixSystemreadyImplComponentsCheckInfo]
        Decoders.addDecoder(clazz: [OrgApacheFelixSystemreadyImplComponentsCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixSystemreadyImplComponentsCheckInfo]> in
            return Decoders.decode(clazz: [OrgApacheFelixSystemreadyImplComponentsCheckInfo].self, source: source)
        }

        // Decoder for OrgApacheFelixSystemreadyImplComponentsCheckInfo
        Decoders.addDecoder(clazz: OrgApacheFelixSystemreadyImplComponentsCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixSystemreadyImplComponentsCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixSystemreadyImplComponentsCheckInfo() : instance as! OrgApacheFelixSystemreadyImplComponentsCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheFelixSystemreadyImplComponentsCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixSystemreadyImplComponentsCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixSystemreadyImplComponentsCheckProperties]
        Decoders.addDecoder(clazz: [OrgApacheFelixSystemreadyImplComponentsCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixSystemreadyImplComponentsCheckProperties]> in
            return Decoders.decode(clazz: [OrgApacheFelixSystemreadyImplComponentsCheckProperties].self, source: source)
        }

        // Decoder for OrgApacheFelixSystemreadyImplComponentsCheckProperties
        Decoders.addDecoder(clazz: OrgApacheFelixSystemreadyImplComponentsCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixSystemreadyImplComponentsCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixSystemreadyImplComponentsCheckProperties() : instance as! OrgApacheFelixSystemreadyImplComponentsCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["components.list"] as AnyObject?) {
                
                case let .success(value): _result.componentsList = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): _result.type = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixSystemreadyImplComponentsCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo]
        Decoders.addDecoder(clazz: [OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo]> in
            return Decoders.decode(clazz: [OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo].self, source: source)
        }

        // Decoder for OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo
        Decoders.addDecoder(clazz: OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo() : instance as! OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties]
        Decoders.addDecoder(clazz: [OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties]> in
            return Decoders.decode(clazz: [OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties].self, source: source)
        }

        // Decoder for OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties
        Decoders.addDecoder(clazz: OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties() : instance as! OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["timeout"] as AnyObject?) {
                
                case let .success(value): _result.timeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["target.start.level"] as AnyObject?) {
                
                case let .success(value): _result.targetStartLevel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["target.start.level.prop.name"] as AnyObject?) {
                
                case let .success(value): _result.targetStartLevelPropName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): _result.type = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixSystemreadyImplServicesCheckInfo]
        Decoders.addDecoder(clazz: [OrgApacheFelixSystemreadyImplServicesCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixSystemreadyImplServicesCheckInfo]> in
            return Decoders.decode(clazz: [OrgApacheFelixSystemreadyImplServicesCheckInfo].self, source: source)
        }

        // Decoder for OrgApacheFelixSystemreadyImplServicesCheckInfo
        Decoders.addDecoder(clazz: OrgApacheFelixSystemreadyImplServicesCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixSystemreadyImplServicesCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixSystemreadyImplServicesCheckInfo() : instance as! OrgApacheFelixSystemreadyImplServicesCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheFelixSystemreadyImplServicesCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixSystemreadyImplServicesCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixSystemreadyImplServicesCheckProperties]
        Decoders.addDecoder(clazz: [OrgApacheFelixSystemreadyImplServicesCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixSystemreadyImplServicesCheckProperties]> in
            return Decoders.decode(clazz: [OrgApacheFelixSystemreadyImplServicesCheckProperties].self, source: source)
        }

        // Decoder for OrgApacheFelixSystemreadyImplServicesCheckProperties
        Decoders.addDecoder(clazz: OrgApacheFelixSystemreadyImplServicesCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixSystemreadyImplServicesCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixSystemreadyImplServicesCheckProperties() : instance as! OrgApacheFelixSystemreadyImplServicesCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["services.list"] as AnyObject?) {
                
                case let .success(value): _result.servicesList = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): _result.type = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixSystemreadyImplServicesCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo]
        Decoders.addDecoder(clazz: [OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo]> in
            return Decoders.decode(clazz: [OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo].self, source: source)
        }

        // Decoder for OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo
        Decoders.addDecoder(clazz: OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo() : instance as! OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties]
        Decoders.addDecoder(clazz: [OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties]> in
            return Decoders.decode(clazz: [OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties].self, source: source)
        }

        // Decoder for OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties
        Decoders.addDecoder(clazz: OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties() : instance as! OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["osgi.http.whiteboard.servlet.pattern"] as AnyObject?) {
                
                case let .success(value): _result.osgiHttpWhiteboardServletPattern = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["osgi.http.whiteboard.context.select"] as AnyObject?) {
                
                case let .success(value): _result.osgiHttpWhiteboardContextSelect = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo]
        Decoders.addDecoder(clazz: [OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo]> in
            return Decoders.decode(clazz: [OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo].self, source: source)
        }

        // Decoder for OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo
        Decoders.addDecoder(clazz: OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo() : instance as! OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties]
        Decoders.addDecoder(clazz: [OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties]> in
            return Decoders.decode(clazz: [OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties].self, source: source)
        }

        // Decoder for OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties
        Decoders.addDecoder(clazz: OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties() : instance as! OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["osgi.http.whiteboard.servlet.pattern"] as AnyObject?) {
                
                case let .success(value): _result.osgiHttpWhiteboardServletPattern = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["osgi.http.whiteboard.context.select"] as AnyObject?) {
                
                case let .success(value): _result.osgiHttpWhiteboardContextSelect = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixSystemreadySystemReadyMonitorInfo]
        Decoders.addDecoder(clazz: [OrgApacheFelixSystemreadySystemReadyMonitorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixSystemreadySystemReadyMonitorInfo]> in
            return Decoders.decode(clazz: [OrgApacheFelixSystemreadySystemReadyMonitorInfo].self, source: source)
        }

        // Decoder for OrgApacheFelixSystemreadySystemReadyMonitorInfo
        Decoders.addDecoder(clazz: OrgApacheFelixSystemreadySystemReadyMonitorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixSystemreadySystemReadyMonitorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixSystemreadySystemReadyMonitorInfo() : instance as! OrgApacheFelixSystemreadySystemReadyMonitorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheFelixSystemreadySystemReadyMonitorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixSystemreadySystemReadyMonitorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixSystemreadySystemReadyMonitorProperties]
        Decoders.addDecoder(clazz: [OrgApacheFelixSystemreadySystemReadyMonitorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixSystemreadySystemReadyMonitorProperties]> in
            return Decoders.decode(clazz: [OrgApacheFelixSystemreadySystemReadyMonitorProperties].self, source: source)
        }

        // Decoder for OrgApacheFelixSystemreadySystemReadyMonitorProperties
        Decoders.addDecoder(clazz: OrgApacheFelixSystemreadySystemReadyMonitorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixSystemreadySystemReadyMonitorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixSystemreadySystemReadyMonitorProperties() : instance as! OrgApacheFelixSystemreadySystemReadyMonitorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["poll.interval"] as AnyObject?) {
                
                case let .success(value): _result.pollInterval = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixSystemreadySystemReadyMonitorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo]
        Decoders.addDecoder(clazz: [OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo]> in
            return Decoders.decode(clazz: [OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo].self, source: source)
        }

        // Decoder for OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo
        Decoders.addDecoder(clazz: OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo() : instance as! OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties]
        Decoders.addDecoder(clazz: [OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties]> in
            return Decoders.decode(clazz: [OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties].self, source: source)
        }

        // Decoder for OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties
        Decoders.addDecoder(clazz: OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties() : instance as! OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["manager.root"] as AnyObject?) {
                
                case let .success(value): _result.managerRoot = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["http.service.filter"] as AnyObject?) {
                
                case let .success(value): _result.httpServiceFilter = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["default.render"] as AnyObject?) {
                
                case let .success(value): _result.defaultRender = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["realm"] as AnyObject?) {
                
                case let .success(value): _result.realm = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["username"] as AnyObject?) {
                
                case let .success(value): _result.username = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["password"] as AnyObject?) {
                
                case let .success(value): _result.password = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["category"] as AnyObject?) {
                
                case let .success(value): _result.category = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["locale"] as AnyObject?) {
                
                case let .success(value): _result.locale = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["loglevel"] as AnyObject?) {
                
                case let .success(value): _result.loglevel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["plugins"] as AnyObject?) {
                
                case let .success(value): _result.plugins = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo]
        Decoders.addDecoder(clazz: [OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo]> in
            return Decoders.decode(clazz: [OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo].self, source: source)
        }

        // Decoder for OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo
        Decoders.addDecoder(clazz: OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo() : instance as! OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties]
        Decoders.addDecoder(clazz: [OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties]> in
            return Decoders.decode(clazz: [OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties].self, source: source)
        }

        // Decoder for OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties
        Decoders.addDecoder(clazz: OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties() : instance as! OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["max.size"] as AnyObject?) {
                
                case let .success(value): _result.maxSize = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo]
        Decoders.addDecoder(clazz: [OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo]> in
            return Decoders.decode(clazz: [OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo].self, source: source)
        }

        // Decoder for OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo
        Decoders.addDecoder(clazz: OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo() : instance as! OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties]
        Decoders.addDecoder(clazz: [OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties]> in
            return Decoders.decode(clazz: [OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties].self, source: source)
        }

        // Decoder for OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties
        Decoders.addDecoder(clazz: OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties() : instance as! OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["felix.memoryusage.dump.threshold"] as AnyObject?) {
                
                case let .success(value): _result.felixMemoryusageDumpThreshold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["felix.memoryusage.dump.interval"] as AnyObject?) {
                
                case let .success(value): _result.felixMemoryusageDumpInterval = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["felix.memoryusage.dump.location"] as AnyObject?) {
                
                case let .success(value): _result.felixMemoryusageDumpLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheHttpProxyconfiguratorInfo]
        Decoders.addDecoder(clazz: [OrgApacheHttpProxyconfiguratorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheHttpProxyconfiguratorInfo]> in
            return Decoders.decode(clazz: [OrgApacheHttpProxyconfiguratorInfo].self, source: source)
        }

        // Decoder for OrgApacheHttpProxyconfiguratorInfo
        Decoders.addDecoder(clazz: OrgApacheHttpProxyconfiguratorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheHttpProxyconfiguratorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheHttpProxyconfiguratorInfo() : instance as! OrgApacheHttpProxyconfiguratorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheHttpProxyconfiguratorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheHttpProxyconfiguratorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheHttpProxyconfiguratorProperties]
        Decoders.addDecoder(clazz: [OrgApacheHttpProxyconfiguratorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheHttpProxyconfiguratorProperties]> in
            return Decoders.decode(clazz: [OrgApacheHttpProxyconfiguratorProperties].self, source: source)
        }

        // Decoder for OrgApacheHttpProxyconfiguratorProperties
        Decoders.addDecoder(clazz: OrgApacheHttpProxyconfiguratorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheHttpProxyconfiguratorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheHttpProxyconfiguratorProperties() : instance as! OrgApacheHttpProxyconfiguratorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["proxy.enabled"] as AnyObject?) {
                
                case let .success(value): _result.proxyEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["proxy.host"] as AnyObject?) {
                
                case let .success(value): _result.proxyHost = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["proxy.port"] as AnyObject?) {
                
                case let .success(value): _result.proxyPort = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["proxy.user"] as AnyObject?) {
                
                case let .success(value): _result.proxyUser = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["proxy.password"] as AnyObject?) {
                
                case let .success(value): _result.proxyPassword = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["proxy.exceptions"] as AnyObject?) {
                
                case let .success(value): _result.proxyExceptions = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheHttpProxyconfiguratorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo() : instance as! OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties() : instance as! OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["dir"] as AnyObject?) {
                
                case let .success(value): _result.dir = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo() : instance as! OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties() : instance as! OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"] as AnyObject?) {
                
                case let .success(value): _result.path = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo() : instance as! OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo() : instance as! OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties() : instance as! OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["persistentCacheIncludes"] as AnyObject?) {
                
                case let .success(value): _result.persistentCacheIncludes = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties() : instance as! OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["mongouri"] as AnyObject?) {
                
                case let .success(value): _result.mongouri = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["db"] as AnyObject?) {
                
                case let .success(value): _result.db = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["socketKeepAlive"] as AnyObject?) {
                
                case let .success(value): _result.socketKeepAlive = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache"] as AnyObject?) {
                
                case let .success(value): _result.cache = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["nodeCachePercentage"] as AnyObject?) {
                
                case let .success(value): _result.nodeCachePercentage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["prevDocCachePercentage"] as AnyObject?) {
                
                case let .success(value): _result.prevDocCachePercentage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["childrenCachePercentage"] as AnyObject?) {
                
                case let .success(value): _result.childrenCachePercentage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["diffCachePercentage"] as AnyObject?) {
                
                case let .success(value): _result.diffCachePercentage = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cacheSegmentCount"] as AnyObject?) {
                
                case let .success(value): _result.cacheSegmentCount = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cacheStackMoveDistance"] as AnyObject?) {
                
                case let .success(value): _result.cacheStackMoveDistance = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["blobCacheSize"] as AnyObject?) {
                
                case let .success(value): _result.blobCacheSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["persistentCache"] as AnyObject?) {
                
                case let .success(value): _result.persistentCache = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["journalCache"] as AnyObject?) {
                
                case let .success(value): _result.journalCache = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["customBlobStore"] as AnyObject?) {
                
                case let .success(value): _result.customBlobStore = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["journalGCInterval"] as AnyObject?) {
                
                case let .success(value): _result.journalGCInterval = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["journalGCMaxAge"] as AnyObject?) {
                
                case let .success(value): _result.journalGCMaxAge = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["prefetchExternalChanges"] as AnyObject?) {
                
                case let .success(value): _result.prefetchExternalChanges = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["role"] as AnyObject?) {
                
                case let .success(value): _result.role = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["versionGcMaxAgeInSecs"] as AnyObject?) {
                
                case let .success(value): _result.versionGcMaxAgeInSecs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["versionGCExpression"] as AnyObject?) {
                
                case let .success(value): _result.versionGCExpression = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["versionGCTimeLimitInSecs"] as AnyObject?) {
                
                case let .success(value): _result.versionGCTimeLimitInSecs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["blobGcMaxAgeInSecs"] as AnyObject?) {
                
                case let .success(value): _result.blobGcMaxAgeInSecs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["blobTrackSnapshotIntervalInSecs"] as AnyObject?) {
                
                case let .success(value): _result.blobTrackSnapshotIntervalInSecs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["repository.home"] as AnyObject?) {
                
                case let .success(value): _result.repositoryHome = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxReplicationLagInSecs"] as AnyObject?) {
                
                case let .success(value): _result.maxReplicationLagInSecs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["documentStoreType"] as AnyObject?) {
                
                case let .success(value): _result.documentStoreType = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["bundlingDisabled"] as AnyObject?) {
                
                case let .success(value): _result.bundlingDisabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["updateLimit"] as AnyObject?) {
                
                case let .success(value): _result.updateLimit = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["persistentCacheIncludes"] as AnyObject?) {
                
                case let .success(value): _result.persistentCacheIncludes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["leaseCheckMode"] as AnyObject?) {
                
                case let .success(value): _result.leaseCheckMode = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo() : instance as! OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties() : instance as! OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["includedPaths"] as AnyObject?) {
                
                case let .success(value): _result.includedPaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableAsyncObserver"] as AnyObject?) {
                
                case let .success(value): _result.enableAsyncObserver = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["observerQueueSize"] as AnyObject?) {
                
                case let .success(value): _result.observerQueueSize = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo() : instance as! OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties() : instance as! OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["asyncConfigs"] as AnyObject?) {
                
                case let .success(value): _result.asyncConfigs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["leaseTimeOutMinutes"] as AnyObject?) {
                
                case let .success(value): _result.leaseTimeOutMinutes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["failingIndexTimeoutSeconds"] as AnyObject?) {
                
                case let .success(value): _result.failingIndexTimeoutSeconds = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["errorWarnIntervalSeconds"] as AnyObject?) {
                
                case let .success(value): _result.errorWarnIntervalSeconds = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo() : instance as! OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"] as AnyObject?) {
                
                case let .success(value): _result.additionalProperties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties() : instance as! OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["disabled"] as AnyObject?) {
                
                case let .success(value): _result.disabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["debug"] as AnyObject?) {
                
                case let .success(value): _result.debug = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["localIndexDir"] as AnyObject?) {
                
                case let .success(value): _result.localIndexDir = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableOpenIndexAsync"] as AnyObject?) {
                
                case let .success(value): _result.enableOpenIndexAsync = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["threadPoolSize"] as AnyObject?) {
                
                case let .success(value): _result.threadPoolSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["prefetchIndexFiles"] as AnyObject?) {
                
                case let .success(value): _result.prefetchIndexFiles = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["extractedTextCacheSizeInMB"] as AnyObject?) {
                
                case let .success(value): _result.extractedTextCacheSizeInMB = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["extractedTextCacheExpiryInSecs"] as AnyObject?) {
                
                case let .success(value): _result.extractedTextCacheExpiryInSecs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["alwaysUsePreExtractedCache"] as AnyObject?) {
                
                case let .success(value): _result.alwaysUsePreExtractedCache = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["booleanClauseLimit"] as AnyObject?) {
                
                case let .success(value): _result.booleanClauseLimit = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableHybridIndexing"] as AnyObject?) {
                
                case let .success(value): _result.enableHybridIndexing = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["hybridQueueSize"] as AnyObject?) {
                
                case let .success(value): _result.hybridQueueSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["disableStoredIndexDefinition"] as AnyObject?) {
                
                case let .success(value): _result.disableStoredIndexDefinition = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["deletedBlobsCollectionEnabled"] as AnyObject?) {
                
                case let .success(value): _result.deletedBlobsCollectionEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["propIndexCleanerIntervalInSecs"] as AnyObject?) {
                
                case let .success(value): _result.propIndexCleanerIntervalInSecs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableSingleBlobIndexFiles"] as AnyObject?) {
                
                case let .success(value): _result.enableSingleBlobIndexFiles = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo() : instance as! OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties() : instance as! OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["solr.home.path"] as AnyObject?) {
                
                case let .success(value): _result.solrHomePath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["solr.core.name"] as AnyObject?) {
                
                case let .success(value): _result.solrCoreName = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo() : instance as! OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties() : instance as! OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo() : instance as! OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties() : instance as! OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path.desc.field"] as AnyObject?) {
                
                case let .success(value): _result.pathDescField = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path.child.field"] as AnyObject?) {
                
                case let .success(value): _result.pathChildField = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path.parent.field"] as AnyObject?) {
                
                case let .success(value): _result.pathParentField = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path.exact.field"] as AnyObject?) {
                
                case let .success(value): _result.pathExactField = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["catch.all.field"] as AnyObject?) {
                
                case let .success(value): _result.catchAllField = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["collapsed.path.field"] as AnyObject?) {
                
                case let .success(value): _result.collapsedPathField = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path.depth.field"] as AnyObject?) {
                
                case let .success(value): _result.pathDepthField = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["commit.policy"] as AnyObject?) {
                
                case let .success(value): _result.commitPolicy = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["rows"] as AnyObject?) {
                
                case let .success(value): _result.rows = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["path.restrictions"] as AnyObject?) {
                
                case let .success(value): _result.pathRestrictions = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["property.restrictions"] as AnyObject?) {
                
                case let .success(value): _result.propertyRestrictions = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["primarytypes.restrictions"] as AnyObject?) {
                
                case let .success(value): _result.primarytypesRestrictions = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["ignored.properties"] as AnyObject?) {
                
                case let .success(value): _result.ignoredProperties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["used.properties"] as AnyObject?) {
                
                case let .success(value): _result.usedProperties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["type.mappings"] as AnyObject?) {
                
                case let .success(value): _result.typeMappings = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["property.mappings"] as AnyObject?) {
                
                case let .success(value): _result.propertyMappings = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["collapse.jcrcontent.nodes"] as AnyObject?) {
                
                case let .success(value): _result.collapseJcrcontentNodes = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo() : instance as! OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties() : instance as! OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["solr.http.url"] as AnyObject?) {
                
                case let .success(value): _result.solrHttpUrl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["solr.zk.host"] as AnyObject?) {
                
                case let .success(value): _result.solrZkHost = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["solr.collection"] as AnyObject?) {
                
                case let .success(value): _result.solrCollection = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["solr.socket.timeout"] as AnyObject?) {
                
                case let .success(value): _result.solrSocketTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["solr.connection.timeout"] as AnyObject?) {
                
                case let .success(value): _result.solrConnectionTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["solr.shards.no"] as AnyObject?) {
                
                case let .success(value): _result.solrShardsNo = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["solr.replication.factor"] as AnyObject?) {
                
                case let .success(value): _result.solrReplicationFactor = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["solr.conf.dir"] as AnyObject?) {
                
                case let .success(value): _result.solrConfDir = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo() : instance as! OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties() : instance as! OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["query.aggregation"] as AnyObject?) {
                
                case let .success(value): _result.queryAggregation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo() : instance as! OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties() : instance as! OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["server.type"] as AnyObject?) {
                
                case let .success(value): _result.serverType = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo() : instance as! OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties() : instance as! OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["providerType"] as AnyObject?) {
                
                case let .success(value): _result.providerType = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo() : instance as! OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties() : instance as! OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxItems"] as AnyObject?) {
                
                case let .success(value): _result.maxItems = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxPathDepth"] as AnyObject?) {
                
                case let .success(value): _result.maxPathDepth = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo() : instance as! OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties() : instance as! OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queryLimitInMemory"] as AnyObject?) {
                
                case let .success(value): _result.queryLimitInMemory = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queryLimitReads"] as AnyObject?) {
                
                case let .success(value): _result.queryLimitReads = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["queryFailTraversal"] as AnyObject?) {
                
                case let .success(value): _result.queryFailTraversal = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["fastQuerySize"] as AnyObject?) {
                
                case let .success(value): _result.fastQuerySize = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo() : instance as! OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties() : instance as! OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.jackrabbit.oak.authentication.appName"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheJackrabbitOakAuthenticationAppName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.jackrabbit.oak.authentication.configSpiName"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheJackrabbitOakAuthenticationConfigSpiName = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo() : instance as! OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties() : instance as! OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["provider.name"] as AnyObject?) {
                
                case let .success(value): _result.providerName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["host.name"] as AnyObject?) {
                
                case let .success(value): _result.hostName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["host.port"] as AnyObject?) {
                
                case let .success(value): _result.hostPort = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["host.ssl"] as AnyObject?) {
                
                case let .success(value): _result.hostSsl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["host.tls"] as AnyObject?) {
                
                case let .success(value): _result.hostTls = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["host.noCertCheck"] as AnyObject?) {
                
                case let .success(value): _result.hostNoCertCheck = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["bind.dn"] as AnyObject?) {
                
                case let .success(value): _result.bindDn = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["bind.password"] as AnyObject?) {
                
                case let .success(value): _result.bindPassword = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["searchTimeout"] as AnyObject?) {
                
                case let .success(value): _result.searchTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["adminPool.maxActive"] as AnyObject?) {
                
                case let .success(value): _result.adminPoolMaxActive = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["adminPool.lookupOnValidate"] as AnyObject?) {
                
                case let .success(value): _result.adminPoolLookupOnValidate = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["userPool.maxActive"] as AnyObject?) {
                
                case let .success(value): _result.userPoolMaxActive = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["userPool.lookupOnValidate"] as AnyObject?) {
                
                case let .success(value): _result.userPoolLookupOnValidate = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["user.baseDN"] as AnyObject?) {
                
                case let .success(value): _result.userBaseDN = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["user.objectclass"] as AnyObject?) {
                
                case let .success(value): _result.userObjectclass = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["user.idAttribute"] as AnyObject?) {
                
                case let .success(value): _result.userIdAttribute = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["user.extraFilter"] as AnyObject?) {
                
                case let .success(value): _result.userExtraFilter = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["user.makeDnPath"] as AnyObject?) {
                
                case let .success(value): _result.userMakeDnPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["group.baseDN"] as AnyObject?) {
                
                case let .success(value): _result.groupBaseDN = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["group.objectclass"] as AnyObject?) {
                
                case let .success(value): _result.groupObjectclass = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["group.nameAttribute"] as AnyObject?) {
                
                case let .success(value): _result.groupNameAttribute = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["group.extraFilter"] as AnyObject?) {
                
                case let .success(value): _result.groupExtraFilter = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["group.makeDnPath"] as AnyObject?) {
                
                case let .success(value): _result.groupMakeDnPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["group.memberAttribute"] as AnyObject?) {
                
                case let .success(value): _result.groupMemberAttribute = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["useUidForExtId"] as AnyObject?) {
                
                case let .success(value): _result.useUidForExtId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["customattributes"] as AnyObject?) {
                
                case let .success(value): _result.customattributes = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo() : instance as! OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties() : instance as! OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tokenExpiration"] as AnyObject?) {
                
                case let .success(value): _result.tokenExpiration = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tokenLength"] as AnyObject?) {
                
                case let .success(value): _result.tokenLength = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["tokenRefresh"] as AnyObject?) {
                
                case let .success(value): _result.tokenRefresh = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["tokenCleanupThreshold"] as AnyObject?) {
                
                case let .success(value): _result.tokenCleanupThreshold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["passwordHashAlgorithm"] as AnyObject?) {
                
                case let .success(value): _result.passwordHashAlgorithm = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["passwordHashIterations"] as AnyObject?) {
                
                case let .success(value): _result.passwordHashIterations = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["passwordSaltSize"] as AnyObject?) {
                
                case let .success(value): _result.passwordSaltSize = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo() : instance as! OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties() : instance as! OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["permissionsJr2"] as AnyObject?) {
                
                case let .success(value): _result.permissionsJr2 = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["importBehavior"] as AnyObject?) {
                
                case let .success(value): _result.importBehavior = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["readPaths"] as AnyObject?) {
                
                case let .success(value): _result.readPaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["administrativePrincipals"] as AnyObject?) {
                
                case let .success(value): _result.administrativePrincipals = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["configurationRanking"] as AnyObject?) {
                
                case let .success(value): _result.configurationRanking = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo() : instance as! OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties() : instance as! OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["requiredServicePids"] as AnyObject?) {
                
                case let .success(value): _result.requiredServicePids = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["authorizationCompositionType"] as AnyObject?) {
                
                case let .success(value): _result.authorizationCompositionType = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo() : instance as! OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties() : instance as! OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["length"] as AnyObject?) {
                
                case let .success(value): _result.length = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo() : instance as! OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties() : instance as! OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["usersPath"] as AnyObject?) {
                
                case let .success(value): _result.usersPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["groupsPath"] as AnyObject?) {
                
                case let .success(value): _result.groupsPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["systemRelativePath"] as AnyObject?) {
                
                case let .success(value): _result.systemRelativePath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["defaultDepth"] as AnyObject?) {
                
                case let .success(value): _result.defaultDepth = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["importBehavior"] as AnyObject?) {
                
                case let .success(value): _result.importBehavior = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["passwordHashAlgorithm"] as AnyObject?) {
                
                case let .success(value): _result.passwordHashAlgorithm = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["passwordHashIterations"] as AnyObject?) {
                
                case let .success(value): _result.passwordHashIterations = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["passwordSaltSize"] as AnyObject?) {
                
                case let .success(value): _result.passwordSaltSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["omitAdminPw"] as AnyObject?) {
                
                case let .success(value): _result.omitAdminPw = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["supportAutoSave"] as AnyObject?) {
                
                case let .success(value): _result.supportAutoSave = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["passwordMaxAge"] as AnyObject?) {
                
                case let .success(value): _result.passwordMaxAge = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["initialPasswordChange"] as AnyObject?) {
                
                case let .success(value): _result.initialPasswordChange = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["passwordHistorySize"] as AnyObject?) {
                
                case let .success(value): _result.passwordHistorySize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["passwordExpiryForAdmin"] as AnyObject?) {
                
                case let .success(value): _result.passwordExpiryForAdmin = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cacheExpiration"] as AnyObject?) {
                
                case let .success(value): _result.cacheExpiration = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableRFC7613UsercaseMappedProfile"] as AnyObject?) {
                
                case let .success(value): _result.enableRFC7613UsercaseMappedProfile = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo() : instance as! OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties() : instance as! OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["accountName"] as AnyObject?) {
                
                case let .success(value): _result.accountName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["containerName"] as AnyObject?) {
                
                case let .success(value): _result.containerName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["accessKey"] as AnyObject?) {
                
                case let .success(value): _result.accessKey = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["rootPath"] as AnyObject?) {
                
                case let .success(value): _result.rootPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["connectionURL"] as AnyObject?) {
                
                case let .success(value): _result.connectionURL = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo() : instance as! OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties() : instance as! OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["repository.home"] as AnyObject?) {
                
                case let .success(value): _result.repositoryHome = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tarmk.mode"] as AnyObject?) {
                
                case let .success(value): _result.tarmkMode = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["tarmk.size"] as AnyObject?) {
                
                case let .success(value): _result.tarmkSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["segmentCache.size"] as AnyObject?) {
                
                case let .success(value): _result.segmentCacheSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["stringCache.size"] as AnyObject?) {
                
                case let .success(value): _result.stringCacheSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["templateCache.size"] as AnyObject?) {
                
                case let .success(value): _result.templateCacheSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["stringDeduplicationCache.size"] as AnyObject?) {
                
                case let .success(value): _result.stringDeduplicationCacheSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["templateDeduplicationCache.size"] as AnyObject?) {
                
                case let .success(value): _result.templateDeduplicationCacheSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["nodeDeduplicationCache.size"] as AnyObject?) {
                
                case let .success(value): _result.nodeDeduplicationCacheSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["pauseCompaction"] as AnyObject?) {
                
                case let .success(value): _result.pauseCompaction = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["compaction.retryCount"] as AnyObject?) {
                
                case let .success(value): _result.compactionRetryCount = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["compaction.force.timeout"] as AnyObject?) {
                
                case let .success(value): _result.compactionForceTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["compaction.sizeDeltaEstimation"] as AnyObject?) {
                
                case let .success(value): _result.compactionSizeDeltaEstimation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["compaction.disableEstimation"] as AnyObject?) {
                
                case let .success(value): _result.compactionDisableEstimation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["compaction.retainedGenerations"] as AnyObject?) {
                
                case let .success(value): _result.compactionRetainedGenerations = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["compaction.memoryThreshold"] as AnyObject?) {
                
                case let .success(value): _result.compactionMemoryThreshold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["compaction.progressLog"] as AnyObject?) {
                
                case let .success(value): _result.compactionProgressLog = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["standby"] as AnyObject?) {
                
                case let .success(value): _result.standby = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["customBlobStore"] as AnyObject?) {
                
                case let .success(value): _result.customBlobStore = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["customSegmentStore"] as AnyObject?) {
                
                case let .success(value): _result.customSegmentStore = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["splitPersistence"] as AnyObject?) {
                
                case let .success(value): _result.splitPersistence = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["repository.backup.dir"] as AnyObject?) {
                
                case let .success(value): _result.repositoryBackupDir = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["blobGcMaxAgeInSecs"] as AnyObject?) {
                
                case let .success(value): _result.blobGcMaxAgeInSecs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["blobTrackSnapshotIntervalInSecs"] as AnyObject?) {
                
                case let .success(value): _result.blobTrackSnapshotIntervalInSecs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["role"] as AnyObject?) {
                
                case let .success(value): _result.role = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["registerDescriptors"] as AnyObject?) {
                
                case let .success(value): _result.registerDescriptors = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["dispatchChanges"] as AnyObject?) {
                
                case let .success(value): _result.dispatchChanges = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo() : instance as! OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties() : instance as! OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["commitsTrackerWriterGroups"] as AnyObject?) {
                
                case let .success(value): _result.commitsTrackerWriterGroups = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo() : instance as! OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"] as AnyObject?) {
                
                case let .success(value): _result.additionalProperties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties() : instance as! OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["repository.home"] as AnyObject?) {
                
                case let .success(value): _result.repositoryHome = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tarmk.mode"] as AnyObject?) {
                
                case let .success(value): _result.tarmkMode = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["tarmk.size"] as AnyObject?) {
                
                case let .success(value): _result.tarmkSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["segmentCache.size"] as AnyObject?) {
                
                case let .success(value): _result.segmentCacheSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["stringCache.size"] as AnyObject?) {
                
                case let .success(value): _result.stringCacheSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["templateCache.size"] as AnyObject?) {
                
                case let .success(value): _result.templateCacheSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["stringDeduplicationCache.size"] as AnyObject?) {
                
                case let .success(value): _result.stringDeduplicationCacheSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["templateDeduplicationCache.size"] as AnyObject?) {
                
                case let .success(value): _result.templateDeduplicationCacheSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["nodeDeduplicationCache.size"] as AnyObject?) {
                
                case let .success(value): _result.nodeDeduplicationCacheSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["pauseCompaction"] as AnyObject?) {
                
                case let .success(value): _result.pauseCompaction = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["compaction.retryCount"] as AnyObject?) {
                
                case let .success(value): _result.compactionRetryCount = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["compaction.force.timeout"] as AnyObject?) {
                
                case let .success(value): _result.compactionForceTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["compaction.sizeDeltaEstimation"] as AnyObject?) {
                
                case let .success(value): _result.compactionSizeDeltaEstimation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["compaction.disableEstimation"] as AnyObject?) {
                
                case let .success(value): _result.compactionDisableEstimation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["compaction.retainedGenerations"] as AnyObject?) {
                
                case let .success(value): _result.compactionRetainedGenerations = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["compaction.memoryThreshold"] as AnyObject?) {
                
                case let .success(value): _result.compactionMemoryThreshold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["compaction.progressLog"] as AnyObject?) {
                
                case let .success(value): _result.compactionProgressLog = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["standby"] as AnyObject?) {
                
                case let .success(value): _result.standby = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["customBlobStore"] as AnyObject?) {
                
                case let .success(value): _result.customBlobStore = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["customSegmentStore"] as AnyObject?) {
                
                case let .success(value): _result.customSegmentStore = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["splitPersistence"] as AnyObject?) {
                
                case let .success(value): _result.splitPersistence = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["repository.backup.dir"] as AnyObject?) {
                
                case let .success(value): _result.repositoryBackupDir = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["blobGcMaxAgeInSecs"] as AnyObject?) {
                
                case let .success(value): _result.blobGcMaxAgeInSecs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["blobTrackSnapshotIntervalInSecs"] as AnyObject?) {
                
                case let .success(value): _result.blobTrackSnapshotIntervalInSecs = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo() : instance as! OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties() : instance as! OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.sling.installer.configuration.persist"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingInstallerConfigurationPersist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["mode"] as AnyObject?) {
                
                case let .success(value): _result.mode = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["port"] as AnyObject?) {
                
                case let .success(value): _result.port = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["primary.host"] as AnyObject?) {
                
                case let .success(value): _result.primaryHost = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["interval"] as AnyObject?) {
                
                case let .success(value): _result.interval = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["primary.allowed-client-ip-ranges"] as AnyObject?) {
                
                case let .success(value): _result.primaryAllowedClientIpRanges = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["secure"] as AnyObject?) {
                
                case let .success(value): _result.secure = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["standby.readtimeout"] as AnyObject?) {
                
                case let .success(value): _result.standbyReadtimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["standby.autoclean"] as AnyObject?) {
                
                case let .success(value): _result.standbyAutoclean = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo() : instance as! OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties() : instance as! OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["handler.name"] as AnyObject?) {
                
                case let .success(value): _result.handlerName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["user.expirationTime"] as AnyObject?) {
                
                case let .success(value): _result.userExpirationTime = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["user.autoMembership"] as AnyObject?) {
                
                case let .success(value): _result.userAutoMembership = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["user.propertyMapping"] as AnyObject?) {
                
                case let .success(value): _result.userPropertyMapping = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["user.pathPrefix"] as AnyObject?) {
                
                case let .success(value): _result.userPathPrefix = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["user.membershipExpTime"] as AnyObject?) {
                
                case let .success(value): _result.userMembershipExpTime = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["user.membershipNestingDepth"] as AnyObject?) {
                
                case let .success(value): _result.userMembershipNestingDepth = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["user.dynamicMembership"] as AnyObject?) {
                
                case let .success(value): _result.userDynamicMembership = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["user.disableMissing"] as AnyObject?) {
                
                case let .success(value): _result.userDisableMissing = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["group.expirationTime"] as AnyObject?) {
                
                case let .success(value): _result.groupExpirationTime = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["group.autoMembership"] as AnyObject?) {
                
                case let .success(value): _result.groupAutoMembership = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["group.propertyMapping"] as AnyObject?) {
                
                case let .success(value): _result.groupPropertyMapping = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["group.pathPrefix"] as AnyObject?) {
                
                case let .success(value): _result.groupPathPrefix = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableRFC7613UsercaseMappedProfile"] as AnyObject?) {
                
                case let .success(value): _result.enableRFC7613UsercaseMappedProfile = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo() : instance as! OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties() : instance as! OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["jaas.ranking"] as AnyObject?) {
                
                case let .success(value): _result.jaasRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jaas.controlFlag"] as AnyObject?) {
                
                case let .success(value): _result.jaasControlFlag = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jaas.realmName"] as AnyObject?) {
                
                case let .success(value): _result.jaasRealmName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["idp.name"] as AnyObject?) {
                
                case let .success(value): _result.idpName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sync.handlerName"] as AnyObject?) {
                
                case let .success(value): _result.syncHandlerName = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo() : instance as! OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties() : instance as! OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["protectExternalId"] as AnyObject?) {
                
                case let .success(value): _result.protectExternalId = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo() : instance as! OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties() : instance as! OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cugSupportedPaths"] as AnyObject?) {
                
                case let .success(value): _result.cugSupportedPaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cugEnabled"] as AnyObject?) {
                
                case let .success(value): _result.cugEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["configurationRanking"] as AnyObject?) {
                
                case let .success(value): _result.configurationRanking = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo() : instance as! OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties() : instance as! OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["principalNames"] as AnyObject?) {
                
                case let .success(value): _result.principalNames = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo() : instance as! OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties() : instance as! OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["enabledActions"] as AnyObject?) {
                
                case let .success(value): _result.enabledActions = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["userPrivilegeNames"] as AnyObject?) {
                
                case let .success(value): _result.userPrivilegeNames = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["groupPrivilegeNames"] as AnyObject?) {
                
                case let .success(value): _result.groupPrivilegeNames = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["constraint"] as AnyObject?) {
                
                case let .success(value): _result.constraint = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo() : instance as! OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties() : instance as! OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["packageRoots"] as AnyObject?) {
                
                case let .success(value): _result.packageRoots = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo
        Decoders.addDecoder(clazz: OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo() : instance as! OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryProperties]
        Decoders.addDecoder(clazz: [OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryProperties]> in
            return Decoders.decode(clazz: [OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryProperties].self, source: source)
        }

        // Decoder for OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryProperties
        Decoders.addDecoder(clazz: OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryProperties() : instance as! OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["homePath"] as AnyObject?) {
                
                case let .success(value): _result.homePath = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingAuthCoreImplLogoutServletInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingAuthCoreImplLogoutServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingAuthCoreImplLogoutServletInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingAuthCoreImplLogoutServletInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingAuthCoreImplLogoutServletInfo
        Decoders.addDecoder(clazz: OrgApacheSlingAuthCoreImplLogoutServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingAuthCoreImplLogoutServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingAuthCoreImplLogoutServletInfo() : instance as! OrgApacheSlingAuthCoreImplLogoutServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingAuthCoreImplLogoutServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingAuthCoreImplLogoutServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingAuthCoreImplLogoutServletProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingAuthCoreImplLogoutServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingAuthCoreImplLogoutServletProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingAuthCoreImplLogoutServletProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingAuthCoreImplLogoutServletProperties
        Decoders.addDecoder(clazz: OrgApacheSlingAuthCoreImplLogoutServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingAuthCoreImplLogoutServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingAuthCoreImplLogoutServletProperties() : instance as! OrgApacheSlingAuthCoreImplLogoutServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.servlet.methods"] as AnyObject?) {
                
                case let .success(value): _result.slingServletMethods = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.paths"] as AnyObject?) {
                
                case let .success(value): _result.slingServletPaths = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingAuthCoreImplLogoutServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo
        Decoders.addDecoder(clazz: OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo() : instance as! OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties
        Decoders.addDecoder(clazz: OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties() : instance as! OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCaconfigImplConfigurationResolverImplInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigImplConfigurationResolverImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCaconfigImplConfigurationResolverImplInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingCaconfigImplConfigurationResolverImplInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingCaconfigImplConfigurationResolverImplInfo
        Decoders.addDecoder(clazz: OrgApacheSlingCaconfigImplConfigurationResolverImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCaconfigImplConfigurationResolverImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCaconfigImplConfigurationResolverImplInfo() : instance as! OrgApacheSlingCaconfigImplConfigurationResolverImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingCaconfigImplConfigurationResolverImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCaconfigImplConfigurationResolverImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCaconfigImplConfigurationResolverImplProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigImplConfigurationResolverImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCaconfigImplConfigurationResolverImplProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingCaconfigImplConfigurationResolverImplProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingCaconfigImplConfigurationResolverImplProperties
        Decoders.addDecoder(clazz: OrgApacheSlingCaconfigImplConfigurationResolverImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCaconfigImplConfigurationResolverImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCaconfigImplConfigurationResolverImplProperties() : instance as! OrgApacheSlingCaconfigImplConfigurationResolverImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["configBucketNames"] as AnyObject?) {
                
                case let .success(value): _result.configBucketNames = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCaconfigImplConfigurationResolverImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo
        Decoders.addDecoder(clazz: OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo() : instance as! OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties
        Decoders.addDecoder(clazz: OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties() : instance as! OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["configPropertyInheritancePropertyNames"] as AnyObject?) {
                
                case let .success(value): _result.configPropertyInheritancePropertyNames = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo
        Decoders.addDecoder(clazz: OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo() : instance as! OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties
        Decoders.addDecoder(clazz: OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties() : instance as! OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo
        Decoders.addDecoder(clazz: OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo() : instance as! OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties
        Decoders.addDecoder(clazz: OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties() : instance as! OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["overrides"] as AnyObject?) {
                
                case let .success(value): _result.overrides = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo
        Decoders.addDecoder(clazz: OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo() : instance as! OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties
        Decoders.addDecoder(clazz: OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties() : instance as! OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo
        Decoders.addDecoder(clazz: OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo() : instance as! OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties
        Decoders.addDecoder(clazz: OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties() : instance as! OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["ignorePropertyNameRegex"] as AnyObject?) {
                
                case let .success(value): _result.ignorePropertyNameRegex = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["configCollectionPropertiesResourceNames"] as AnyObject?) {
                
                case let .success(value): _result.configCollectionPropertiesResourceNames = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo
        Decoders.addDecoder(clazz: OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo() : instance as! OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties
        Decoders.addDecoder(clazz: OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties() : instance as! OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["configPath"] as AnyObject?) {
                
                case let .success(value): _result.configPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fallbackPaths"] as AnyObject?) {
                
                case let .success(value): _result.fallbackPaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["configCollectionInheritancePropertyNames"] as AnyObject?) {
                
                case let .success(value): _result.configCollectionInheritancePropertyNames = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo
        Decoders.addDecoder(clazz: OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo() : instance as! OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties
        Decoders.addDecoder(clazz: OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties() : instance as! OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["configRefResourceNames"] as AnyObject?) {
                
                case let .success(value): _result.configRefResourceNames = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["configRefPropertyNames"] as AnyObject?) {
                
                case let .success(value): _result.configRefPropertyNames = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo
        Decoders.addDecoder(clazz: OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo() : instance as! OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties
        Decoders.addDecoder(clazz: OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties() : instance as! OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["parser.features"] as AnyObject?) {
                
                case let .success(value): _result.parserFeatures = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo
        Decoders.addDecoder(clazz: OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo() : instance as! OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties
        Decoders.addDecoder(clazz: OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties() : instance as! OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["org.apache.sling.commons.log.level"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingCommonsLogLevel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.commons.log.file"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingCommonsLogFile = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.commons.log.pattern"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingCommonsLogPattern = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.sling.commons.log.names"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingCommonsLogNames = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.sling.commons.log.additiv"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingCommonsLogAdditiv = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo
        Decoders.addDecoder(clazz: OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo() : instance as! OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties
        Decoders.addDecoder(clazz: OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties() : instance as! OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.commons.log.file"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingCommonsLogFile = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.sling.commons.log.file.number"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingCommonsLogFileNumber = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.commons.log.file.size"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingCommonsLogFileSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.sling.commons.log.file.buffered"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingCommonsLogFileBuffered = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCommonsLogLogManagerInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingCommonsLogLogManagerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCommonsLogLogManagerInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingCommonsLogLogManagerInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingCommonsLogLogManagerInfo
        Decoders.addDecoder(clazz: OrgApacheSlingCommonsLogLogManagerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCommonsLogLogManagerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCommonsLogLogManagerInfo() : instance as! OrgApacheSlingCommonsLogLogManagerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingCommonsLogLogManagerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCommonsLogLogManagerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCommonsLogLogManagerProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingCommonsLogLogManagerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCommonsLogLogManagerProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingCommonsLogLogManagerProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingCommonsLogLogManagerProperties
        Decoders.addDecoder(clazz: OrgApacheSlingCommonsLogLogManagerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCommonsLogLogManagerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCommonsLogLogManagerProperties() : instance as! OrgApacheSlingCommonsLogLogManagerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["org.apache.sling.commons.log.level"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingCommonsLogLevel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.commons.log.file"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingCommonsLogFile = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.sling.commons.log.file.number"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingCommonsLogFileNumber = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.commons.log.file.size"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingCommonsLogFileSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.commons.log.pattern"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingCommonsLogPattern = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.commons.log.configurationFile"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingCommonsLogConfigurationFile = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.sling.commons.log.packagingDataEnabled"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingCommonsLogPackagingDataEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.sling.commons.log.maxCallerDataDepth"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingCommonsLogMaxCallerDataDepth = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.sling.commons.log.maxOldFileCountInDump"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingCommonsLogMaxOldFileCountInDump = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.sling.commons.log.numOfLines"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingCommonsLogNumOfLines = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCommonsLogLogManagerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCommonsMetricsInternalLogReporterInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingCommonsMetricsInternalLogReporterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCommonsMetricsInternalLogReporterInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingCommonsMetricsInternalLogReporterInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingCommonsMetricsInternalLogReporterInfo
        Decoders.addDecoder(clazz: OrgApacheSlingCommonsMetricsInternalLogReporterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCommonsMetricsInternalLogReporterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCommonsMetricsInternalLogReporterInfo() : instance as! OrgApacheSlingCommonsMetricsInternalLogReporterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingCommonsMetricsInternalLogReporterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCommonsMetricsInternalLogReporterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCommonsMetricsInternalLogReporterProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingCommonsMetricsInternalLogReporterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCommonsMetricsInternalLogReporterProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingCommonsMetricsInternalLogReporterProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingCommonsMetricsInternalLogReporterProperties
        Decoders.addDecoder(clazz: OrgApacheSlingCommonsMetricsInternalLogReporterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCommonsMetricsInternalLogReporterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCommonsMetricsInternalLogReporterProperties() : instance as! OrgApacheSlingCommonsMetricsInternalLogReporterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["period"] as AnyObject?) {
                
                case let .success(value): _result.period = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["timeUnit"] as AnyObject?) {
                
                case let .success(value): _result.timeUnit = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["level"] as AnyObject?) {
                
                case let .success(value): _result.level = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["loggerName"] as AnyObject?) {
                
                case let .success(value): _result.loggerName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["prefix"] as AnyObject?) {
                
                case let .success(value): _result._prefix = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pattern"] as AnyObject?) {
                
                case let .success(value): _result.pattern = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["registryName"] as AnyObject?) {
                
                case let .success(value): _result.registryName = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCommonsMetricsInternalLogReporterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo
        Decoders.addDecoder(clazz: OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo() : instance as! OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties
        Decoders.addDecoder(clazz: OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties() : instance as! OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["datasources"] as AnyObject?) {
                
                case let .success(value): _result.datasources = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["step"] as AnyObject?) {
                
                case let .success(value): _result.step = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["archives"] as AnyObject?) {
                
                case let .success(value): _result.archives = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"] as AnyObject?) {
                
                case let .success(value): _result.path = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo
        Decoders.addDecoder(clazz: OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo() : instance as! OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties
        Decoders.addDecoder(clazz: OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties() : instance as! OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["mime.types"] as AnyObject?) {
                
                case let .success(value): _result.mimeTypes = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo
        Decoders.addDecoder(clazz: OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo() : instance as! OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties
        Decoders.addDecoder(clazz: OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties() : instance as! OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["poolName"] as AnyObject?) {
                
                case let .success(value): _result.poolName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["allowedPoolNames"] as AnyObject?) {
                
                case let .success(value): _result.allowedPoolNames = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["scheduler.useleaderforsingle"] as AnyObject?) {
                
                case let .success(value): _result.schedulerUseleaderforsingle = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["metrics.filters"] as AnyObject?) {
                
                case let .success(value): _result.metricsFilters = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["slowThresholdMillis"] as AnyObject?) {
                
                case let .success(value): _result.slowThresholdMillis = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo
        Decoders.addDecoder(clazz: OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo() : instance as! OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties
        Decoders.addDecoder(clazz: OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties() : instance as! OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["max.quartzJob.duration.acceptable"] as AnyObject?) {
                
                case let .success(value): _result.maxQuartzJobDurationAcceptable = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo
        Decoders.addDecoder(clazz: OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo() : instance as! OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties
        Decoders.addDecoder(clazz: OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties() : instance as! OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["minPoolSize"] as AnyObject?) {
                
                case let .success(value): _result.minPoolSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxPoolSize"] as AnyObject?) {
                
                case let .success(value): _result.maxPoolSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queueSize"] as AnyObject?) {
                
                case let .success(value): _result.queueSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxThreadAge"] as AnyObject?) {
                
                case let .success(value): _result.maxThreadAge = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["keepAliveTime"] as AnyObject?) {
                
                case let .success(value): _result.keepAliveTime = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["blockPolicy"] as AnyObject?) {
                
                case let .success(value): _result.blockPolicy = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["shutdownGraceful"] as AnyObject?) {
                
                case let .success(value): _result.shutdownGraceful = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["daemon"] as AnyObject?) {
                
                case let .success(value): _result.daemon = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["shutdownWaitTime"] as AnyObject?) {
                
                case let .success(value): _result.shutdownWaitTime = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["priority"] as AnyObject?) {
                
                case let .success(value): _result.priority = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDatasourceDataSourceFactoryInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDatasourceDataSourceFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDatasourceDataSourceFactoryInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDatasourceDataSourceFactoryInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDatasourceDataSourceFactoryInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDatasourceDataSourceFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDatasourceDataSourceFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDatasourceDataSourceFactoryInfo() : instance as! OrgApacheSlingDatasourceDataSourceFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDatasourceDataSourceFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDatasourceDataSourceFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDatasourceDataSourceFactoryProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDatasourceDataSourceFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDatasourceDataSourceFactoryProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDatasourceDataSourceFactoryProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDatasourceDataSourceFactoryProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDatasourceDataSourceFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDatasourceDataSourceFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDatasourceDataSourceFactoryProperties() : instance as! OrgApacheSlingDatasourceDataSourceFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["datasource.name"] as AnyObject?) {
                
                case let .success(value): _result.datasourceName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["datasource.svc.prop.name"] as AnyObject?) {
                
                case let .success(value): _result.datasourceSvcPropName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["driverClassName"] as AnyObject?) {
                
                case let .success(value): _result.driverClassName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["url"] as AnyObject?) {
                
                case let .success(value): _result.url = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["username"] as AnyObject?) {
                
                case let .success(value): _result.username = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["password"] as AnyObject?) {
                
                case let .success(value): _result.password = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["defaultAutoCommit"] as AnyObject?) {
                
                case let .success(value): _result.defaultAutoCommit = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["defaultReadOnly"] as AnyObject?) {
                
                case let .success(value): _result.defaultReadOnly = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["defaultTransactionIsolation"] as AnyObject?) {
                
                case let .success(value): _result.defaultTransactionIsolation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["defaultCatalog"] as AnyObject?) {
                
                case let .success(value): _result.defaultCatalog = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxActive"] as AnyObject?) {
                
                case let .success(value): _result.maxActive = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxIdle"] as AnyObject?) {
                
                case let .success(value): _result.maxIdle = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["minIdle"] as AnyObject?) {
                
                case let .success(value): _result.minIdle = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["initialSize"] as AnyObject?) {
                
                case let .success(value): _result.initialSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxWait"] as AnyObject?) {
                
                case let .success(value): _result.maxWait = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxAge"] as AnyObject?) {
                
                case let .success(value): _result.maxAge = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["testOnBorrow"] as AnyObject?) {
                
                case let .success(value): _result.testOnBorrow = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["testOnReturn"] as AnyObject?) {
                
                case let .success(value): _result.testOnReturn = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["testWhileIdle"] as AnyObject?) {
                
                case let .success(value): _result.testWhileIdle = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["validationQuery"] as AnyObject?) {
                
                case let .success(value): _result.validationQuery = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["validationQueryTimeout"] as AnyObject?) {
                
                case let .success(value): _result.validationQueryTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["timeBetweenEvictionRunsMillis"] as AnyObject?) {
                
                case let .success(value): _result.timeBetweenEvictionRunsMillis = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["minEvictableIdleTimeMillis"] as AnyObject?) {
                
                case let .success(value): _result.minEvictableIdleTimeMillis = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["connectionProperties"] as AnyObject?) {
                
                case let .success(value): _result.connectionProperties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["initSQL"] as AnyObject?) {
                
                case let .success(value): _result.initSQL = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jdbcInterceptors"] as AnyObject?) {
                
                case let .success(value): _result.jdbcInterceptors = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["validationInterval"] as AnyObject?) {
                
                case let .success(value): _result.validationInterval = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["logValidationErrors"] as AnyObject?) {
                
                case let .success(value): _result.logValidationErrors = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["datasource.svc.properties"] as AnyObject?) {
                
                case let .success(value): _result.datasourceSvcProperties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDatasourceDataSourceFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo() : instance as! OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties() : instance as! OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["datasource.name"] as AnyObject?) {
                
                case let .success(value): _result.datasourceName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["datasource.svc.prop.name"] as AnyObject?) {
                
                case let .success(value): _result.datasourceSvcPropName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["datasource.jndi.name"] as AnyObject?) {
                
                case let .success(value): _result.datasourceJndiName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["jndi.properties"] as AnyObject?) {
                
                case let .success(value): _result.jndiProperties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDiscoveryOakConfigInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDiscoveryOakConfigInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDiscoveryOakConfigInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDiscoveryOakConfigInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDiscoveryOakConfigInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDiscoveryOakConfigInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDiscoveryOakConfigInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDiscoveryOakConfigInfo() : instance as! OrgApacheSlingDiscoveryOakConfigInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDiscoveryOakConfigProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDiscoveryOakConfigInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDiscoveryOakConfigProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDiscoveryOakConfigProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDiscoveryOakConfigProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDiscoveryOakConfigProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDiscoveryOakConfigProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDiscoveryOakConfigProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDiscoveryOakConfigProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDiscoveryOakConfigProperties() : instance as! OrgApacheSlingDiscoveryOakConfigProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["connectorPingTimeout"] as AnyObject?) {
                
                case let .success(value): _result.connectorPingTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["connectorPingInterval"] as AnyObject?) {
                
                case let .success(value): _result.connectorPingInterval = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["discoveryLiteCheckInterval"] as AnyObject?) {
                
                case let .success(value): _result.discoveryLiteCheckInterval = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["clusterSyncServiceTimeout"] as AnyObject?) {
                
                case let .success(value): _result.clusterSyncServiceTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["clusterSyncServiceInterval"] as AnyObject?) {
                
                case let .success(value): _result.clusterSyncServiceInterval = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableSyncToken"] as AnyObject?) {
                
                case let .success(value): _result.enableSyncToken = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["minEventDelay"] as AnyObject?) {
                
                case let .success(value): _result.minEventDelay = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["socketConnectTimeout"] as AnyObject?) {
                
                case let .success(value): _result.socketConnectTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["soTimeout"] as AnyObject?) {
                
                case let .success(value): _result.soTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["topologyConnectorUrls"] as AnyObject?) {
                
                case let .success(value): _result.topologyConnectorUrls = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["topologyConnectorWhitelist"] as AnyObject?) {
                
                case let .success(value): _result.topologyConnectorWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["autoStopLocalLoopEnabled"] as AnyObject?) {
                
                case let .success(value): _result.autoStopLocalLoopEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["gzipConnectorRequestsEnabled"] as AnyObject?) {
                
                case let .success(value): _result.gzipConnectorRequestsEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["hmacEnabled"] as AnyObject?) {
                
                case let .success(value): _result.hmacEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableEncryption"] as AnyObject?) {
                
                case let .success(value): _result.enableEncryption = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sharedKey"] as AnyObject?) {
                
                case let .success(value): _result.sharedKey = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["hmacSharedKeyTTL"] as AnyObject?) {
                
                case let .success(value): _result.hmacSharedKeyTTL = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["backoffStandbyFactor"] as AnyObject?) {
                
                case let .success(value): _result.backoffStandbyFactor = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["backoffStableFactor"] as AnyObject?) {
                
                case let .success(value): _result.backoffStableFactor = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDiscoveryOakConfigProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo() : instance as! OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties() : instance as! OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.name"] as AnyObject?) {
                
                case let .success(value): _result.hcName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.mbean.name"] as AnyObject?) {
                
                case let .success(value): _result.hcMbeanName = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo() : instance as! OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties() : instance as! OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["details"] as AnyObject?) {
                
                case let .success(value): _result.details = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceName"] as AnyObject?) {
                
                case let .success(value): _result.serviceName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["log.level"] as AnyObject?) {
                
                case let .success(value): _result.logLevel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["allowed.roots"] as AnyObject?) {
                
                case let .success(value): _result.allowedRoots = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["queue.processing.enabled"] as AnyObject?) {
                
                case let .success(value): _result.queueProcessingEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["packageImporter.endpoints"] as AnyObject?) {
                
                case let .success(value): _result.packageImporterEndpoints = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["passiveQueues"] as AnyObject?) {
                
                case let .success(value): _result.passiveQueues = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["priorityQueues"] as AnyObject?) {
                
                case let .success(value): _result.priorityQueues = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["retry.strategy"] as AnyObject?) {
                
                case let .success(value): _result.retryStrategy = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["retry.attempts"] as AnyObject?) {
                
                case let .success(value): _result.retryAttempts = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["requestAuthorizationStrategy.target"] as AnyObject?) {
                
                case let .success(value): _result.requestAuthorizationStrategyTarget = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["transportSecretProvider.target"] as AnyObject?) {
                
                case let .success(value): _result.transportSecretProviderTarget = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["packageBuilder.target"] as AnyObject?) {
                
                case let .success(value): _result.packageBuilderTarget = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["triggers.target"] as AnyObject?) {
                
                case let .success(value): _result.triggersTarget = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["queue.provider"] as AnyObject?) {
                
                case let .success(value): _result.queueProvider = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["async.delivery"] as AnyObject?) {
                
                case let .success(value): _result.asyncDelivery = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["http.conn.timeout"] as AnyObject?) {
                
                case let .success(value): _result.httpConnTimeout = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo() : instance as! OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties() : instance as! OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jcrPrivilege"] as AnyObject?) {
                
                case let .success(value): _result.jcrPrivilege = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo() : instance as! OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties() : instance as! OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["details"] as AnyObject?) {
                
                case let .success(value): _result.details = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceName"] as AnyObject?) {
                
                case let .success(value): _result.serviceName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["log.level"] as AnyObject?) {
                
                case let .success(value): _result.logLevel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["allowed.roots"] as AnyObject?) {
                
                case let .success(value): _result.allowedRoots = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["requestAuthorizationStrategy.target"] as AnyObject?) {
                
                case let .success(value): _result.requestAuthorizationStrategyTarget = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["queueProviderFactory.target"] as AnyObject?) {
                
                case let .success(value): _result.queueProviderFactoryTarget = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["packageBuilder.target"] as AnyObject?) {
                
                case let .success(value): _result.packageBuilderTarget = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["triggers.target"] as AnyObject?) {
                
                case let .success(value): _result.triggersTarget = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["priorityQueues"] as AnyObject?) {
                
                case let .success(value): _result.priorityQueues = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo() : instance as! OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties() : instance as! OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["details"] as AnyObject?) {
                
                case let .success(value): _result.details = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceName"] as AnyObject?) {
                
                case let .success(value): _result.serviceName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["log.level"] as AnyObject?) {
                
                case let .success(value): _result.logLevel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["queue.processing.enabled"] as AnyObject?) {
                
                case let .success(value): _result.queueProcessingEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["packageExporter.endpoints"] as AnyObject?) {
                
                case let .success(value): _result.packageExporterEndpoints = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["pull.items"] as AnyObject?) {
                
                case let .success(value): _result.pullItems = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["http.conn.timeout"] as AnyObject?) {
                
                case let .success(value): _result.httpConnTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["requestAuthorizationStrategy.target"] as AnyObject?) {
                
                case let .success(value): _result.requestAuthorizationStrategyTarget = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["transportSecretProvider.target"] as AnyObject?) {
                
                case let .success(value): _result.transportSecretProviderTarget = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["packageBuilder.target"] as AnyObject?) {
                
                case let .success(value): _result.packageBuilderTarget = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["triggers.target"] as AnyObject?) {
                
                case let .success(value): _result.triggersTarget = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo() : instance as! OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties() : instance as! OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["details"] as AnyObject?) {
                
                case let .success(value): _result.details = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceName"] as AnyObject?) {
                
                case let .success(value): _result.serviceName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["log.level"] as AnyObject?) {
                
                case let .success(value): _result.logLevel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["queue.processing.enabled"] as AnyObject?) {
                
                case let .success(value): _result.queueProcessingEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["packageExporter.target"] as AnyObject?) {
                
                case let .success(value): _result.packageExporterTarget = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["packageImporter.target"] as AnyObject?) {
                
                case let .success(value): _result.packageImporterTarget = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["requestAuthorizationStrategy.target"] as AnyObject?) {
                
                case let .success(value): _result.requestAuthorizationStrategyTarget = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["triggers.target"] as AnyObject?) {
                
                case let .success(value): _result.triggersTarget = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo() : instance as! OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties() : instance as! OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["details"] as AnyObject?) {
                
                case let .success(value): _result.details = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceName"] as AnyObject?) {
                
                case let .success(value): _result.serviceName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["log.level"] as AnyObject?) {
                
                case let .success(value): _result.logLevel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["queue.processing.enabled"] as AnyObject?) {
                
                case let .success(value): _result.queueProcessingEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["passiveQueues"] as AnyObject?) {
                
                case let .success(value): _result.passiveQueues = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["packageExporter.endpoints"] as AnyObject?) {
                
                case let .success(value): _result.packageExporterEndpoints = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["packageImporter.endpoints"] as AnyObject?) {
                
                case let .success(value): _result.packageImporterEndpoints = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["retry.strategy"] as AnyObject?) {
                
                case let .success(value): _result.retryStrategy = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["retry.attempts"] as AnyObject?) {
                
                case let .success(value): _result.retryAttempts = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["pull.items"] as AnyObject?) {
                
                case let .success(value): _result.pullItems = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["http.conn.timeout"] as AnyObject?) {
                
                case let .success(value): _result.httpConnTimeout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["requestAuthorizationStrategy.target"] as AnyObject?) {
                
                case let .success(value): _result.requestAuthorizationStrategyTarget = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["transportSecretProvider.target"] as AnyObject?) {
                
                case let .success(value): _result.transportSecretProviderTarget = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["packageBuilder.target"] as AnyObject?) {
                
                case let .success(value): _result.packageBuilderTarget = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["triggers.target"] as AnyObject?) {
                
                case let .success(value): _result.triggersTarget = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo() : instance as! OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties() : instance as! OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.name"] as AnyObject?) {
                
                case let .success(value): _result.hcName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.mbean.name"] as AnyObject?) {
                
                case let .success(value): _result.hcMbeanName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["numberOfRetriesAllowed"] as AnyObject?) {
                
                case let .success(value): _result.numberOfRetriesAllowed = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo() : instance as! OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties() : instance as! OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["queue"] as AnyObject?) {
                
                case let .success(value): _result.queue = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["drop.invalid.items"] as AnyObject?) {
                
                case let .success(value): _result.dropInvalidItems = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["agent.target"] as AnyObject?) {
                
                case let .success(value): _result.agentTarget = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo() : instance as! OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties() : instance as! OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["packageBuilder.target"] as AnyObject?) {
                
                case let .success(value): _result.packageBuilderTarget = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo() : instance as! OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties() : instance as! OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["endpoints"] as AnyObject?) {
                
                case let .success(value): _result.endpoints = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["pull.items"] as AnyObject?) {
                
                case let .success(value): _result.pullItems = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["packageBuilder.target"] as AnyObject?) {
                
                case let .success(value): _result.packageBuilderTarget = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["transportSecretProvider.target"] as AnyObject?) {
                
                case let .success(value): _result.transportSecretProviderTarget = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo() : instance as! OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties() : instance as! OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["packageBuilder.target"] as AnyObject?) {
                
                case let .success(value): _result.packageBuilderTarget = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo() : instance as! OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties() : instance as! OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["endpoints"] as AnyObject?) {
                
                case let .success(value): _result.endpoints = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["transportSecretProvider.target"] as AnyObject?) {
                
                case let .success(value): _result.transportSecretProviderTarget = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo() : instance as! OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties() : instance as! OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["service.name"] as AnyObject?) {
                
                case let .success(value): _result.serviceName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"] as AnyObject?) {
                
                case let .success(value): _result.path = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["privilege.name"] as AnyObject?) {
                
                case let .success(value): _result.privilegeName = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo() : instance as! OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties() : instance as! OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["provider.roots"] as AnyObject?) {
                
                case let .success(value): _result.providerRoots = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["kind"] as AnyObject?) {
                
                case let .success(value): _result.kind = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo() : instance as! OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties() : instance as! OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["provider.roots"] as AnyObject?) {
                
                case let .success(value): _result.providerRoots = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["kind"] as AnyObject?) {
                
                case let .success(value): _result.kind = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo() : instance as! OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties() : instance as! OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): _result.type = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["format.target"] as AnyObject?) {
                
                case let .success(value): _result.formatTarget = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tempFsFolder"] as AnyObject?) {
                
                case let .success(value): _result.tempFsFolder = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["fileThreshold"] as AnyObject?) {
                
                case let .success(value): _result.fileThreshold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["memoryUnit"] as AnyObject?) {
                
                case let .success(value): _result.memoryUnit = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["useOffHeapMemory"] as AnyObject?) {
                
                case let .success(value): _result.useOffHeapMemory = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["digestAlgorithm"] as AnyObject?) {
                
                case let .success(value): _result.digestAlgorithm = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["monitoringQueueSize"] as AnyObject?) {
                
                case let .success(value): _result.monitoringQueueSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cleanupDelay"] as AnyObject?) {
                
                case let .success(value): _result.cleanupDelay = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["package.filters"] as AnyObject?) {
                
                case let .success(value): _result.packageFilters = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["property.filters"] as AnyObject?) {
                
                case let .success(value): _result.propertyFilters = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo() : instance as! OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties() : instance as! OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): _result.type = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["importMode"] as AnyObject?) {
                
                case let .success(value): _result.importMode = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["aclHandling"] as AnyObject?) {
                
                case let .success(value): _result.aclHandling = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["package.roots"] as AnyObject?) {
                
                case let .success(value): _result.packageRoots = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["package.filters"] as AnyObject?) {
                
                case let .success(value): _result.packageFilters = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["property.filters"] as AnyObject?) {
                
                case let .success(value): _result.propertyFilters = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tempFsFolder"] as AnyObject?) {
                
                case let .success(value): _result.tempFsFolder = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["useBinaryReferences"] as AnyObject?) {
                
                case let .success(value): _result.useBinaryReferences = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["autoSaveThreshold"] as AnyObject?) {
                
                case let .success(value): _result.autoSaveThreshold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cleanupDelay"] as AnyObject?) {
                
                case let .success(value): _result.cleanupDelay = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["fileThreshold"] as AnyObject?) {
                
                case let .success(value): _result.fileThreshold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["MEGA_BYTES"] as AnyObject?) {
                
                case let .success(value): _result.MEGA_BYTES = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["useOffHeapMemory"] as AnyObject?) {
                
                case let .success(value): _result.useOffHeapMemory = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["digestAlgorithm"] as AnyObject?) {
                
                case let .success(value): _result.digestAlgorithm = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["monitoringQueueSize"] as AnyObject?) {
                
                case let .success(value): _result.monitoringQueueSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["pathsMapping"] as AnyObject?) {
                
                case let .success(value): _result.pathsMapping = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["strictImport"] as AnyObject?) {
                
                case let .success(value): _result.strictImport = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo() : instance as! OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties() : instance as! OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["username"] as AnyObject?) {
                
                case let .success(value): _result.username = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["password"] as AnyObject?) {
                
                case let .success(value): _result.password = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo() : instance as! OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties() : instance as! OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"] as AnyObject?) {
                
                case let .success(value): _result.path = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo() : instance as! OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties() : instance as! OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"] as AnyObject?) {
                
                case let .success(value): _result.path = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["ignoredPathsPatterns"] as AnyObject?) {
                
                case let .success(value): _result.ignoredPathsPatterns = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceName"] as AnyObject?) {
                
                case let .success(value): _result.serviceName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["deep"] as AnyObject?) {
                
                case let .success(value): _result.deep = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo() : instance as! OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties() : instance as! OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"] as AnyObject?) {
                
                case let .success(value): _result.path = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceName"] as AnyObject?) {
                
                case let .success(value): _result.serviceName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["nuggetsPath"] as AnyObject?) {
                
                case let .success(value): _result.nuggetsPath = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo() : instance as! OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties() : instance as! OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["endpoint"] as AnyObject?) {
                
                case let .success(value): _result.endpoint = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["transportSecretProvider.target"] as AnyObject?) {
                
                case let .success(value): _result.transportSecretProviderTarget = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo() : instance as! OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties() : instance as! OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"] as AnyObject?) {
                
                case let .success(value): _result.path = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo() : instance as! OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties
        Decoders.addDecoder(clazz: OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties() : instance as! OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"] as AnyObject?) {
                
                case let .success(value): _result.path = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["seconds"] as AnyObject?) {
                
                case let .success(value): _result.seconds = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceName"] as AnyObject?) {
                
                case let .success(value): _result.serviceName = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo
        Decoders.addDecoder(clazz: OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo() : instance as! OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties
        Decoders.addDecoder(clazz: OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties() : instance as! OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["osgi.http.whiteboard.context.select"] as AnyObject?) {
                
                case let .success(value): _result.osgiHttpWhiteboardContextSelect = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["osgi.http.whiteboard.listener"] as AnyObject?) {
                
                case let .success(value): _result.osgiHttpWhiteboardListener = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.sudo.cookie"] as AnyObject?) {
                
                case let .success(value): _result.authSudoCookie = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.sudo.parameter"] as AnyObject?) {
                
                case let .success(value): _result.authSudoParameter = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["auth.annonymous"] as AnyObject?) {
                
                case let .success(value): _result.authAnnonymous = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.auth.requirements"] as AnyObject?) {
                
                case let .success(value): _result.slingAuthRequirements = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.auth.anonymous.user"] as AnyObject?) {
                
                case let .success(value): _result.slingAuthAnonymousUser = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.auth.anonymous.password"] as AnyObject?) {
                
                case let .success(value): _result.slingAuthAnonymousPassword = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["auth.http"] as AnyObject?) {
                
                case let .success(value): _result.authHttp = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.http.realm"] as AnyObject?) {
                
                case let .success(value): _result.authHttpRealm = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["auth.uri.suffix"] as AnyObject?) {
                
                case let .success(value): _result.authUriSuffix = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo
        Decoders.addDecoder(clazz: OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo() : instance as! OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties
        Decoders.addDecoder(clazz: OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties() : instance as! OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["extensions"] as AnyObject?) {
                
                case let .success(value): _result.extensions = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["minDurationMs"] as AnyObject?) {
                
                case let .success(value): _result.minDurationMs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxDurationMs"] as AnyObject?) {
                
                case let .success(value): _result.maxDurationMs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["compactLogFormat"] as AnyObject?) {
                
                case let .success(value): _result.compactLogFormat = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingEngineImplLogRequestLoggerInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingEngineImplLogRequestLoggerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingEngineImplLogRequestLoggerInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingEngineImplLogRequestLoggerInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingEngineImplLogRequestLoggerInfo
        Decoders.addDecoder(clazz: OrgApacheSlingEngineImplLogRequestLoggerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingEngineImplLogRequestLoggerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingEngineImplLogRequestLoggerInfo() : instance as! OrgApacheSlingEngineImplLogRequestLoggerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingEngineImplLogRequestLoggerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingEngineImplLogRequestLoggerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingEngineImplLogRequestLoggerProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingEngineImplLogRequestLoggerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingEngineImplLogRequestLoggerProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingEngineImplLogRequestLoggerProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingEngineImplLogRequestLoggerProperties
        Decoders.addDecoder(clazz: OrgApacheSlingEngineImplLogRequestLoggerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingEngineImplLogRequestLoggerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingEngineImplLogRequestLoggerProperties() : instance as! OrgApacheSlingEngineImplLogRequestLoggerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["request.log.output"] as AnyObject?) {
                
                case let .success(value): _result.requestLogOutput = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["request.log.outputtype"] as AnyObject?) {
                
                case let .success(value): _result.requestLogOutputtype = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["request.log.enabled"] as AnyObject?) {
                
                case let .success(value): _result.requestLogEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["access.log.output"] as AnyObject?) {
                
                case let .success(value): _result.accessLogOutput = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["access.log.outputtype"] as AnyObject?) {
                
                case let .success(value): _result.accessLogOutputtype = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["access.log.enabled"] as AnyObject?) {
                
                case let .success(value): _result.accessLogEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingEngineImplLogRequestLoggerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingEngineImplLogRequestLoggerServiceInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingEngineImplLogRequestLoggerServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingEngineImplLogRequestLoggerServiceInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingEngineImplLogRequestLoggerServiceInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingEngineImplLogRequestLoggerServiceInfo
        Decoders.addDecoder(clazz: OrgApacheSlingEngineImplLogRequestLoggerServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingEngineImplLogRequestLoggerServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingEngineImplLogRequestLoggerServiceInfo() : instance as! OrgApacheSlingEngineImplLogRequestLoggerServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingEngineImplLogRequestLoggerServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingEngineImplLogRequestLoggerServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingEngineImplLogRequestLoggerServiceProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingEngineImplLogRequestLoggerServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingEngineImplLogRequestLoggerServiceProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingEngineImplLogRequestLoggerServiceProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingEngineImplLogRequestLoggerServiceProperties
        Decoders.addDecoder(clazz: OrgApacheSlingEngineImplLogRequestLoggerServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingEngineImplLogRequestLoggerServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingEngineImplLogRequestLoggerServiceProperties() : instance as! OrgApacheSlingEngineImplLogRequestLoggerServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["request.log.service.format"] as AnyObject?) {
                
                case let .success(value): _result.requestLogServiceFormat = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["request.log.service.output"] as AnyObject?) {
                
                case let .success(value): _result.requestLogServiceOutput = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["request.log.service.outputtype"] as AnyObject?) {
                
                case let .success(value): _result.requestLogServiceOutputtype = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["request.log.service.onentry"] as AnyObject?) {
                
                case let .success(value): _result.requestLogServiceOnentry = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingEngineImplLogRequestLoggerServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingEngineImplSlingMainServletInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingEngineImplSlingMainServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingEngineImplSlingMainServletInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingEngineImplSlingMainServletInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingEngineImplSlingMainServletInfo
        Decoders.addDecoder(clazz: OrgApacheSlingEngineImplSlingMainServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingEngineImplSlingMainServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingEngineImplSlingMainServletInfo() : instance as! OrgApacheSlingEngineImplSlingMainServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingEngineImplSlingMainServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingEngineImplSlingMainServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingEngineImplSlingMainServletProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingEngineImplSlingMainServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingEngineImplSlingMainServletProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingEngineImplSlingMainServletProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingEngineImplSlingMainServletProperties
        Decoders.addDecoder(clazz: OrgApacheSlingEngineImplSlingMainServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingEngineImplSlingMainServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingEngineImplSlingMainServletProperties() : instance as! OrgApacheSlingEngineImplSlingMainServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["sling.max.calls"] as AnyObject?) {
                
                case let .success(value): _result.slingMaxCalls = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["sling.max.inclusions"] as AnyObject?) {
                
                case let .success(value): _result.slingMaxInclusions = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["sling.trace.allow"] as AnyObject?) {
                
                case let .success(value): _result.slingTraceAllow = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["sling.max.record.requests"] as AnyObject?) {
                
                case let .success(value): _result.slingMaxRecordRequests = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.store.pattern.requests"] as AnyObject?) {
                
                case let .success(value): _result.slingStorePatternRequests = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.serverinfo"] as AnyObject?) {
                
                case let .success(value): _result.slingServerinfo = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.additional.response.headers"] as AnyObject?) {
                
                case let .success(value): _result.slingAdditionalResponseHeaders = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingEngineImplSlingMainServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingEngineParametersInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingEngineParametersInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingEngineParametersInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingEngineParametersInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingEngineParametersInfo
        Decoders.addDecoder(clazz: OrgApacheSlingEngineParametersInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingEngineParametersInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingEngineParametersInfo() : instance as! OrgApacheSlingEngineParametersInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingEngineParametersProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingEngineParametersInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingEngineParametersProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingEngineParametersProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingEngineParametersProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingEngineParametersProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingEngineParametersProperties
        Decoders.addDecoder(clazz: OrgApacheSlingEngineParametersProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingEngineParametersProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingEngineParametersProperties() : instance as! OrgApacheSlingEngineParametersProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.default.parameter.encoding"] as AnyObject?) {
                
                case let .success(value): _result.slingDefaultParameterEncoding = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["sling.default.max.parameters"] as AnyObject?) {
                
                case let .success(value): _result.slingDefaultMaxParameters = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["file.location"] as AnyObject?) {
                
                case let .success(value): _result.fileLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["file.threshold"] as AnyObject?) {
                
                case let .success(value): _result.fileThreshold = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["file.max"] as AnyObject?) {
                
                case let .success(value): _result.fileMax = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["request.max"] as AnyObject?) {
                
                case let .success(value): _result.requestMax = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["sling.default.parameter.checkForAdditionalContainerParameters"] as AnyObject?) {
                
                case let .success(value): _result.slingDefaultParameterCheckForAdditionalContainerParameters = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingEngineParametersProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingEventImplEventingThreadPoolInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingEventImplEventingThreadPoolInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingEventImplEventingThreadPoolInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingEventImplEventingThreadPoolInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingEventImplEventingThreadPoolInfo
        Decoders.addDecoder(clazz: OrgApacheSlingEventImplEventingThreadPoolInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingEventImplEventingThreadPoolInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingEventImplEventingThreadPoolInfo() : instance as! OrgApacheSlingEventImplEventingThreadPoolInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingEventImplEventingThreadPoolProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingEventImplEventingThreadPoolInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingEventImplEventingThreadPoolProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingEventImplEventingThreadPoolProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingEventImplEventingThreadPoolProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingEventImplEventingThreadPoolProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingEventImplEventingThreadPoolProperties
        Decoders.addDecoder(clazz: OrgApacheSlingEventImplEventingThreadPoolProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingEventImplEventingThreadPoolProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingEventImplEventingThreadPoolProperties() : instance as! OrgApacheSlingEventImplEventingThreadPoolProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["minPoolSize"] as AnyObject?) {
                
                case let .success(value): _result.minPoolSize = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingEventImplEventingThreadPoolProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingEventImplJobsDefaultJobManagerInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingEventImplJobsDefaultJobManagerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingEventImplJobsDefaultJobManagerInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingEventImplJobsDefaultJobManagerInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingEventImplJobsDefaultJobManagerInfo
        Decoders.addDecoder(clazz: OrgApacheSlingEventImplJobsDefaultJobManagerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingEventImplJobsDefaultJobManagerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingEventImplJobsDefaultJobManagerInfo() : instance as! OrgApacheSlingEventImplJobsDefaultJobManagerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingEventImplJobsDefaultJobManagerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingEventImplJobsDefaultJobManagerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingEventImplJobsDefaultJobManagerProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingEventImplJobsDefaultJobManagerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingEventImplJobsDefaultJobManagerProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingEventImplJobsDefaultJobManagerProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingEventImplJobsDefaultJobManagerProperties
        Decoders.addDecoder(clazz: OrgApacheSlingEventImplJobsDefaultJobManagerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingEventImplJobsDefaultJobManagerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingEventImplJobsDefaultJobManagerProperties() : instance as! OrgApacheSlingEventImplJobsDefaultJobManagerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["queue.priority"] as AnyObject?) {
                
                case let .success(value): _result.queuePriority = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queue.retries"] as AnyObject?) {
                
                case let .success(value): _result.queueRetries = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queue.retrydelay"] as AnyObject?) {
                
                case let .success(value): _result.queueRetrydelay = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queue.maxparallel"] as AnyObject?) {
                
                case let .success(value): _result.queueMaxparallel = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingEventImplJobsDefaultJobManagerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo
        Decoders.addDecoder(clazz: OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo() : instance as! OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties
        Decoders.addDecoder(clazz: OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties() : instance as! OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["job.consumermanager.disableDistribution"] as AnyObject?) {
                
                case let .success(value): _result.jobConsumermanagerDisableDistribution = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["startup.delay"] as AnyObject?) {
                
                case let .success(value): _result.startupDelay = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cleanup.period"] as AnyObject?) {
                
                case let .success(value): _result.cleanupPeriod = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingEventImplJobsJobConsumerManagerInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingEventImplJobsJobConsumerManagerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingEventImplJobsJobConsumerManagerInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingEventImplJobsJobConsumerManagerInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingEventImplJobsJobConsumerManagerInfo
        Decoders.addDecoder(clazz: OrgApacheSlingEventImplJobsJobConsumerManagerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingEventImplJobsJobConsumerManagerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingEventImplJobsJobConsumerManagerInfo() : instance as! OrgApacheSlingEventImplJobsJobConsumerManagerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingEventImplJobsJobConsumerManagerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingEventImplJobsJobConsumerManagerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingEventImplJobsJobConsumerManagerProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingEventImplJobsJobConsumerManagerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingEventImplJobsJobConsumerManagerProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingEventImplJobsJobConsumerManagerProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingEventImplJobsJobConsumerManagerProperties
        Decoders.addDecoder(clazz: OrgApacheSlingEventImplJobsJobConsumerManagerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingEventImplJobsJobConsumerManagerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingEventImplJobsJobConsumerManagerProperties() : instance as! OrgApacheSlingEventImplJobsJobConsumerManagerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.sling.installer.configuration.persist"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingInstallerConfigurationPersist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["job.consumermanager.whitelist"] as AnyObject?) {
                
                case let .success(value): _result.jobConsumermanagerWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["job.consumermanager.blacklist"] as AnyObject?) {
                
                case let .success(value): _result.jobConsumermanagerBlacklist = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingEventImplJobsJobConsumerManagerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingEventJobsQueueConfigurationInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingEventJobsQueueConfigurationInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingEventJobsQueueConfigurationInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingEventJobsQueueConfigurationInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingEventJobsQueueConfigurationInfo
        Decoders.addDecoder(clazz: OrgApacheSlingEventJobsQueueConfigurationInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingEventJobsQueueConfigurationInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingEventJobsQueueConfigurationInfo() : instance as! OrgApacheSlingEventJobsQueueConfigurationInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingEventJobsQueueConfigurationProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingEventJobsQueueConfigurationInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingEventJobsQueueConfigurationProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingEventJobsQueueConfigurationProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingEventJobsQueueConfigurationProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingEventJobsQueueConfigurationProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingEventJobsQueueConfigurationProperties
        Decoders.addDecoder(clazz: OrgApacheSlingEventJobsQueueConfigurationProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingEventJobsQueueConfigurationProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingEventJobsQueueConfigurationProperties() : instance as! OrgApacheSlingEventJobsQueueConfigurationProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["queue.name"] as AnyObject?) {
                
                case let .success(value): _result.queueName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["queue.topics"] as AnyObject?) {
                
                case let .success(value): _result.queueTopics = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["queue.type"] as AnyObject?) {
                
                case let .success(value): _result.queueType = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["queue.priority"] as AnyObject?) {
                
                case let .success(value): _result.queuePriority = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queue.retries"] as AnyObject?) {
                
                case let .success(value): _result.queueRetries = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queue.retrydelay"] as AnyObject?) {
                
                case let .success(value): _result.queueRetrydelay = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyFloat.self, source: sourceDictionary["queue.maxparallel"] as AnyObject?) {
                
                case let .success(value): _result.queueMaxparallel = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["queue.keepJobs"] as AnyObject?) {
                
                case let .success(value): _result.queueKeepJobs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["queue.preferRunOnCreationInstance"] as AnyObject?) {
                
                case let .success(value): _result.queuePreferRunOnCreationInstance = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queue.threadPoolSize"] as AnyObject?) {
                
                case let .success(value): _result.queueThreadPoolSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingEventJobsQueueConfigurationProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo
        Decoders.addDecoder(clazz: OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo() : instance as! OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties
        Decoders.addDecoder(clazz: OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties() : instance as! OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["users"] as AnyObject?) {
                
                case let .success(value): _result.users = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["groups"] as AnyObject?) {
                
                case let .success(value): _result.groups = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingFeatureflagsFeatureInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingFeatureflagsFeatureInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingFeatureflagsFeatureInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingFeatureflagsFeatureInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingFeatureflagsFeatureInfo
        Decoders.addDecoder(clazz: OrgApacheSlingFeatureflagsFeatureInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingFeatureflagsFeatureInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingFeatureflagsFeatureInfo() : instance as! OrgApacheSlingFeatureflagsFeatureInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingFeatureflagsFeatureProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingFeatureflagsFeatureInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingFeatureflagsFeatureProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingFeatureflagsFeatureProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingFeatureflagsFeatureProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingFeatureflagsFeatureProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingFeatureflagsFeatureProperties
        Decoders.addDecoder(clazz: OrgApacheSlingFeatureflagsFeatureProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingFeatureflagsFeatureProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingFeatureflagsFeatureProperties() : instance as! OrgApacheSlingFeatureflagsFeatureProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingFeatureflagsFeatureProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo
        Decoders.addDecoder(clazz: OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo() : instance as! OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties
        Decoders.addDecoder(clazz: OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties() : instance as! OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingHapiImplHApiUtilImplInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingHapiImplHApiUtilImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingHapiImplHApiUtilImplInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingHapiImplHApiUtilImplInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingHapiImplHApiUtilImplInfo
        Decoders.addDecoder(clazz: OrgApacheSlingHapiImplHApiUtilImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingHapiImplHApiUtilImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingHapiImplHApiUtilImplInfo() : instance as! OrgApacheSlingHapiImplHApiUtilImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingHapiImplHApiUtilImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingHapiImplHApiUtilImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingHapiImplHApiUtilImplProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingHapiImplHApiUtilImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingHapiImplHApiUtilImplProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingHapiImplHApiUtilImplProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingHapiImplHApiUtilImplProperties
        Decoders.addDecoder(clazz: OrgApacheSlingHapiImplHApiUtilImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingHapiImplHApiUtilImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingHapiImplHApiUtilImplProperties() : instance as! OrgApacheSlingHapiImplHApiUtilImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.hapi.tools.resourcetype"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingHapiToolsResourcetype = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.hapi.tools.collectionresourcetype"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingHapiToolsCollectionresourcetype = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.sling.hapi.tools.searchpaths"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingHapiToolsSearchpaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.hapi.tools.externalurl"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingHapiToolsExternalurl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.sling.hapi.tools.enabled"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingHapiToolsEnabled = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingHapiImplHApiUtilImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingHcCoreImplCompositeHealthCheckInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingHcCoreImplCompositeHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingHcCoreImplCompositeHealthCheckInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingHcCoreImplCompositeHealthCheckInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingHcCoreImplCompositeHealthCheckInfo
        Decoders.addDecoder(clazz: OrgApacheSlingHcCoreImplCompositeHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingHcCoreImplCompositeHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingHcCoreImplCompositeHealthCheckInfo() : instance as! OrgApacheSlingHcCoreImplCompositeHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingHcCoreImplCompositeHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingHcCoreImplCompositeHealthCheckProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingHcCoreImplCompositeHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingHcCoreImplCompositeHealthCheckProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingHcCoreImplCompositeHealthCheckProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingHcCoreImplCompositeHealthCheckProperties
        Decoders.addDecoder(clazz: OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingHcCoreImplCompositeHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingHcCoreImplCompositeHealthCheckProperties() : instance as! OrgApacheSlingHcCoreImplCompositeHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.name"] as AnyObject?) {
                
                case let .success(value): _result.hcName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.mbean.name"] as AnyObject?) {
                
                case let .success(value): _result.hcMbeanName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["filter.tags"] as AnyObject?) {
                
                case let .success(value): _result.filterTags = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["filter.combineTagsWithOr"] as AnyObject?) {
                
                case let .success(value): _result.filterCombineTagsWithOr = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingHcCoreImplCompositeHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo
        Decoders.addDecoder(clazz: OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo() : instance as! OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties
        Decoders.addDecoder(clazz: OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties() : instance as! OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["timeoutInMs"] as AnyObject?) {
                
                case let .success(value): _result.timeoutInMs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["longRunningFutureThresholdForCriticalMs"] as AnyObject?) {
                
                case let .success(value): _result.longRunningFutureThresholdForCriticalMs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["resultCacheTtlInMs"] as AnyObject?) {
                
                case let .success(value): _result.resultCacheTtlInMs = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo
        Decoders.addDecoder(clazz: OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo() : instance as! OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties
        Decoders.addDecoder(clazz: OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties() : instance as! OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.name"] as AnyObject?) {
                
                case let .success(value): _result.hcName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.mbean.name"] as AnyObject?) {
                
                case let .success(value): _result.hcMbeanName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["mbean.name"] as AnyObject?) {
                
                case let .success(value): _result.mbeanName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["attribute.name"] as AnyObject?) {
                
                case let .success(value): _result.attributeName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["attribute.value.constraint"] as AnyObject?) {
                
                case let .success(value): _result.attributeValueConstraint = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingHcCoreImplScriptableHealthCheckInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingHcCoreImplScriptableHealthCheckInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingHcCoreImplScriptableHealthCheckInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingHcCoreImplScriptableHealthCheckInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingHcCoreImplScriptableHealthCheckInfo
        Decoders.addDecoder(clazz: OrgApacheSlingHcCoreImplScriptableHealthCheckInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingHcCoreImplScriptableHealthCheckInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingHcCoreImplScriptableHealthCheckInfo() : instance as! OrgApacheSlingHcCoreImplScriptableHealthCheckInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingHcCoreImplScriptableHealthCheckProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingHcCoreImplScriptableHealthCheckInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingHcCoreImplScriptableHealthCheckProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingHcCoreImplScriptableHealthCheckProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingHcCoreImplScriptableHealthCheckProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingHcCoreImplScriptableHealthCheckProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingHcCoreImplScriptableHealthCheckProperties
        Decoders.addDecoder(clazz: OrgApacheSlingHcCoreImplScriptableHealthCheckProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingHcCoreImplScriptableHealthCheckProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingHcCoreImplScriptableHealthCheckProperties() : instance as! OrgApacheSlingHcCoreImplScriptableHealthCheckProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.name"] as AnyObject?) {
                
                case let .success(value): _result.hcName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"] as AnyObject?) {
                
                case let .success(value): _result.hcTags = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.mbean.name"] as AnyObject?) {
                
                case let .success(value): _result.hcMbeanName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["expression"] as AnyObject?) {
                
                case let .success(value): _result.expression = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["language.extension"] as AnyObject?) {
                
                case let .success(value): _result.languageExtension = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingHcCoreImplScriptableHealthCheckProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo
        Decoders.addDecoder(clazz: OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo() : instance as! OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties
        Decoders.addDecoder(clazz: OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties() : instance as! OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["servletPath"] as AnyObject?) {
                
                case let .success(value): _result.servletPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["disabled"] as AnyObject?) {
                
                case let .success(value): _result.disabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cors.accessControlAllowOrigin"] as AnyObject?) {
                
                case let .success(value): _result.corsAccessControlAllowOrigin = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo
        Decoders.addDecoder(clazz: OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo() : instance as! OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties
        Decoders.addDecoder(clazz: OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties() : instance as! OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["totalWidth"] as AnyObject?) {
                
                case let .success(value): _result.totalWidth = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["colWidthName"] as AnyObject?) {
                
                case let .success(value): _result.colWidthName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["colWidthResult"] as AnyObject?) {
                
                case let .success(value): _result.colWidthResult = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["colWidthTiming"] as AnyObject?) {
                
                case let .success(value): _result.colWidthTiming = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingI18nImplI18NFilterInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingI18nImplI18NFilterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingI18nImplI18NFilterInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingI18nImplI18NFilterInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingI18nImplI18NFilterInfo
        Decoders.addDecoder(clazz: OrgApacheSlingI18nImplI18NFilterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingI18nImplI18NFilterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingI18nImplI18NFilterInfo() : instance as! OrgApacheSlingI18nImplI18NFilterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingI18nImplI18NFilterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingI18nImplI18NFilterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingI18nImplI18NFilterProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingI18nImplI18NFilterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingI18nImplI18NFilterProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingI18nImplI18NFilterProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingI18nImplI18NFilterProperties
        Decoders.addDecoder(clazz: OrgApacheSlingI18nImplI18NFilterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingI18nImplI18NFilterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingI18nImplI18NFilterProperties() : instance as! OrgApacheSlingI18nImplI18NFilterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.filter.scope"] as AnyObject?) {
                
                case let .success(value): _result.slingFilterScope = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingI18nImplI18NFilterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingI18nImplJcrResourceBundleProviderInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingI18nImplJcrResourceBundleProviderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingI18nImplJcrResourceBundleProviderInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingI18nImplJcrResourceBundleProviderInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingI18nImplJcrResourceBundleProviderInfo
        Decoders.addDecoder(clazz: OrgApacheSlingI18nImplJcrResourceBundleProviderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingI18nImplJcrResourceBundleProviderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingI18nImplJcrResourceBundleProviderInfo() : instance as! OrgApacheSlingI18nImplJcrResourceBundleProviderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingI18nImplJcrResourceBundleProviderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"] as AnyObject?) {
                
                case let .success(value): _result.additionalProperties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingI18nImplJcrResourceBundleProviderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingI18nImplJcrResourceBundleProviderProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingI18nImplJcrResourceBundleProviderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingI18nImplJcrResourceBundleProviderProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingI18nImplJcrResourceBundleProviderProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingI18nImplJcrResourceBundleProviderProperties
        Decoders.addDecoder(clazz: OrgApacheSlingI18nImplJcrResourceBundleProviderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingI18nImplJcrResourceBundleProviderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingI18nImplJcrResourceBundleProviderProperties() : instance as! OrgApacheSlingI18nImplJcrResourceBundleProviderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["locale.default"] as AnyObject?) {
                
                case let .success(value): _result.localeDefault = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["preload.bundles"] as AnyObject?) {
                
                case let .success(value): _result.preloadBundles = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["invalidation.delay"] as AnyObject?) {
                
                case let .success(value): _result.invalidationDelay = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingI18nImplJcrResourceBundleProviderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo
        Decoders.addDecoder(clazz: OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo() : instance as! OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties
        Decoders.addDecoder(clazz: OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties() : instance as! OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["handler.schemes"] as AnyObject?) {
                
                case let .success(value): _result.handlerSchemes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.jcrinstall.folder.name.regexp"] as AnyObject?) {
                
                case let .success(value): _result.slingJcrinstallFolderNameRegexp = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["sling.jcrinstall.folder.max.depth"] as AnyObject?) {
                
                case let .success(value): _result.slingJcrinstallFolderMaxDepth = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.jcrinstall.search.path"] as AnyObject?) {
                
                case let .success(value): _result.slingJcrinstallSearchPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.jcrinstall.new.config.path"] as AnyObject?) {
                
                case let .success(value): _result.slingJcrinstallNewConfigPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.jcrinstall.signal.path"] as AnyObject?) {
                
                case let .success(value): _result.slingJcrinstallSignalPath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["sling.jcrinstall.enable.writeback"] as AnyObject?) {
                
                case let .success(value): _result.slingJcrinstallEnableWriteback = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo
        Decoders.addDecoder(clazz: OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo() : instance as! OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties
        Decoders.addDecoder(clazz: OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties() : instance as! OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["whitelist.name"] as AnyObject?) {
                
                case let .success(value): _result.whitelistName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["whitelist.bundles"] as AnyObject?) {
                
                case let .success(value): _result.whitelistBundles = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo
        Decoders.addDecoder(clazz: OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo() : instance as! OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties
        Decoders.addDecoder(clazz: OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties() : instance as! OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["whitelist.bypass"] as AnyObject?) {
                
                case let .success(value): _result.whitelistBypass = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["whitelist.bundles.regexp"] as AnyObject?) {
                
                case let .success(value): _result.whitelistBundlesRegexp = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo
        Decoders.addDecoder(clazz: OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo() : instance as! OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties
        Decoders.addDecoder(clazz: OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties() : instance as! OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["alias"] as AnyObject?) {
                
                case let .success(value): _result.alias = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["dav.create-absolute-uri"] as AnyObject?) {
                
                case let .success(value): _result.davCreateAbsoluteUri = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["dav.protectedhandlers"] as AnyObject?) {
                
                case let .success(value): _result.davProtectedhandlers = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo
        Decoders.addDecoder(clazz: OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo() : instance as! OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties
        Decoders.addDecoder(clazz: OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties() : instance as! OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["java.naming.factory.initial"] as AnyObject?) {
                
                case let .success(value): _result.javaNamingFactoryInitial = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["java.naming.provider.url"] as AnyObject?) {
                
                case let .success(value): _result.javaNamingProviderUrl = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo
        Decoders.addDecoder(clazz: OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo() : instance as! OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties
        Decoders.addDecoder(clazz: OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties() : instance as! OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["port"] as AnyObject?) {
                
                case let .success(value): _result.port = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo
        Decoders.addDecoder(clazz: OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo() : instance as! OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties
        Decoders.addDecoder(clazz: OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties() : instance as! OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["references"] as AnyObject?) {
                
                case let .success(value): _result.references = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrRepoinitRepositoryInitializerInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrRepoinitRepositoryInitializerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrRepoinitRepositoryInitializerInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrRepoinitRepositoryInitializerInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrRepoinitRepositoryInitializerInfo
        Decoders.addDecoder(clazz: OrgApacheSlingJcrRepoinitRepositoryInitializerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrRepoinitRepositoryInitializerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrRepoinitRepositoryInitializerInfo() : instance as! OrgApacheSlingJcrRepoinitRepositoryInitializerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingJcrRepoinitRepositoryInitializerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrRepoinitRepositoryInitializerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrRepoinitRepositoryInitializerProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrRepoinitRepositoryInitializerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrRepoinitRepositoryInitializerProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrRepoinitRepositoryInitializerProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrRepoinitRepositoryInitializerProperties
        Decoders.addDecoder(clazz: OrgApacheSlingJcrRepoinitRepositoryInitializerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrRepoinitRepositoryInitializerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrRepoinitRepositoryInitializerProperties() : instance as! OrgApacheSlingJcrRepoinitRepositoryInitializerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["references"] as AnyObject?) {
                
                case let .success(value): _result.references = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["scripts"] as AnyObject?) {
                
                case let .success(value): _result.scripts = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrRepoinitRepositoryInitializerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo
        Decoders.addDecoder(clazz: OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo() : instance as! OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties
        Decoders.addDecoder(clazz: OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties() : instance as! OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resource.resolver.searchpath"] as AnyObject?) {
                
                case let .success(value): _result.resourceResolverSearchpath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["resource.resolver.manglenamespaces"] as AnyObject?) {
                
                case let .success(value): _result.resourceResolverManglenamespaces = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["resource.resolver.allowDirect"] as AnyObject?) {
                
                case let .success(value): _result.resourceResolverAllowDirect = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resource.resolver.required.providers"] as AnyObject?) {
                
                case let .success(value): _result.resourceResolverRequiredProviders = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resource.resolver.required.providernames"] as AnyObject?) {
                
                case let .success(value): _result.resourceResolverRequiredProvidernames = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resource.resolver.virtual"] as AnyObject?) {
                
                case let .success(value): _result.resourceResolverVirtual = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resource.resolver.mapping"] as AnyObject?) {
                
                case let .success(value): _result.resourceResolverMapping = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["resource.resolver.map.location"] as AnyObject?) {
                
                case let .success(value): _result.resourceResolverMapLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resource.resolver.map.observation"] as AnyObject?) {
                
                case let .success(value): _result.resourceResolverMapObservation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["resource.resolver.default.vanity.redirect.status"] as AnyObject?) {
                
                case let .success(value): _result.resourceResolverDefaultVanityRedirectStatus = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["resource.resolver.enable.vanitypath"] as AnyObject?) {
                
                case let .success(value): _result.resourceResolverEnableVanitypath = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["resource.resolver.vanitypath.maxEntries"] as AnyObject?) {
                
                case let .success(value): _result.resourceResolverVanitypathMaxEntries = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["resource.resolver.vanitypath.maxEntries.startup"] as AnyObject?) {
                
                case let .success(value): _result.resourceResolverVanitypathMaxEntriesStartup = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["resource.resolver.vanitypath.bloomfilter.maxBytes"] as AnyObject?) {
                
                case let .success(value): _result.resourceResolverVanitypathBloomfilterMaxBytes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["resource.resolver.optimize.alias.resolution"] as AnyObject?) {
                
                case let .success(value): _result.resourceResolverOptimizeAliasResolution = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resource.resolver.vanitypath.whitelist"] as AnyObject?) {
                
                case let .success(value): _result.resourceResolverVanitypathWhitelist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resource.resolver.vanitypath.blacklist"] as AnyObject?) {
                
                case let .success(value): _result.resourceResolverVanitypathBlacklist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["resource.resolver.vanity.precedence"] as AnyObject?) {
                
                case let .success(value): _result.resourceResolverVanityPrecedence = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["resource.resolver.providerhandling.paranoid"] as AnyObject?) {
                
                case let .success(value): _result.resourceResolverProviderhandlingParanoid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["resource.resolver.log.closing"] as AnyObject?) {
                
                case let .success(value): _result.resourceResolverLogClosing = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["resource.resolver.log.unclosed"] as AnyObject?) {
                
                case let .success(value): _result.resourceResolverLogUnclosed = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo
        Decoders.addDecoder(clazz: OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo() : instance as! OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties
        Decoders.addDecoder(clazz: OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties() : instance as! OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["allow.only.system.user"] as AnyObject?) {
                
                case let .success(value): _result.allowOnlySystemUser = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo
        Decoders.addDecoder(clazz: OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo() : instance as! OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties
        Decoders.addDecoder(clazz: OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties() : instance as! OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"] as AnyObject?) {
                
                case let .success(value): _result.path = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["checkpath.prefix"] as AnyObject?) {
                
                case let .success(value): _result.checkpathPrefix = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jcrPath"] as AnyObject?) {
                
                case let .success(value): _result.jcrPath = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo
        Decoders.addDecoder(clazz: OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo() : instance as! OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties
        Decoders.addDecoder(clazz: OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties() : instance as! OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["type.collections"] as AnyObject?) {
                
                case let .success(value): _result.typeCollections = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["type.noncollections"] as AnyObject?) {
                
                case let .success(value): _result.typeNoncollections = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["type.content"] as AnyObject?) {
                
                case let .success(value): _result.typeContent = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo
        Decoders.addDecoder(clazz: OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo() : instance as! OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties
        Decoders.addDecoder(clazz: OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties() : instance as! OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo
        Decoders.addDecoder(clazz: OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo() : instance as! OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties
        Decoders.addDecoder(clazz: OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties() : instance as! OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["dav.root"] as AnyObject?) {
                
                case let .success(value): _result.davRoot = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["dav.create-absolute-uri"] as AnyObject?) {
                
                case let .success(value): _result.davCreateAbsoluteUri = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["dav.realm"] as AnyObject?) {
                
                case let .success(value): _result.davRealm = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["collection.types"] as AnyObject?) {
                
                case let .success(value): _result.collectionTypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["filter.prefixes"] as AnyObject?) {
                
                case let .success(value): _result.filterPrefixes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["filter.types"] as AnyObject?) {
                
                case let .success(value): _result.filterTypes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["filter.uris"] as AnyObject?) {
                
                case let .success(value): _result.filterUris = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["type.collections"] as AnyObject?) {
                
                case let .success(value): _result.typeCollections = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["type.noncollections"] as AnyObject?) {
                
                case let .success(value): _result.typeNoncollections = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["type.content"] as AnyObject?) {
                
                case let .success(value): _result.typeContent = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJmxProviderImplJMXResourceProviderInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingJmxProviderImplJMXResourceProviderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJmxProviderImplJMXResourceProviderInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingJmxProviderImplJMXResourceProviderInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingJmxProviderImplJMXResourceProviderInfo
        Decoders.addDecoder(clazz: OrgApacheSlingJmxProviderImplJMXResourceProviderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJmxProviderImplJMXResourceProviderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJmxProviderImplJMXResourceProviderInfo() : instance as! OrgApacheSlingJmxProviderImplJMXResourceProviderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingJmxProviderImplJMXResourceProviderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJmxProviderImplJMXResourceProviderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingJmxProviderImplJMXResourceProviderProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingJmxProviderImplJMXResourceProviderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingJmxProviderImplJMXResourceProviderProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingJmxProviderImplJMXResourceProviderProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingJmxProviderImplJMXResourceProviderProperties
        Decoders.addDecoder(clazz: OrgApacheSlingJmxProviderImplJMXResourceProviderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingJmxProviderImplJMXResourceProviderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingJmxProviderImplJMXResourceProviderProperties() : instance as! OrgApacheSlingJmxProviderImplJMXResourceProviderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["provider.roots"] as AnyObject?) {
                
                case let .success(value): _result.providerRoots = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingJmxProviderImplJMXResourceProviderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingModelsImplModelAdapterFactoryInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingModelsImplModelAdapterFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingModelsImplModelAdapterFactoryInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingModelsImplModelAdapterFactoryInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingModelsImplModelAdapterFactoryInfo
        Decoders.addDecoder(clazz: OrgApacheSlingModelsImplModelAdapterFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingModelsImplModelAdapterFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingModelsImplModelAdapterFactoryInfo() : instance as! OrgApacheSlingModelsImplModelAdapterFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingModelsImplModelAdapterFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingModelsImplModelAdapterFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingModelsImplModelAdapterFactoryProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingModelsImplModelAdapterFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingModelsImplModelAdapterFactoryProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingModelsImplModelAdapterFactoryProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingModelsImplModelAdapterFactoryProperties
        Decoders.addDecoder(clazz: OrgApacheSlingModelsImplModelAdapterFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingModelsImplModelAdapterFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingModelsImplModelAdapterFactoryProperties() : instance as! OrgApacheSlingModelsImplModelAdapterFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["osgi.http.whiteboard.listener"] as AnyObject?) {
                
                case let .success(value): _result.osgiHttpWhiteboardListener = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["osgi.http.whiteboard.context.select"] as AnyObject?) {
                
                case let .success(value): _result.osgiHttpWhiteboardContextSelect = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["max.recursion.depth"] as AnyObject?) {
                
                case let .success(value): _result.maxRecursionDepth = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cleanup.job.period"] as AnyObject?) {
                
                case let .success(value): _result.cleanupJobPeriod = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingModelsImplModelAdapterFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo
        Decoders.addDecoder(clazz: OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo() : instance as! OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties
        Decoders.addDecoder(clazz: OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties() : instance as! OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["max.recursion.levels"] as AnyObject?) {
                
                case let .success(value): _result.maxRecursionLevels = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo
        Decoders.addDecoder(clazz: OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo() : instance as! OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties
        Decoders.addDecoder(clazz: OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties() : instance as! OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["felix.inventory.printer.name"] as AnyObject?) {
                
                case let .success(value): _result.felixInventoryPrinterName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["felix.inventory.printer.title"] as AnyObject?) {
                
                case let .success(value): _result.felixInventoryPrinterTitle = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"] as AnyObject?) {
                
                case let .success(value): _result.path = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo
        Decoders.addDecoder(clazz: OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo() : instance as! OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties
        Decoders.addDecoder(clazz: OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties() : instance as! OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["merge.root"] as AnyObject?) {
                
                case let .success(value): _result.mergeRoot = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["merge.readOnly"] as AnyObject?) {
                
                case let .success(value): _result.mergeReadOnly = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingResourcemergerPickerOverridingInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingResourcemergerPickerOverridingInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingResourcemergerPickerOverridingInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingResourcemergerPickerOverridingInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingResourcemergerPickerOverridingInfo
        Decoders.addDecoder(clazz: OrgApacheSlingResourcemergerPickerOverridingInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingResourcemergerPickerOverridingInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingResourcemergerPickerOverridingInfo() : instance as! OrgApacheSlingResourcemergerPickerOverridingInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingResourcemergerPickerOverridingProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"] as AnyObject?) {
                
                case let .success(value): _result.additionalProperties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingResourcemergerPickerOverridingInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingResourcemergerPickerOverridingProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingResourcemergerPickerOverridingProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingResourcemergerPickerOverridingProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingResourcemergerPickerOverridingProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingResourcemergerPickerOverridingProperties
        Decoders.addDecoder(clazz: OrgApacheSlingResourcemergerPickerOverridingProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingResourcemergerPickerOverridingProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingResourcemergerPickerOverridingProperties() : instance as! OrgApacheSlingResourcemergerPickerOverridingProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["merge.root"] as AnyObject?) {
                
                case let .success(value): _result.mergeRoot = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["merge.readOnly"] as AnyObject?) {
                
                case let .success(value): _result.mergeReadOnly = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingResourcemergerPickerOverridingProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingScriptingCoreImplScriptCacheImplInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingScriptingCoreImplScriptCacheImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingScriptingCoreImplScriptCacheImplInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingScriptingCoreImplScriptCacheImplInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingScriptingCoreImplScriptCacheImplInfo
        Decoders.addDecoder(clazz: OrgApacheSlingScriptingCoreImplScriptCacheImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingScriptingCoreImplScriptCacheImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingScriptingCoreImplScriptCacheImplInfo() : instance as! OrgApacheSlingScriptingCoreImplScriptCacheImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingScriptingCoreImplScriptCacheImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingScriptingCoreImplScriptCacheImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingScriptingCoreImplScriptCacheImplProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingScriptingCoreImplScriptCacheImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingScriptingCoreImplScriptCacheImplProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingScriptingCoreImplScriptCacheImplProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingScriptingCoreImplScriptCacheImplProperties
        Decoders.addDecoder(clazz: OrgApacheSlingScriptingCoreImplScriptCacheImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingScriptingCoreImplScriptCacheImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingScriptingCoreImplScriptCacheImplProperties() : instance as! OrgApacheSlingScriptingCoreImplScriptCacheImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.sling.scripting.cache.size"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingScriptingCacheSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.sling.scripting.cache.additional_extensions"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingScriptingCacheAdditionalExtensions = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingScriptingCoreImplScriptCacheImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo
        Decoders.addDecoder(clazz: OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo() : instance as! OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties
        Decoders.addDecoder(clazz: OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties() : instance as! OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["log.stacktrace.onclose"] as AnyObject?) {
                
                case let .success(value): _result.logStacktraceOnclose = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo
        Decoders.addDecoder(clazz: OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo() : instance as! OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties
        Decoders.addDecoder(clazz: OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties() : instance as! OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["java.classdebuginfo"] as AnyObject?) {
                
                case let .success(value): _result.javaClassdebuginfo = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["java.javaEncoding"] as AnyObject?) {
                
                case let .success(value): _result.javaJavaEncoding = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["java.compilerSourceVM"] as AnyObject?) {
                
                case let .success(value): _result.javaCompilerSourceVM = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["java.compilerTargetVM"] as AnyObject?) {
                
                case let .success(value): _result.javaCompilerTargetVM = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo
        Decoders.addDecoder(clazz: OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo() : instance as! OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties
        Decoders.addDecoder(clazz: OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties() : instance as! OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.sling.scripting.javascript.rhino.optLevel"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingScriptingJavascriptRhinoOptLevel = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo
        Decoders.addDecoder(clazz: OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo() : instance as! OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties
        Decoders.addDecoder(clazz: OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties() : instance as! OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jasper.compilerTargetVM"] as AnyObject?) {
                
                case let .success(value): _result.jasperCompilerTargetVM = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jasper.compilerSourceVM"] as AnyObject?) {
                
                case let .success(value): _result.jasperCompilerSourceVM = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["jasper.classdebuginfo"] as AnyObject?) {
                
                case let .success(value): _result.jasperClassdebuginfo = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["jasper.enablePooling"] as AnyObject?) {
                
                case let .success(value): _result.jasperEnablePooling = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jasper.ieClassId"] as AnyObject?) {
                
                case let .success(value): _result.jasperIeClassId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["jasper.genStringAsCharArray"] as AnyObject?) {
                
                case let .success(value): _result.jasperGenStringAsCharArray = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["jasper.keepgenerated"] as AnyObject?) {
                
                case let .success(value): _result.jasperKeepgenerated = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["jasper.mappedfile"] as AnyObject?) {
                
                case let .success(value): _result.jasperMappedfile = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["jasper.trimSpaces"] as AnyObject?) {
                
                case let .success(value): _result.jasperTrimSpaces = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["jasper.displaySourceFragments"] as AnyObject?) {
                
                case let .success(value): _result.jasperDisplaySourceFragments = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["default.is.session"] as AnyObject?) {
                
                case let .success(value): _result.defaultIsSession = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo
        Decoders.addDecoder(clazz: OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo() : instance as! OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties
        Decoders.addDecoder(clazz: OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties() : instance as! OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.sling.scripting.sightly.js.bindings"] as AnyObject?) {
                
                case let .success(value): _result.orgApacheSlingScriptingSightlyJsBindings = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingSecurityImplContentDispositionFilterInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingSecurityImplContentDispositionFilterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingSecurityImplContentDispositionFilterInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingSecurityImplContentDispositionFilterInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingSecurityImplContentDispositionFilterInfo
        Decoders.addDecoder(clazz: OrgApacheSlingSecurityImplContentDispositionFilterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingSecurityImplContentDispositionFilterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingSecurityImplContentDispositionFilterInfo() : instance as! OrgApacheSlingSecurityImplContentDispositionFilterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingSecurityImplContentDispositionFilterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingSecurityImplContentDispositionFilterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingSecurityImplContentDispositionFilterProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingSecurityImplContentDispositionFilterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingSecurityImplContentDispositionFilterProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingSecurityImplContentDispositionFilterProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingSecurityImplContentDispositionFilterProperties
        Decoders.addDecoder(clazz: OrgApacheSlingSecurityImplContentDispositionFilterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingSecurityImplContentDispositionFilterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingSecurityImplContentDispositionFilterProperties() : instance as! OrgApacheSlingSecurityImplContentDispositionFilterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.content.disposition.paths"] as AnyObject?) {
                
                case let .success(value): _result.slingContentDispositionPaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.content.disposition.excluded.paths"] as AnyObject?) {
                
                case let .success(value): _result.slingContentDispositionExcludedPaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["sling.content.disposition.all.paths"] as AnyObject?) {
                
                case let .success(value): _result.slingContentDispositionAllPaths = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingSecurityImplContentDispositionFilterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingSecurityImplReferrerFilterInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingSecurityImplReferrerFilterInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingSecurityImplReferrerFilterInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingSecurityImplReferrerFilterInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingSecurityImplReferrerFilterInfo
        Decoders.addDecoder(clazz: OrgApacheSlingSecurityImplReferrerFilterInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingSecurityImplReferrerFilterInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingSecurityImplReferrerFilterInfo() : instance as! OrgApacheSlingSecurityImplReferrerFilterInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingSecurityImplReferrerFilterProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingSecurityImplReferrerFilterInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingSecurityImplReferrerFilterProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingSecurityImplReferrerFilterProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingSecurityImplReferrerFilterProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingSecurityImplReferrerFilterProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingSecurityImplReferrerFilterProperties
        Decoders.addDecoder(clazz: OrgApacheSlingSecurityImplReferrerFilterProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingSecurityImplReferrerFilterProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingSecurityImplReferrerFilterProperties() : instance as! OrgApacheSlingSecurityImplReferrerFilterProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["allow.empty"] as AnyObject?) {
                
                case let .success(value): _result.allowEmpty = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["allow.hosts"] as AnyObject?) {
                
                case let .success(value): _result.allowHosts = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["allow.hosts.regexp"] as AnyObject?) {
                
                case let .success(value): _result.allowHostsRegexp = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["filter.methods"] as AnyObject?) {
                
                case let .success(value): _result.filterMethods = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["exclude.agents.regexp"] as AnyObject?) {
                
                case let .success(value): _result.excludeAgentsRegexp = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingSecurityImplReferrerFilterProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo
        Decoders.addDecoder(clazz: OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo() : instance as! OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties
        Decoders.addDecoder(clazz: OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties() : instance as! OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["user.mapping"] as AnyObject?) {
                
                case let .success(value): _result.userMapping = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo
        Decoders.addDecoder(clazz: OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo() : instance as! OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties
        Decoders.addDecoder(clazz: OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties() : instance as! OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["user.mapping"] as AnyObject?) {
                
                case let .success(value): _result.userMapping = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["user.default"] as AnyObject?) {
                
                case let .success(value): _result.userDefault = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["user.enable.default.mapping"] as AnyObject?) {
                
                case let .success(value): _result.userEnableDefaultMapping = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["require.validation"] as AnyObject?) {
                
                case let .success(value): _result.requireValidation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingServletsGetDefaultGetServletInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingServletsGetDefaultGetServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingServletsGetDefaultGetServletInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingServletsGetDefaultGetServletInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingServletsGetDefaultGetServletInfo
        Decoders.addDecoder(clazz: OrgApacheSlingServletsGetDefaultGetServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingServletsGetDefaultGetServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingServletsGetDefaultGetServletInfo() : instance as! OrgApacheSlingServletsGetDefaultGetServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingServletsGetDefaultGetServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingServletsGetDefaultGetServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingServletsGetDefaultGetServletProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingServletsGetDefaultGetServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingServletsGetDefaultGetServletProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingServletsGetDefaultGetServletProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingServletsGetDefaultGetServletProperties
        Decoders.addDecoder(clazz: OrgApacheSlingServletsGetDefaultGetServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingServletsGetDefaultGetServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingServletsGetDefaultGetServletProperties() : instance as! OrgApacheSlingServletsGetDefaultGetServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["aliases"] as AnyObject?) {
                
                case let .success(value): _result.aliases = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["index"] as AnyObject?) {
                
                case let .success(value): _result.index = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["index.files"] as AnyObject?) {
                
                case let .success(value): _result.indexFiles = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enable.html"] as AnyObject?) {
                
                case let .success(value): _result.enableHtml = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enable.json"] as AnyObject?) {
                
                case let .success(value): _result.enableJson = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enable.txt"] as AnyObject?) {
                
                case let .success(value): _result.enableTxt = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enable.xml"] as AnyObject?) {
                
                case let .success(value): _result.enableXml = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["json.maximumresults"] as AnyObject?) {
                
                case let .success(value): _result.jsonMaximumresults = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["ecmaSuport"] as AnyObject?) {
                
                case let .success(value): _result.ecmaSuport = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingServletsGetDefaultGetServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo
        Decoders.addDecoder(clazz: OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo() : instance as! OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties
        Decoders.addDecoder(clazz: OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties() : instance as! OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.servlet.selectors"] as AnyObject?) {
                
                case let .success(value): _result.slingServletSelectors = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["ecmaSuport"] as AnyObject?) {
                
                case let .success(value): _result.ecmaSuport = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo
        Decoders.addDecoder(clazz: OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo() : instance as! OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties
        Decoders.addDecoder(clazz: OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties() : instance as! OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"] as AnyObject?) {
                
                case let .success(value): _result.schedulerExpression = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["scheduler.concurrent"] as AnyObject?) {
                
                case let .success(value): _result.schedulerConcurrent = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["chunk.cleanup.age"] as AnyObject?) {
                
                case let .success(value): _result.chunkCleanupAge = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingServletsPostImplSlingPostServletInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingServletsPostImplSlingPostServletInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingServletsPostImplSlingPostServletInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingServletsPostImplSlingPostServletInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingServletsPostImplSlingPostServletInfo
        Decoders.addDecoder(clazz: OrgApacheSlingServletsPostImplSlingPostServletInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingServletsPostImplSlingPostServletInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingServletsPostImplSlingPostServletInfo() : instance as! OrgApacheSlingServletsPostImplSlingPostServletInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingServletsPostImplSlingPostServletProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingServletsPostImplSlingPostServletInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingServletsPostImplSlingPostServletProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingServletsPostImplSlingPostServletProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingServletsPostImplSlingPostServletProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingServletsPostImplSlingPostServletProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingServletsPostImplSlingPostServletProperties
        Decoders.addDecoder(clazz: OrgApacheSlingServletsPostImplSlingPostServletProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingServletsPostImplSlingPostServletProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingServletsPostImplSlingPostServletProperties() : instance as! OrgApacheSlingServletsPostImplSlingPostServletProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["servlet.post.dateFormats"] as AnyObject?) {
                
                case let .success(value): _result.servletPostDateFormats = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["servlet.post.nodeNameHints"] as AnyObject?) {
                
                case let .success(value): _result.servletPostNodeNameHints = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["servlet.post.nodeNameMaxLength"] as AnyObject?) {
                
                case let .success(value): _result.servletPostNodeNameMaxLength = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["servlet.post.checkinNewVersionableNodes"] as AnyObject?) {
                
                case let .success(value): _result.servletPostCheckinNewVersionableNodes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["servlet.post.autoCheckout"] as AnyObject?) {
                
                case let .success(value): _result.servletPostAutoCheckout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["servlet.post.autoCheckin"] as AnyObject?) {
                
                case let .success(value): _result.servletPostAutoCheckin = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["servlet.post.ignorePattern"] as AnyObject?) {
                
                case let .success(value): _result.servletPostIgnorePattern = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingServletsPostImplSlingPostServletProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingServletsResolverSlingServletResolverInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingServletsResolverSlingServletResolverInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingServletsResolverSlingServletResolverInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingServletsResolverSlingServletResolverInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingServletsResolverSlingServletResolverInfo
        Decoders.addDecoder(clazz: OrgApacheSlingServletsResolverSlingServletResolverInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingServletsResolverSlingServletResolverInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingServletsResolverSlingServletResolverInfo() : instance as! OrgApacheSlingServletsResolverSlingServletResolverInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingServletsResolverSlingServletResolverProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingServletsResolverSlingServletResolverInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingServletsResolverSlingServletResolverProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingServletsResolverSlingServletResolverProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingServletsResolverSlingServletResolverProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingServletsResolverSlingServletResolverProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingServletsResolverSlingServletResolverProperties
        Decoders.addDecoder(clazz: OrgApacheSlingServletsResolverSlingServletResolverProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingServletsResolverSlingServletResolverProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingServletsResolverSlingServletResolverProperties() : instance as! OrgApacheSlingServletsResolverSlingServletResolverProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["servletresolver.servletRoot"] as AnyObject?) {
                
                case let .success(value): _result.servletresolverServletRoot = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["servletresolver.cacheSize"] as AnyObject?) {
                
                case let .success(value): _result.servletresolverCacheSize = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["servletresolver.paths"] as AnyObject?) {
                
                case let .success(value): _result.servletresolverPaths = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["servletresolver.defaultExtensions"] as AnyObject?) {
                
                case let .success(value): _result.servletresolverDefaultExtensions = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingServletsResolverSlingServletResolverProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo
        Decoders.addDecoder(clazz: OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo() : instance as! OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties
        Decoders.addDecoder(clazz: OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties() : instance as! OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.name"] as AnyObject?) {
                
                case let .success(value): _result.slingName = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.description"] as AnyObject?) {
                
                case let .success(value): _result.slingDescription = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingStartupfilterImplStartupFilterImplInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingStartupfilterImplStartupFilterImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingStartupfilterImplStartupFilterImplInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingStartupfilterImplStartupFilterImplInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingStartupfilterImplStartupFilterImplInfo
        Decoders.addDecoder(clazz: OrgApacheSlingStartupfilterImplStartupFilterImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingStartupfilterImplStartupFilterImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingStartupfilterImplStartupFilterImplInfo() : instance as! OrgApacheSlingStartupfilterImplStartupFilterImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingStartupfilterImplStartupFilterImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingStartupfilterImplStartupFilterImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingStartupfilterImplStartupFilterImplProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingStartupfilterImplStartupFilterImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingStartupfilterImplStartupFilterImplProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingStartupfilterImplStartupFilterImplProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingStartupfilterImplStartupFilterImplProperties
        Decoders.addDecoder(clazz: OrgApacheSlingStartupfilterImplStartupFilterImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingStartupfilterImplStartupFilterImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingStartupfilterImplStartupFilterImplProperties() : instance as! OrgApacheSlingStartupfilterImplStartupFilterImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["active.by.default"] as AnyObject?) {
                
                case let .success(value): _result.activeByDefault = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["default.message"] as AnyObject?) {
                
                case let .success(value): _result.defaultMessage = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingStartupfilterImplStartupFilterImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingTenantInternalTenantProviderImplInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingTenantInternalTenantProviderImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingTenantInternalTenantProviderImplInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingTenantInternalTenantProviderImplInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingTenantInternalTenantProviderImplInfo
        Decoders.addDecoder(clazz: OrgApacheSlingTenantInternalTenantProviderImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingTenantInternalTenantProviderImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingTenantInternalTenantProviderImplInfo() : instance as! OrgApacheSlingTenantInternalTenantProviderImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingTenantInternalTenantProviderImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingTenantInternalTenantProviderImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingTenantInternalTenantProviderImplProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingTenantInternalTenantProviderImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingTenantInternalTenantProviderImplProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingTenantInternalTenantProviderImplProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingTenantInternalTenantProviderImplProperties
        Decoders.addDecoder(clazz: OrgApacheSlingTenantInternalTenantProviderImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingTenantInternalTenantProviderImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingTenantInternalTenantProviderImplProperties() : instance as! OrgApacheSlingTenantInternalTenantProviderImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tenant.root"] as AnyObject?) {
                
                case let .success(value): _result.tenantRoot = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["tenant.path.matcher"] as AnyObject?) {
                
                case let .success(value): _result.tenantPathMatcher = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingTenantInternalTenantProviderImplProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingTracerInternalLogTracerInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingTracerInternalLogTracerInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingTracerInternalLogTracerInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingTracerInternalLogTracerInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingTracerInternalLogTracerInfo
        Decoders.addDecoder(clazz: OrgApacheSlingTracerInternalLogTracerInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingTracerInternalLogTracerInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingTracerInternalLogTracerInfo() : instance as! OrgApacheSlingTracerInternalLogTracerInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingTracerInternalLogTracerProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingTracerInternalLogTracerInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingTracerInternalLogTracerProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingTracerInternalLogTracerProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingTracerInternalLogTracerProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingTracerInternalLogTracerProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingTracerInternalLogTracerProperties
        Decoders.addDecoder(clazz: OrgApacheSlingTracerInternalLogTracerProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingTracerInternalLogTracerProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingTracerInternalLogTracerProperties() : instance as! OrgApacheSlingTracerInternalLogTracerProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["tracerSets"] as AnyObject?) {
                
                case let .success(value): _result.tracerSets = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"] as AnyObject?) {
                
                case let .success(value): _result.enabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["servletEnabled"] as AnyObject?) {
                
                case let .success(value): _result.servletEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["recordingCacheSizeInMB"] as AnyObject?) {
                
                case let .success(value): _result.recordingCacheSizeInMB = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["recordingCacheDurationInSecs"] as AnyObject?) {
                
                case let .success(value): _result.recordingCacheDurationInSecs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["recordingCompressionEnabled"] as AnyObject?) {
                
                case let .success(value): _result.recordingCompressionEnabled = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["gzipResponse"] as AnyObject?) {
                
                case let .success(value): _result.gzipResponse = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingTracerInternalLogTracerProperties", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingXssImplXSSFilterImplInfo]
        Decoders.addDecoder(clazz: [OrgApacheSlingXssImplXSSFilterImplInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingXssImplXSSFilterImplInfo]> in
            return Decoders.decode(clazz: [OrgApacheSlingXssImplXSSFilterImplInfo].self, source: source)
        }

        // Decoder for OrgApacheSlingXssImplXSSFilterImplInfo
        Decoders.addDecoder(clazz: OrgApacheSlingXssImplXSSFilterImplInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingXssImplXSSFilterImplInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingXssImplXSSFilterImplInfo() : instance as! OrgApacheSlingXssImplXSSFilterImplInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: OrgApacheSlingXssImplXSSFilterImplProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingXssImplXSSFilterImplInfo", actual: "\(source)"))
            }
        }
        // Decoder for [OrgApacheSlingXssImplXSSFilterImplProperties]
        Decoders.addDecoder(clazz: [OrgApacheSlingXssImplXSSFilterImplProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrgApacheSlingXssImplXSSFilterImplProperties]> in
            return Decoders.decode(clazz: [OrgApacheSlingXssImplXSSFilterImplProperties].self, source: source)
        }

        // Decoder for OrgApacheSlingXssImplXSSFilterImplProperties
        Decoders.addDecoder(clazz: OrgApacheSlingXssImplXSSFilterImplProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrgApacheSlingXssImplXSSFilterImplProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrgApacheSlingXssImplXSSFilterImplProperties() : instance as! OrgApacheSlingXssImplXSSFilterImplProperties
                switch Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["policyPath"] as AnyObject?) {
                
                case let .success(value): _result.policyPath = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrgApacheSlingXssImplXSSFilterImplProperties", actual: "\(source)"))
            }
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
