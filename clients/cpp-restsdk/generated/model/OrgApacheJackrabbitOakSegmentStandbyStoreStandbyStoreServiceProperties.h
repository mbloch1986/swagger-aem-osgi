/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties
    : public ModelBase
{
public:
    OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties();
    virtual ~OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getOrgApacheSlingInstallerConfigurationPersist() const;
    bool orgApacheSlingInstallerConfigurationPersistIsSet() const;
    void unsetOrg_apache_sling_installer_configuration_persist();
    void setOrgApacheSlingInstallerConfigurationPersist(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getMode() const;
    bool modeIsSet() const;
    void unsetMode();
    void setMode(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getPort() const;
    bool portIsSet() const;
    void unsetPort();
    void setPort(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPrimaryHost() const;
    bool primaryHostIsSet() const;
    void unsetPrimary_host();
    void setPrimaryHost(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getInterval() const;
    bool intervalIsSet() const;
    void unsetInterval();
    void setInterval(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getPrimaryAllowedClientIpRanges() const;
    bool primaryAllowedClientIpRangesIsSet() const;
    void unsetPrimary_allowed_client_ip_ranges();
    void setPrimaryAllowedClientIpRanges(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getSecure() const;
    bool secureIsSet() const;
    void unsetSecure();
    void setSecure(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getStandbyReadtimeout() const;
    bool standbyReadtimeoutIsSet() const;
    void unsetStandby_readtimeout();
    void setStandbyReadtimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getStandbyAutoclean() const;
    bool standbyAutocleanIsSet() const;
    void unsetStandby_autoclean();
    void setStandbyAutoclean(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyBoolean> m_Org_apache_sling_installer_configuration_persist;
    bool m_Org_apache_sling_installer_configuration_persistIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Mode;
    bool m_ModeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Port;
    bool m_PortIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Primary_host;
    bool m_Primary_hostIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Interval;
    bool m_IntervalIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Primary_allowed_client_ip_ranges;
    bool m_Primary_allowed_client_ip_rangesIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Secure;
    bool m_SecureIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Standby_readtimeout;
    bool m_Standby_readtimeoutIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Standby_autoclean;
    bool m_Standby_autocleanIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties_H_ */
