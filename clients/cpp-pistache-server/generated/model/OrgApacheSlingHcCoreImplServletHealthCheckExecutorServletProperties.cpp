/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties()
{
    m_ServletPathIsSet = false;
    m_DisabledIsSet = false;
    m_Cors_accessControlAllowOriginIsSet = false;
    
}

OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::~OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties()
{
}

void OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_ServletPathIsSet)
    {
        val["servletPath"] = ModelBase::toJson(m_ServletPath);
    }
    if(m_DisabledIsSet)
    {
        val["disabled"] = ModelBase::toJson(m_Disabled);
    }
    if(m_Cors_accessControlAllowOriginIsSet)
    {
        val["cors.accessControlAllowOrigin"] = ModelBase::toJson(m_Cors_accessControlAllowOrigin);
    }
    

    return val;
}

void OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::fromJson(nlohmann::json& val)
{
    if(val.find("servletPath") != val.end())
    {
        if(!val["servletPath"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["servletPath"]);
            setServletPath( newItem );
        }
        
    }
    if(val.find("disabled") != val.end())
    {
        if(!val["disabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["disabled"]);
            setDisabled( newItem );
        }
        
    }
    if(val.find("cors.accessControlAllowOrigin") != val.end())
    {
        if(!val["cors.accessControlAllowOrigin"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["cors.accessControlAllowOrigin"]);
            setCorsAccessControlAllowOrigin( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::getServletPath() const
{
    return m_ServletPath;
}
void OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::setServletPath(ConfigNodePropertyString const& value)
{
    m_ServletPath = value;
    m_ServletPathIsSet = true;
}
bool OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::servletPathIsSet() const
{
    return m_ServletPathIsSet;
}
void OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::unsetServletPath()
{
    m_ServletPathIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::getDisabled() const
{
    return m_Disabled;
}
void OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::setDisabled(ConfigNodePropertyBoolean const& value)
{
    m_Disabled = value;
    m_DisabledIsSet = true;
}
bool OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::disabledIsSet() const
{
    return m_DisabledIsSet;
}
void OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::unsetDisabled()
{
    m_DisabledIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::getCorsAccessControlAllowOrigin() const
{
    return m_Cors_accessControlAllowOrigin;
}
void OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::setCorsAccessControlAllowOrigin(ConfigNodePropertyString const& value)
{
    m_Cors_accessControlAllowOrigin = value;
    m_Cors_accessControlAllowOriginIsSet = true;
}
bool OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::corsAccessControlAllowOriginIsSet() const
{
    return m_Cors_accessControlAllowOriginIsSet;
}
void OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::unsetCors_accessControlAllowOrigin()
{
    m_Cors_accessControlAllowOriginIsSet = false;
}

}
}
}
}

