/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingEngineParametersProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingEngineParametersProperties::OAIOrgApacheSlingEngineParametersProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingEngineParametersProperties::OAIOrgApacheSlingEngineParametersProperties() {
    init();
}

OAIOrgApacheSlingEngineParametersProperties::~OAIOrgApacheSlingEngineParametersProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingEngineParametersProperties::init() {
    sling_default_parameter_encoding = new OAIConfigNodePropertyString();
    m_sling_default_parameter_encoding_isSet = false;
    sling_default_max_parameters = new OAIConfigNodePropertyInteger();
    m_sling_default_max_parameters_isSet = false;
    file_location = new OAIConfigNodePropertyString();
    m_file_location_isSet = false;
    file_threshold = new OAIConfigNodePropertyInteger();
    m_file_threshold_isSet = false;
    file_max = new OAIConfigNodePropertyInteger();
    m_file_max_isSet = false;
    request_max = new OAIConfigNodePropertyInteger();
    m_request_max_isSet = false;
    sling_default_parameter_check_for_additional_container_parameters = new OAIConfigNodePropertyBoolean();
    m_sling_default_parameter_check_for_additional_container_parameters_isSet = false;
}

void
OAIOrgApacheSlingEngineParametersProperties::cleanup() {
    if(sling_default_parameter_encoding != nullptr) { 
        delete sling_default_parameter_encoding;
    }
    if(sling_default_max_parameters != nullptr) { 
        delete sling_default_max_parameters;
    }
    if(file_location != nullptr) { 
        delete file_location;
    }
    if(file_threshold != nullptr) { 
        delete file_threshold;
    }
    if(file_max != nullptr) { 
        delete file_max;
    }
    if(request_max != nullptr) { 
        delete request_max;
    }
    if(sling_default_parameter_check_for_additional_container_parameters != nullptr) { 
        delete sling_default_parameter_check_for_additional_container_parameters;
    }
}

OAIOrgApacheSlingEngineParametersProperties*
OAIOrgApacheSlingEngineParametersProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingEngineParametersProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&sling_default_parameter_encoding, pJson["sling.default.parameter.encoding"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&sling_default_max_parameters, pJson["sling.default.max.parameters"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&file_location, pJson["file.location"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&file_threshold, pJson["file.threshold"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&file_max, pJson["file.max"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&request_max, pJson["request.max"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&sling_default_parameter_check_for_additional_container_parameters, pJson["sling.default.parameter.checkForAdditionalContainerParameters"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIOrgApacheSlingEngineParametersProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingEngineParametersProperties::asJsonObject() {
    QJsonObject obj;
    if((sling_default_parameter_encoding != nullptr) && (sling_default_parameter_encoding->isSet())){
        toJsonValue(QString("sling.default.parameter.encoding"), sling_default_parameter_encoding, obj, QString("OAIConfigNodePropertyString"));
    }
    if((sling_default_max_parameters != nullptr) && (sling_default_max_parameters->isSet())){
        toJsonValue(QString("sling.default.max.parameters"), sling_default_max_parameters, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((file_location != nullptr) && (file_location->isSet())){
        toJsonValue(QString("file.location"), file_location, obj, QString("OAIConfigNodePropertyString"));
    }
    if((file_threshold != nullptr) && (file_threshold->isSet())){
        toJsonValue(QString("file.threshold"), file_threshold, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((file_max != nullptr) && (file_max->isSet())){
        toJsonValue(QString("file.max"), file_max, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((request_max != nullptr) && (request_max->isSet())){
        toJsonValue(QString("request.max"), request_max, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((sling_default_parameter_check_for_additional_container_parameters != nullptr) && (sling_default_parameter_check_for_additional_container_parameters->isSet())){
        toJsonValue(QString("sling.default.parameter.checkForAdditionalContainerParameters"), sling_default_parameter_check_for_additional_container_parameters, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingEngineParametersProperties::getSlingDefaultParameterEncoding() {
    return sling_default_parameter_encoding;
}
void
OAIOrgApacheSlingEngineParametersProperties::setSlingDefaultParameterEncoding(OAIConfigNodePropertyString* sling_default_parameter_encoding) {
    this->sling_default_parameter_encoding = sling_default_parameter_encoding;
    this->m_sling_default_parameter_encoding_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingEngineParametersProperties::getSlingDefaultMaxParameters() {
    return sling_default_max_parameters;
}
void
OAIOrgApacheSlingEngineParametersProperties::setSlingDefaultMaxParameters(OAIConfigNodePropertyInteger* sling_default_max_parameters) {
    this->sling_default_max_parameters = sling_default_max_parameters;
    this->m_sling_default_max_parameters_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingEngineParametersProperties::getFileLocation() {
    return file_location;
}
void
OAIOrgApacheSlingEngineParametersProperties::setFileLocation(OAIConfigNodePropertyString* file_location) {
    this->file_location = file_location;
    this->m_file_location_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingEngineParametersProperties::getFileThreshold() {
    return file_threshold;
}
void
OAIOrgApacheSlingEngineParametersProperties::setFileThreshold(OAIConfigNodePropertyInteger* file_threshold) {
    this->file_threshold = file_threshold;
    this->m_file_threshold_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingEngineParametersProperties::getFileMax() {
    return file_max;
}
void
OAIOrgApacheSlingEngineParametersProperties::setFileMax(OAIConfigNodePropertyInteger* file_max) {
    this->file_max = file_max;
    this->m_file_max_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingEngineParametersProperties::getRequestMax() {
    return request_max;
}
void
OAIOrgApacheSlingEngineParametersProperties::setRequestMax(OAIConfigNodePropertyInteger* request_max) {
    this->request_max = request_max;
    this->m_request_max_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingEngineParametersProperties::getSlingDefaultParameterCheckForAdditionalContainerParameters() {
    return sling_default_parameter_check_for_additional_container_parameters;
}
void
OAIOrgApacheSlingEngineParametersProperties::setSlingDefaultParameterCheckForAdditionalContainerParameters(OAIConfigNodePropertyBoolean* sling_default_parameter_check_for_additional_container_parameters) {
    this->sling_default_parameter_check_for_additional_container_parameters = sling_default_parameter_check_for_additional_container_parameters;
    this->m_sling_default_parameter_check_for_additional_container_parameters_isSet = true;
}


bool
OAIOrgApacheSlingEngineParametersProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(sling_default_parameter_encoding != nullptr && sling_default_parameter_encoding->isSet()){ isObjectUpdated = true; break;}
        if(sling_default_max_parameters != nullptr && sling_default_max_parameters->isSet()){ isObjectUpdated = true; break;}
        if(file_location != nullptr && file_location->isSet()){ isObjectUpdated = true; break;}
        if(file_threshold != nullptr && file_threshold->isSet()){ isObjectUpdated = true; break;}
        if(file_max != nullptr && file_max->isSet()){ isObjectUpdated = true; break;}
        if(request_max != nullptr && request_max->isSet()){ isObjectUpdated = true; break;}
        if(sling_default_parameter_check_for_additional_container_parameters != nullptr && sling_default_parameter_check_for_additional_container_parameters->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

