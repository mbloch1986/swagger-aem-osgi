/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheFelixEventadminImplEventAdminProperties : IEquatable<OrgApacheFelixEventadminImplEventAdminProperties>
    { 
        /// <summary>
        /// Gets or Sets OrgApacheFelixEventadminThreadPoolSize
        /// </summary>
        [DataMember(Name="org.apache.felix.eventadmin.ThreadPoolSize")]
        public ConfigNodePropertyInteger OrgApacheFelixEventadminThreadPoolSize { get; set; }

        /// <summary>
        /// Gets or Sets OrgApacheFelixEventadminAsyncToSyncThreadRatio
        /// </summary>
        [DataMember(Name="org.apache.felix.eventadmin.AsyncToSyncThreadRatio")]
        public ConfigNodePropertyFloat OrgApacheFelixEventadminAsyncToSyncThreadRatio { get; set; }

        /// <summary>
        /// Gets or Sets OrgApacheFelixEventadminTimeout
        /// </summary>
        [DataMember(Name="org.apache.felix.eventadmin.Timeout")]
        public ConfigNodePropertyInteger OrgApacheFelixEventadminTimeout { get; set; }

        /// <summary>
        /// Gets or Sets OrgApacheFelixEventadminRequireTopic
        /// </summary>
        [DataMember(Name="org.apache.felix.eventadmin.RequireTopic")]
        public ConfigNodePropertyBoolean OrgApacheFelixEventadminRequireTopic { get; set; }

        /// <summary>
        /// Gets or Sets OrgApacheFelixEventadminIgnoreTimeout
        /// </summary>
        [DataMember(Name="org.apache.felix.eventadmin.IgnoreTimeout")]
        public ConfigNodePropertyArray OrgApacheFelixEventadminIgnoreTimeout { get; set; }

        /// <summary>
        /// Gets or Sets OrgApacheFelixEventadminIgnoreTopic
        /// </summary>
        [DataMember(Name="org.apache.felix.eventadmin.IgnoreTopic")]
        public ConfigNodePropertyArray OrgApacheFelixEventadminIgnoreTopic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheFelixEventadminImplEventAdminProperties {\n");
            sb.Append("  OrgApacheFelixEventadminThreadPoolSize: ").Append(OrgApacheFelixEventadminThreadPoolSize).Append("\n");
            sb.Append("  OrgApacheFelixEventadminAsyncToSyncThreadRatio: ").Append(OrgApacheFelixEventadminAsyncToSyncThreadRatio).Append("\n");
            sb.Append("  OrgApacheFelixEventadminTimeout: ").Append(OrgApacheFelixEventadminTimeout).Append("\n");
            sb.Append("  OrgApacheFelixEventadminRequireTopic: ").Append(OrgApacheFelixEventadminRequireTopic).Append("\n");
            sb.Append("  OrgApacheFelixEventadminIgnoreTimeout: ").Append(OrgApacheFelixEventadminIgnoreTimeout).Append("\n");
            sb.Append("  OrgApacheFelixEventadminIgnoreTopic: ").Append(OrgApacheFelixEventadminIgnoreTopic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheFelixEventadminImplEventAdminProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheFelixEventadminImplEventAdminProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheFelixEventadminImplEventAdminProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheFelixEventadminImplEventAdminProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OrgApacheFelixEventadminThreadPoolSize == other.OrgApacheFelixEventadminThreadPoolSize ||
                    OrgApacheFelixEventadminThreadPoolSize != null &&
                    OrgApacheFelixEventadminThreadPoolSize.Equals(other.OrgApacheFelixEventadminThreadPoolSize)
                ) && 
                (
                    OrgApacheFelixEventadminAsyncToSyncThreadRatio == other.OrgApacheFelixEventadminAsyncToSyncThreadRatio ||
                    OrgApacheFelixEventadminAsyncToSyncThreadRatio != null &&
                    OrgApacheFelixEventadminAsyncToSyncThreadRatio.Equals(other.OrgApacheFelixEventadminAsyncToSyncThreadRatio)
                ) && 
                (
                    OrgApacheFelixEventadminTimeout == other.OrgApacheFelixEventadminTimeout ||
                    OrgApacheFelixEventadminTimeout != null &&
                    OrgApacheFelixEventadminTimeout.Equals(other.OrgApacheFelixEventadminTimeout)
                ) && 
                (
                    OrgApacheFelixEventadminRequireTopic == other.OrgApacheFelixEventadminRequireTopic ||
                    OrgApacheFelixEventadminRequireTopic != null &&
                    OrgApacheFelixEventadminRequireTopic.Equals(other.OrgApacheFelixEventadminRequireTopic)
                ) && 
                (
                    OrgApacheFelixEventadminIgnoreTimeout == other.OrgApacheFelixEventadminIgnoreTimeout ||
                    OrgApacheFelixEventadminIgnoreTimeout != null &&
                    OrgApacheFelixEventadminIgnoreTimeout.Equals(other.OrgApacheFelixEventadminIgnoreTimeout)
                ) && 
                (
                    OrgApacheFelixEventadminIgnoreTopic == other.OrgApacheFelixEventadminIgnoreTopic ||
                    OrgApacheFelixEventadminIgnoreTopic != null &&
                    OrgApacheFelixEventadminIgnoreTopic.Equals(other.OrgApacheFelixEventadminIgnoreTopic)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OrgApacheFelixEventadminThreadPoolSize != null)
                    hashCode = hashCode * 59 + OrgApacheFelixEventadminThreadPoolSize.GetHashCode();
                    if (OrgApacheFelixEventadminAsyncToSyncThreadRatio != null)
                    hashCode = hashCode * 59 + OrgApacheFelixEventadminAsyncToSyncThreadRatio.GetHashCode();
                    if (OrgApacheFelixEventadminTimeout != null)
                    hashCode = hashCode * 59 + OrgApacheFelixEventadminTimeout.GetHashCode();
                    if (OrgApacheFelixEventadminRequireTopic != null)
                    hashCode = hashCode * 59 + OrgApacheFelixEventadminRequireTopic.GetHashCode();
                    if (OrgApacheFelixEventadminIgnoreTimeout != null)
                    hashCode = hashCode * 59 + OrgApacheFelixEventadminIgnoreTimeout.GetHashCode();
                    if (OrgApacheFelixEventadminIgnoreTopic != null)
                    hashCode = hashCode * 59 + OrgApacheFelixEventadminIgnoreTopic.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheFelixEventadminImplEventAdminProperties left, OrgApacheFelixEventadminImplEventAdminProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheFelixEventadminImplEventAdminProperties left, OrgApacheFelixEventadminImplEventAdminProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
