/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWidgetImplWidgetExtensionProviderImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWidgetImplWidgetExtensionProviderImplProperties::OAIComDayCqWidgetImplWidgetExtensionProviderImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqWidgetImplWidgetExtensionProviderImplProperties::OAIComDayCqWidgetImplWidgetExtensionProviderImplProperties() {
    init();
}

OAIComDayCqWidgetImplWidgetExtensionProviderImplProperties::~OAIComDayCqWidgetImplWidgetExtensionProviderImplProperties() {
    this->cleanup();
}

void
OAIComDayCqWidgetImplWidgetExtensionProviderImplProperties::init() {
    extendable_widgets = new OAIConfigNodePropertyArray();
    m_extendable_widgets_isSet = false;
    widgetextensionprovider_debug = new OAIConfigNodePropertyBoolean();
    m_widgetextensionprovider_debug_isSet = false;
}

void
OAIComDayCqWidgetImplWidgetExtensionProviderImplProperties::cleanup() {
    if(extendable_widgets != nullptr) { 
        delete extendable_widgets;
    }
    if(widgetextensionprovider_debug != nullptr) { 
        delete widgetextensionprovider_debug;
    }
}

OAIComDayCqWidgetImplWidgetExtensionProviderImplProperties*
OAIComDayCqWidgetImplWidgetExtensionProviderImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqWidgetImplWidgetExtensionProviderImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&extendable_widgets, pJson["extendable.widgets"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&widgetextensionprovider_debug, pJson["widgetextensionprovider.debug"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComDayCqWidgetImplWidgetExtensionProviderImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWidgetImplWidgetExtensionProviderImplProperties::asJsonObject() {
    QJsonObject obj;
    if((extendable_widgets != nullptr) && (extendable_widgets->isSet())){
        toJsonValue(QString("extendable.widgets"), extendable_widgets, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((widgetextensionprovider_debug != nullptr) && (widgetextensionprovider_debug->isSet())){
        toJsonValue(QString("widgetextensionprovider.debug"), widgetextensionprovider_debug, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComDayCqWidgetImplWidgetExtensionProviderImplProperties::getExtendableWidgets() {
    return extendable_widgets;
}
void
OAIComDayCqWidgetImplWidgetExtensionProviderImplProperties::setExtendableWidgets(OAIConfigNodePropertyArray* extendable_widgets) {
    this->extendable_widgets = extendable_widgets;
    this->m_extendable_widgets_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqWidgetImplWidgetExtensionProviderImplProperties::getWidgetextensionproviderDebug() {
    return widgetextensionprovider_debug;
}
void
OAIComDayCqWidgetImplWidgetExtensionProviderImplProperties::setWidgetextensionproviderDebug(OAIConfigNodePropertyBoolean* widgetextensionprovider_debug) {
    this->widgetextensionprovider_debug = widgetextensionprovider_debug;
    this->m_widgetextensionprovider_debug_isSet = true;
}


bool
OAIComDayCqWidgetImplWidgetExtensionProviderImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(extendable_widgets != nullptr && extendable_widgets->isSet()){ isObjectUpdated = true; break;}
        if(widgetextensionprovider_debug != nullptr && widgetextensionprovider_debug->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

