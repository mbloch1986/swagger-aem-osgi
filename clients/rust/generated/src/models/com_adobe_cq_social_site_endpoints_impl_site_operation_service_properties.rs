/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties {
  #[serde(rename = "fieldWhitelist")]
  field_whitelist: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "sitePathFilters")]
  site_path_filters: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "sitePackageGroup")]
  site_package_group: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties {
  pub fn new() -> ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties {
    ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties {
      field_whitelist: None,
      site_path_filters: None,
      site_package_group: None
    }
  }

  pub fn set_field_whitelist(&mut self, field_whitelist: ::models::ConfigNodePropertyArray) {
    self.field_whitelist = Some(field_whitelist);
  }

  pub fn with_field_whitelist(mut self, field_whitelist: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties {
    self.field_whitelist = Some(field_whitelist);
    self
  }

  pub fn field_whitelist(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.field_whitelist.as_ref()
  }

  pub fn reset_field_whitelist(&mut self) {
    self.field_whitelist = None;
  }

  pub fn set_site_path_filters(&mut self, site_path_filters: ::models::ConfigNodePropertyArray) {
    self.site_path_filters = Some(site_path_filters);
  }

  pub fn with_site_path_filters(mut self, site_path_filters: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties {
    self.site_path_filters = Some(site_path_filters);
    self
  }

  pub fn site_path_filters(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.site_path_filters.as_ref()
  }

  pub fn reset_site_path_filters(&mut self) {
    self.site_path_filters = None;
  }

  pub fn set_site_package_group(&mut self, site_package_group: ::models::ConfigNodePropertyString) {
    self.site_package_group = Some(site_package_group);
  }

  pub fn with_site_package_group(mut self, site_package_group: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties {
    self.site_package_group = Some(site_package_group);
    self
  }

  pub fn site_package_group(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.site_package_group.as_ref()
  }

  pub fn reset_site_package_group(&mut self) {
    self.site_package_group = None;
  }

}



