# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.config_node_property_array import ConfigNodePropertyArray  # noqa: F401,E501
from openapi_server import util


class ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pseudo_patterns: ConfigNodePropertyArray=None):  # noqa: E501
        """ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties - a model defined in OpenAPI

        :param pseudo_patterns: The pseudo_patterns of this ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties.  # noqa: E501
        :type pseudo_patterns: ConfigNodePropertyArray
        """
        self.openapi_types = {
            'pseudo_patterns': ConfigNodePropertyArray
        }

        self.attribute_map = {
            'pseudo_patterns': 'pseudo.patterns'
        }

        self._pseudo_patterns = pseudo_patterns

    @classmethod
    def from_dict(cls, dikt) -> 'ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The comAdobeGraniteI18nImplBundlePseudoTranslationsProperties of this ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties.  # noqa: E501
        :rtype: ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pseudo_patterns(self) -> ConfigNodePropertyArray:
        """Gets the pseudo_patterns of this ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties.


        :return: The pseudo_patterns of this ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties.
        :rtype: ConfigNodePropertyArray
        """
        return self._pseudo_patterns

    @pseudo_patterns.setter
    def pseudo_patterns(self, pseudo_patterns: ConfigNodePropertyArray):
        """Sets the pseudo_patterns of this ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties.


        :param pseudo_patterns: The pseudo_patterns of this ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties.
        :type pseudo_patterns: ConfigNodePropertyArray
        """

        self._pseudo_patterns = pseudo_patterns
