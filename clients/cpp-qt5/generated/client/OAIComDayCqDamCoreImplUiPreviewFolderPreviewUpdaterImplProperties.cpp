/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties() {
    init();
}

OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::~OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties() {
    this->cleanup();
}

void
OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::init() {
    create_preview_enabled = new OAIConfigNodePropertyBoolean();
    m_create_preview_enabled_isSet = false;
    update_preview_enabled = new OAIConfigNodePropertyBoolean();
    m_update_preview_enabled_isSet = false;
    queue_size = new OAIConfigNodePropertyInteger();
    m_queue_size_isSet = false;
    folder_preview_rendition_regex = new OAIConfigNodePropertyString();
    m_folder_preview_rendition_regex_isSet = false;
}

void
OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::cleanup() {
    if(create_preview_enabled != nullptr) { 
        delete create_preview_enabled;
    }
    if(update_preview_enabled != nullptr) { 
        delete update_preview_enabled;
    }
    if(queue_size != nullptr) { 
        delete queue_size;
    }
    if(folder_preview_rendition_regex != nullptr) { 
        delete folder_preview_rendition_regex;
    }
}

OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties*
OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&create_preview_enabled, pJson["createPreviewEnabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&update_preview_enabled, pJson["updatePreviewEnabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&queue_size, pJson["queueSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&folder_preview_rendition_regex, pJson["folderPreviewRenditionRegex"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::asJsonObject() {
    QJsonObject obj;
    if((create_preview_enabled != nullptr) && (create_preview_enabled->isSet())){
        toJsonValue(QString("createPreviewEnabled"), create_preview_enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((update_preview_enabled != nullptr) && (update_preview_enabled->isSet())){
        toJsonValue(QString("updatePreviewEnabled"), update_preview_enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((queue_size != nullptr) && (queue_size->isSet())){
        toJsonValue(QString("queueSize"), queue_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((folder_preview_rendition_regex != nullptr) && (folder_preview_rendition_regex->isSet())){
        toJsonValue(QString("folderPreviewRenditionRegex"), folder_preview_rendition_regex, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::getCreatePreviewEnabled() {
    return create_preview_enabled;
}
void
OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::setCreatePreviewEnabled(OAIConfigNodePropertyBoolean* create_preview_enabled) {
    this->create_preview_enabled = create_preview_enabled;
    this->m_create_preview_enabled_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::getUpdatePreviewEnabled() {
    return update_preview_enabled;
}
void
OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::setUpdatePreviewEnabled(OAIConfigNodePropertyBoolean* update_preview_enabled) {
    this->update_preview_enabled = update_preview_enabled;
    this->m_update_preview_enabled_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::getQueueSize() {
    return queue_size;
}
void
OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::setQueueSize(OAIConfigNodePropertyInteger* queue_size) {
    this->queue_size = queue_size;
    this->m_queue_size_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::getFolderPreviewRenditionRegex() {
    return folder_preview_rendition_regex;
}
void
OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::setFolderPreviewRenditionRegex(OAIConfigNodePropertyString* folder_preview_rendition_regex) {
    this->folder_preview_rendition_regex = folder_preview_rendition_regex;
    this->m_folder_preview_rendition_regex_isSet = true;
}


bool
OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(create_preview_enabled != nullptr && create_preview_enabled->isSet()){ isObjectUpdated = true; break;}
        if(update_preview_enabled != nullptr && update_preview_enabled->isSet()){ isObjectUpdated = true; break;}
        if(queue_size != nullptr && queue_size->isSet()){ isObjectUpdated = true; break;}
        if(folder_preview_rendition_regex != nullptr && folder_preview_rendition_regex->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

