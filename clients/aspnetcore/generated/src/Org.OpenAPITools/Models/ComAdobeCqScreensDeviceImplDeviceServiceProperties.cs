/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqScreensDeviceImplDeviceServiceProperties : IEquatable<ComAdobeCqScreensDeviceImplDeviceServiceProperties>
    { 
        /// <summary>
        /// Gets or Sets ComAdobeAemScreensPlayerPingfrequency
        /// </summary>
        [DataMember(Name="com.adobe.aem.screens.player.pingfrequency")]
        public ConfigNodePropertyInteger ComAdobeAemScreensPlayerPingfrequency { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeAemScreensDevicePaswordSpecialchars
        /// </summary>
        [DataMember(Name="com.adobe.aem.screens.device.pasword.specialchars")]
        public ConfigNodePropertyString ComAdobeAemScreensDevicePaswordSpecialchars { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeAemScreensDevicePaswordMinlowercasechars
        /// </summary>
        [DataMember(Name="com.adobe.aem.screens.device.pasword.minlowercasechars")]
        public ConfigNodePropertyInteger ComAdobeAemScreensDevicePaswordMinlowercasechars { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeAemScreensDevicePaswordMinuppercasechars
        /// </summary>
        [DataMember(Name="com.adobe.aem.screens.device.pasword.minuppercasechars")]
        public ConfigNodePropertyInteger ComAdobeAemScreensDevicePaswordMinuppercasechars { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeAemScreensDevicePaswordMinnumberchars
        /// </summary>
        [DataMember(Name="com.adobe.aem.screens.device.pasword.minnumberchars")]
        public ConfigNodePropertyInteger ComAdobeAemScreensDevicePaswordMinnumberchars { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeAemScreensDevicePaswordMinspecialchars
        /// </summary>
        [DataMember(Name="com.adobe.aem.screens.device.pasword.minspecialchars")]
        public ConfigNodePropertyInteger ComAdobeAemScreensDevicePaswordMinspecialchars { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeAemScreensDevicePaswordMinlength
        /// </summary>
        [DataMember(Name="com.adobe.aem.screens.device.pasword.minlength")]
        public ConfigNodePropertyInteger ComAdobeAemScreensDevicePaswordMinlength { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqScreensDeviceImplDeviceServiceProperties {\n");
            sb.Append("  ComAdobeAemScreensPlayerPingfrequency: ").Append(ComAdobeAemScreensPlayerPingfrequency).Append("\n");
            sb.Append("  ComAdobeAemScreensDevicePaswordSpecialchars: ").Append(ComAdobeAemScreensDevicePaswordSpecialchars).Append("\n");
            sb.Append("  ComAdobeAemScreensDevicePaswordMinlowercasechars: ").Append(ComAdobeAemScreensDevicePaswordMinlowercasechars).Append("\n");
            sb.Append("  ComAdobeAemScreensDevicePaswordMinuppercasechars: ").Append(ComAdobeAemScreensDevicePaswordMinuppercasechars).Append("\n");
            sb.Append("  ComAdobeAemScreensDevicePaswordMinnumberchars: ").Append(ComAdobeAemScreensDevicePaswordMinnumberchars).Append("\n");
            sb.Append("  ComAdobeAemScreensDevicePaswordMinspecialchars: ").Append(ComAdobeAemScreensDevicePaswordMinspecialchars).Append("\n");
            sb.Append("  ComAdobeAemScreensDevicePaswordMinlength: ").Append(ComAdobeAemScreensDevicePaswordMinlength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeCqScreensDeviceImplDeviceServiceProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeCqScreensDeviceImplDeviceServiceProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeCqScreensDeviceImplDeviceServiceProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqScreensDeviceImplDeviceServiceProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ComAdobeAemScreensPlayerPingfrequency == other.ComAdobeAemScreensPlayerPingfrequency ||
                    ComAdobeAemScreensPlayerPingfrequency != null &&
                    ComAdobeAemScreensPlayerPingfrequency.Equals(other.ComAdobeAemScreensPlayerPingfrequency)
                ) && 
                (
                    ComAdobeAemScreensDevicePaswordSpecialchars == other.ComAdobeAemScreensDevicePaswordSpecialchars ||
                    ComAdobeAemScreensDevicePaswordSpecialchars != null &&
                    ComAdobeAemScreensDevicePaswordSpecialchars.Equals(other.ComAdobeAemScreensDevicePaswordSpecialchars)
                ) && 
                (
                    ComAdobeAemScreensDevicePaswordMinlowercasechars == other.ComAdobeAemScreensDevicePaswordMinlowercasechars ||
                    ComAdobeAemScreensDevicePaswordMinlowercasechars != null &&
                    ComAdobeAemScreensDevicePaswordMinlowercasechars.Equals(other.ComAdobeAemScreensDevicePaswordMinlowercasechars)
                ) && 
                (
                    ComAdobeAemScreensDevicePaswordMinuppercasechars == other.ComAdobeAemScreensDevicePaswordMinuppercasechars ||
                    ComAdobeAemScreensDevicePaswordMinuppercasechars != null &&
                    ComAdobeAemScreensDevicePaswordMinuppercasechars.Equals(other.ComAdobeAemScreensDevicePaswordMinuppercasechars)
                ) && 
                (
                    ComAdobeAemScreensDevicePaswordMinnumberchars == other.ComAdobeAemScreensDevicePaswordMinnumberchars ||
                    ComAdobeAemScreensDevicePaswordMinnumberchars != null &&
                    ComAdobeAemScreensDevicePaswordMinnumberchars.Equals(other.ComAdobeAemScreensDevicePaswordMinnumberchars)
                ) && 
                (
                    ComAdobeAemScreensDevicePaswordMinspecialchars == other.ComAdobeAemScreensDevicePaswordMinspecialchars ||
                    ComAdobeAemScreensDevicePaswordMinspecialchars != null &&
                    ComAdobeAemScreensDevicePaswordMinspecialchars.Equals(other.ComAdobeAemScreensDevicePaswordMinspecialchars)
                ) && 
                (
                    ComAdobeAemScreensDevicePaswordMinlength == other.ComAdobeAemScreensDevicePaswordMinlength ||
                    ComAdobeAemScreensDevicePaswordMinlength != null &&
                    ComAdobeAemScreensDevicePaswordMinlength.Equals(other.ComAdobeAemScreensDevicePaswordMinlength)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ComAdobeAemScreensPlayerPingfrequency != null)
                    hashCode = hashCode * 59 + ComAdobeAemScreensPlayerPingfrequency.GetHashCode();
                    if (ComAdobeAemScreensDevicePaswordSpecialchars != null)
                    hashCode = hashCode * 59 + ComAdobeAemScreensDevicePaswordSpecialchars.GetHashCode();
                    if (ComAdobeAemScreensDevicePaswordMinlowercasechars != null)
                    hashCode = hashCode * 59 + ComAdobeAemScreensDevicePaswordMinlowercasechars.GetHashCode();
                    if (ComAdobeAemScreensDevicePaswordMinuppercasechars != null)
                    hashCode = hashCode * 59 + ComAdobeAemScreensDevicePaswordMinuppercasechars.GetHashCode();
                    if (ComAdobeAemScreensDevicePaswordMinnumberchars != null)
                    hashCode = hashCode * 59 + ComAdobeAemScreensDevicePaswordMinnumberchars.GetHashCode();
                    if (ComAdobeAemScreensDevicePaswordMinspecialchars != null)
                    hashCode = hashCode * 59 + ComAdobeAemScreensDevicePaswordMinspecialchars.GetHashCode();
                    if (ComAdobeAemScreensDevicePaswordMinlength != null)
                    hashCode = hashCode * 59 + ComAdobeAemScreensDevicePaswordMinlength.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeCqScreensDeviceImplDeviceServiceProperties left, ComAdobeCqScreensDeviceImplDeviceServiceProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeCqScreensDeviceImplDeviceServiceProperties left, ComAdobeCqScreensDeviceImplDeviceServiceProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
