/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteMonitoringImplScriptConfigImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteMonitoringImplScriptConfigImplProperties::ComAdobeGraniteMonitoringImplScriptConfigImplProperties()
{
    m_Script_filenameIsSet = false;
    m_Script_displayIsSet = false;
    m_Script_pathIsSet = false;
    m_Script_platformIsSet = false;
    m_IntervalIsSet = false;
    m_JmxdomainIsSet = false;
}

ComAdobeGraniteMonitoringImplScriptConfigImplProperties::~ComAdobeGraniteMonitoringImplScriptConfigImplProperties()
{
}

void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteMonitoringImplScriptConfigImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Script_filenameIsSet)
    {
        val[utility::conversions::to_string_t("script.filename")] = ModelBase::toJson(m_Script_filename);
    }
    if(m_Script_displayIsSet)
    {
        val[utility::conversions::to_string_t("script.display")] = ModelBase::toJson(m_Script_display);
    }
    if(m_Script_pathIsSet)
    {
        val[utility::conversions::to_string_t("script.path")] = ModelBase::toJson(m_Script_path);
    }
    if(m_Script_platformIsSet)
    {
        val[utility::conversions::to_string_t("script.platform")] = ModelBase::toJson(m_Script_platform);
    }
    if(m_IntervalIsSet)
    {
        val[utility::conversions::to_string_t("interval")] = ModelBase::toJson(m_Interval);
    }
    if(m_JmxdomainIsSet)
    {
        val[utility::conversions::to_string_t("jmxdomain")] = ModelBase::toJson(m_Jmxdomain);
    }

    return val;
}

void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("script.filename")))
    {
        if(!val[utility::conversions::to_string_t("script.filename")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("script.filename")]);
            setScriptFilename( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("script.display")))
    {
        if(!val[utility::conversions::to_string_t("script.display")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("script.display")]);
            setScriptDisplay( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("script.path")))
    {
        if(!val[utility::conversions::to_string_t("script.path")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("script.path")]);
            setScriptPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("script.platform")))
    {
        if(!val[utility::conversions::to_string_t("script.platform")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("script.platform")]);
            setScriptPlatform( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("interval")))
    {
        if(!val[utility::conversions::to_string_t("interval")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("interval")]);
            setInterval( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("jmxdomain")))
    {
        if(!val[utility::conversions::to_string_t("jmxdomain")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("jmxdomain")]);
            setJmxdomain( newItem );
        }
    }
}

void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Script_filenameIsSet)
    {
        if (m_Script_filename.get())
        {
            m_Script_filename->toMultipart(multipart, utility::conversions::to_string_t("script.filename."));
        }
    }
    if(m_Script_displayIsSet)
    {
        if (m_Script_display.get())
        {
            m_Script_display->toMultipart(multipart, utility::conversions::to_string_t("script.display."));
        }
    }
    if(m_Script_pathIsSet)
    {
        if (m_Script_path.get())
        {
            m_Script_path->toMultipart(multipart, utility::conversions::to_string_t("script.path."));
        }
    }
    if(m_Script_platformIsSet)
    {
        if (m_Script_platform.get())
        {
            m_Script_platform->toMultipart(multipart, utility::conversions::to_string_t("script.platform."));
        }
    }
    if(m_IntervalIsSet)
    {
        if (m_Interval.get())
        {
            m_Interval->toMultipart(multipart, utility::conversions::to_string_t("interval."));
        }
    }
    if(m_JmxdomainIsSet)
    {
        if (m_Jmxdomain.get())
        {
            m_Jmxdomain->toMultipart(multipart, utility::conversions::to_string_t("jmxdomain."));
        }
    }
}

void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("script.filename")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("script.filename")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("script.filename."));
            setScriptFilename( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("script.display")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("script.display")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("script.display."));
            setScriptDisplay( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("script.path")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("script.path")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("script.path."));
            setScriptPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("script.platform")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("script.platform")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("script.platform."));
            setScriptPlatform( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("interval")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("interval")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("interval."));
            setInterval( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jmxdomain")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("jmxdomain")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("jmxdomain."));
            setJmxdomain( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteMonitoringImplScriptConfigImplProperties::getScriptFilename() const
{
    return m_Script_filename;
}


void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::setScriptFilename(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Script_filename = value;
    m_Script_filenameIsSet = true;
}
bool ComAdobeGraniteMonitoringImplScriptConfigImplProperties::scriptFilenameIsSet() const
{
    return m_Script_filenameIsSet;
}

void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::unsetScript_filename()
{
    m_Script_filenameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteMonitoringImplScriptConfigImplProperties::getScriptDisplay() const
{
    return m_Script_display;
}


void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::setScriptDisplay(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Script_display = value;
    m_Script_displayIsSet = true;
}
bool ComAdobeGraniteMonitoringImplScriptConfigImplProperties::scriptDisplayIsSet() const
{
    return m_Script_displayIsSet;
}

void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::unsetScript_display()
{
    m_Script_displayIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteMonitoringImplScriptConfigImplProperties::getScriptPath() const
{
    return m_Script_path;
}


void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::setScriptPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Script_path = value;
    m_Script_pathIsSet = true;
}
bool ComAdobeGraniteMonitoringImplScriptConfigImplProperties::scriptPathIsSet() const
{
    return m_Script_pathIsSet;
}

void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::unsetScript_path()
{
    m_Script_pathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteMonitoringImplScriptConfigImplProperties::getScriptPlatform() const
{
    return m_Script_platform;
}


void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::setScriptPlatform(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Script_platform = value;
    m_Script_platformIsSet = true;
}
bool ComAdobeGraniteMonitoringImplScriptConfigImplProperties::scriptPlatformIsSet() const
{
    return m_Script_platformIsSet;
}

void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::unsetScript_platform()
{
    m_Script_platformIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteMonitoringImplScriptConfigImplProperties::getInterval() const
{
    return m_Interval;
}


void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::setInterval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Interval = value;
    m_IntervalIsSet = true;
}
bool ComAdobeGraniteMonitoringImplScriptConfigImplProperties::intervalIsSet() const
{
    return m_IntervalIsSet;
}

void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::unsetInterval()
{
    m_IntervalIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteMonitoringImplScriptConfigImplProperties::getJmxdomain() const
{
    return m_Jmxdomain;
}


void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::setJmxdomain(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Jmxdomain = value;
    m_JmxdomainIsSet = true;
}
bool ComAdobeGraniteMonitoringImplScriptConfigImplProperties::jmxdomainIsSet() const
{
    return m_JmxdomainIsSet;
}

void ComAdobeGraniteMonitoringImplScriptConfigImplProperties::unsetJmxdomain()
{
    m_JmxdomainIsSet = false;
}

}
}
}
}

