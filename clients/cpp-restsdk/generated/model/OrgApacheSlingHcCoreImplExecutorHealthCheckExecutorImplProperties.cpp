/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties::OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties()
{
    m_TimeoutInMsIsSet = false;
    m_LongRunningFutureThresholdForCriticalMsIsSet = false;
    m_ResultCacheTtlInMsIsSet = false;
}

OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties::~OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties()
{
}

void OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_TimeoutInMsIsSet)
    {
        val[utility::conversions::to_string_t("timeoutInMs")] = ModelBase::toJson(m_TimeoutInMs);
    }
    if(m_LongRunningFutureThresholdForCriticalMsIsSet)
    {
        val[utility::conversions::to_string_t("longRunningFutureThresholdForCriticalMs")] = ModelBase::toJson(m_LongRunningFutureThresholdForCriticalMs);
    }
    if(m_ResultCacheTtlInMsIsSet)
    {
        val[utility::conversions::to_string_t("resultCacheTtlInMs")] = ModelBase::toJson(m_ResultCacheTtlInMs);
    }

    return val;
}

void OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("timeoutInMs")))
    {
        if(!val[utility::conversions::to_string_t("timeoutInMs")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("timeoutInMs")]);
            setTimeoutInMs( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("longRunningFutureThresholdForCriticalMs")))
    {
        if(!val[utility::conversions::to_string_t("longRunningFutureThresholdForCriticalMs")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("longRunningFutureThresholdForCriticalMs")]);
            setLongRunningFutureThresholdForCriticalMs( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resultCacheTtlInMs")))
    {
        if(!val[utility::conversions::to_string_t("resultCacheTtlInMs")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("resultCacheTtlInMs")]);
            setResultCacheTtlInMs( newItem );
        }
    }
}

void OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_TimeoutInMsIsSet)
    {
        if (m_TimeoutInMs.get())
        {
            m_TimeoutInMs->toMultipart(multipart, utility::conversions::to_string_t("timeoutInMs."));
        }
    }
    if(m_LongRunningFutureThresholdForCriticalMsIsSet)
    {
        if (m_LongRunningFutureThresholdForCriticalMs.get())
        {
            m_LongRunningFutureThresholdForCriticalMs->toMultipart(multipart, utility::conversions::to_string_t("longRunningFutureThresholdForCriticalMs."));
        }
    }
    if(m_ResultCacheTtlInMsIsSet)
    {
        if (m_ResultCacheTtlInMs.get())
        {
            m_ResultCacheTtlInMs->toMultipart(multipart, utility::conversions::to_string_t("resultCacheTtlInMs."));
        }
    }
}

void OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("timeoutInMs")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("timeoutInMs")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("timeoutInMs."));
            setTimeoutInMs( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("longRunningFutureThresholdForCriticalMs")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("longRunningFutureThresholdForCriticalMs")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("longRunningFutureThresholdForCriticalMs."));
            setLongRunningFutureThresholdForCriticalMs( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resultCacheTtlInMs")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("resultCacheTtlInMs")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("resultCacheTtlInMs."));
            setResultCacheTtlInMs( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties::getTimeoutInMs() const
{
    return m_TimeoutInMs;
}


void OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties::setTimeoutInMs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_TimeoutInMs = value;
    m_TimeoutInMsIsSet = true;
}
bool OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties::timeoutInMsIsSet() const
{
    return m_TimeoutInMsIsSet;
}

void OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties::unsetTimeoutInMs()
{
    m_TimeoutInMsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties::getLongRunningFutureThresholdForCriticalMs() const
{
    return m_LongRunningFutureThresholdForCriticalMs;
}


void OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties::setLongRunningFutureThresholdForCriticalMs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_LongRunningFutureThresholdForCriticalMs = value;
    m_LongRunningFutureThresholdForCriticalMsIsSet = true;
}
bool OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties::longRunningFutureThresholdForCriticalMsIsSet() const
{
    return m_LongRunningFutureThresholdForCriticalMsIsSet;
}

void OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties::unsetLongRunningFutureThresholdForCriticalMs()
{
    m_LongRunningFutureThresholdForCriticalMsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties::getResultCacheTtlInMs() const
{
    return m_ResultCacheTtlInMs;
}


void OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties::setResultCacheTtlInMs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ResultCacheTtlInMs = value;
    m_ResultCacheTtlInMsIsSet = true;
}
bool OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties::resultCacheTtlInMsIsSet() const
{
    return m_ResultCacheTtlInMsIsSet;
}

void OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties::unsetResultCacheTtlInMs()
{
    m_ResultCacheTtlInMsIsSet = false;
}

}
}
}
}

