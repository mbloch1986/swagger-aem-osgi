/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheSlingDiscoveryOakConfigProperties.h
 *
 * 
 */

#ifndef OrgApacheSlingDiscoveryOakConfigProperties_H_
#define OrgApacheSlingDiscoveryOakConfigProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingDiscoveryOakConfigProperties
{
public:
    OrgApacheSlingDiscoveryOakConfigProperties();
    virtual ~OrgApacheSlingDiscoveryOakConfigProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// OrgApacheSlingDiscoveryOakConfigProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getConnectorPingTimeout() const;
    void setConnectorPingTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getConnectorPingInterval() const;
    void setConnectorPingInterval(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getDiscoveryLiteCheckInterval() const;
    void setDiscoveryLiteCheckInterval(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterSyncServiceTimeout() const;
    void setClusterSyncServiceTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterSyncServiceInterval() const;
    void setClusterSyncServiceInterval(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnableSyncToken() const;
    void setEnableSyncToken(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMinEventDelay() const;
    void setMinEventDelay(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getSocketConnectTimeout() const;
    void setSocketConnectTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getSoTimeout() const;
    void setSoTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getTopologyConnectorUrls() const;
    void setTopologyConnectorUrls(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getTopologyConnectorWhitelist() const;
    void setTopologyConnectorWhitelist(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getAutoStopLocalLoopEnabled() const;
    void setAutoStopLocalLoopEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getGzipConnectorRequestsEnabled() const;
    void setGzipConnectorRequestsEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getHmacEnabled() const;
    void setHmacEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnableEncryption() const;
    void setEnableEncryption(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSharedKey() const;
    void setSharedKey(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getHmacSharedKeyTTL() const;
    void setHmacSharedKeyTTL(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getBackoffStandbyFactor() const;
    void setBackoffStandbyFactor(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getBackoffStableFactor() const;
    void setBackoffStableFactor(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyInteger> m_ConnectorPingTimeout;
    std::shared_ptr<ConfigNodePropertyInteger> m_ConnectorPingInterval;
    std::shared_ptr<ConfigNodePropertyInteger> m_DiscoveryLiteCheckInterval;
    std::shared_ptr<ConfigNodePropertyInteger> m_ClusterSyncServiceTimeout;
    std::shared_ptr<ConfigNodePropertyInteger> m_ClusterSyncServiceInterval;
    std::shared_ptr<ConfigNodePropertyBoolean> m_EnableSyncToken;
    std::shared_ptr<ConfigNodePropertyInteger> m_MinEventDelay;
    std::shared_ptr<ConfigNodePropertyInteger> m_SocketConnectTimeout;
    std::shared_ptr<ConfigNodePropertyInteger> m_SoTimeout;
    std::shared_ptr<ConfigNodePropertyArray> m_TopologyConnectorUrls;
    std::shared_ptr<ConfigNodePropertyArray> m_TopologyConnectorWhitelist;
    std::shared_ptr<ConfigNodePropertyBoolean> m_AutoStopLocalLoopEnabled;
    std::shared_ptr<ConfigNodePropertyBoolean> m_GzipConnectorRequestsEnabled;
    std::shared_ptr<ConfigNodePropertyBoolean> m_HmacEnabled;
    std::shared_ptr<ConfigNodePropertyBoolean> m_EnableEncryption;
    std::shared_ptr<ConfigNodePropertyString> m_SharedKey;
    std::shared_ptr<ConfigNodePropertyInteger> m_HmacSharedKeyTTL;
    std::shared_ptr<ConfigNodePropertyString> m_BackoffStandbyFactor;
    std::shared_ptr<ConfigNodePropertyString> m_BackoffStableFactor;
};

}
}
}
}

#endif /* OrgApacheSlingDiscoveryOakConfigProperties_H_ */
