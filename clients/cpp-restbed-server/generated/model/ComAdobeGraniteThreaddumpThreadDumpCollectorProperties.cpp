/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteThreaddumpThreadDumpCollectorProperties.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::ComAdobeGraniteThreaddumpThreadDumpCollectorProperties()
{
    
}

ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::~ComAdobeGraniteThreaddumpThreadDumpCollectorProperties()
{
}

std::string ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	write_json(ss, pt, false);
	return ss.str();
}

void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getSchedulerPeriod() const
{
    return m_Scheduler_period;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setSchedulerPeriod(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Scheduler_period = value;
}
std::shared_ptr<ConfigNodePropertyDropDown> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getSchedulerRunOn() const
{
    return m_Scheduler_runOn;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setSchedulerRunOn(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Scheduler_runOn = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpEnabled() const
{
    return m_Granite_threaddump_enabled;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Granite_threaddump_enabled = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpDumpsPerFile() const
{
    return m_Granite_threaddump_dumpsPerFile;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpDumpsPerFile(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Granite_threaddump_dumpsPerFile = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpEnableGzipCompression() const
{
    return m_Granite_threaddump_enableGzipCompression;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpEnableGzipCompression(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Granite_threaddump_enableGzipCompression = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpEnableDirectoriesCompression() const
{
    return m_Granite_threaddump_enableDirectoriesCompression;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpEnableDirectoriesCompression(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Granite_threaddump_enableDirectoriesCompression = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpEnableJStack() const
{
    return m_Granite_threaddump_enableJStack;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpEnableJStack(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Granite_threaddump_enableJStack = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpMaxBackupDays() const
{
    return m_Granite_threaddump_maxBackupDays;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpMaxBackupDays(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Granite_threaddump_maxBackupDays = value;
}
std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpBackupCleanTrigger() const
{
    return m_Granite_threaddump_backupCleanTrigger;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpBackupCleanTrigger(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Granite_threaddump_backupCleanTrigger = value;
}

}
}
}
}

