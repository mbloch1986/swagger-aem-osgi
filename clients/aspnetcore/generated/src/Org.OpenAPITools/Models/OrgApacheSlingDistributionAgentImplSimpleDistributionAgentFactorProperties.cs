/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties : IEquatable<OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties>
    { 
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public ConfigNodePropertyString Name { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title")]
        public ConfigNodePropertyString Title { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="details")]
        public ConfigNodePropertyString Details { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled")]
        public ConfigNodePropertyBoolean Enabled { get; set; }

        /// <summary>
        /// Gets or Sets ServiceName
        /// </summary>
        [DataMember(Name="serviceName")]
        public ConfigNodePropertyString ServiceName { get; set; }

        /// <summary>
        /// Gets or Sets LogLevel
        /// </summary>
        [DataMember(Name="log.level")]
        public ConfigNodePropertyDropDown LogLevel { get; set; }

        /// <summary>
        /// Gets or Sets QueueProcessingEnabled
        /// </summary>
        [DataMember(Name="queue.processing.enabled")]
        public ConfigNodePropertyBoolean QueueProcessingEnabled { get; set; }

        /// <summary>
        /// Gets or Sets PackageExporterTarget
        /// </summary>
        [DataMember(Name="packageExporter.target")]
        public ConfigNodePropertyString PackageExporterTarget { get; set; }

        /// <summary>
        /// Gets or Sets PackageImporterTarget
        /// </summary>
        [DataMember(Name="packageImporter.target")]
        public ConfigNodePropertyString PackageImporterTarget { get; set; }

        /// <summary>
        /// Gets or Sets RequestAuthorizationStrategyTarget
        /// </summary>
        [DataMember(Name="requestAuthorizationStrategy.target")]
        public ConfigNodePropertyString RequestAuthorizationStrategyTarget { get; set; }

        /// <summary>
        /// Gets or Sets TriggersTarget
        /// </summary>
        [DataMember(Name="triggers.target")]
        public ConfigNodePropertyString TriggersTarget { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  LogLevel: ").Append(LogLevel).Append("\n");
            sb.Append("  QueueProcessingEnabled: ").Append(QueueProcessingEnabled).Append("\n");
            sb.Append("  PackageExporterTarget: ").Append(PackageExporterTarget).Append("\n");
            sb.Append("  PackageImporterTarget: ").Append(PackageImporterTarget).Append("\n");
            sb.Append("  RequestAuthorizationStrategyTarget: ").Append(RequestAuthorizationStrategyTarget).Append("\n");
            sb.Append("  TriggersTarget: ").Append(TriggersTarget).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Details == other.Details ||
                    Details != null &&
                    Details.Equals(other.Details)
                ) && 
                (
                    Enabled == other.Enabled ||
                    Enabled != null &&
                    Enabled.Equals(other.Enabled)
                ) && 
                (
                    ServiceName == other.ServiceName ||
                    ServiceName != null &&
                    ServiceName.Equals(other.ServiceName)
                ) && 
                (
                    LogLevel == other.LogLevel ||
                    LogLevel != null &&
                    LogLevel.Equals(other.LogLevel)
                ) && 
                (
                    QueueProcessingEnabled == other.QueueProcessingEnabled ||
                    QueueProcessingEnabled != null &&
                    QueueProcessingEnabled.Equals(other.QueueProcessingEnabled)
                ) && 
                (
                    PackageExporterTarget == other.PackageExporterTarget ||
                    PackageExporterTarget != null &&
                    PackageExporterTarget.Equals(other.PackageExporterTarget)
                ) && 
                (
                    PackageImporterTarget == other.PackageImporterTarget ||
                    PackageImporterTarget != null &&
                    PackageImporterTarget.Equals(other.PackageImporterTarget)
                ) && 
                (
                    RequestAuthorizationStrategyTarget == other.RequestAuthorizationStrategyTarget ||
                    RequestAuthorizationStrategyTarget != null &&
                    RequestAuthorizationStrategyTarget.Equals(other.RequestAuthorizationStrategyTarget)
                ) && 
                (
                    TriggersTarget == other.TriggersTarget ||
                    TriggersTarget != null &&
                    TriggersTarget.Equals(other.TriggersTarget)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Details != null)
                    hashCode = hashCode * 59 + Details.GetHashCode();
                    if (Enabled != null)
                    hashCode = hashCode * 59 + Enabled.GetHashCode();
                    if (ServiceName != null)
                    hashCode = hashCode * 59 + ServiceName.GetHashCode();
                    if (LogLevel != null)
                    hashCode = hashCode * 59 + LogLevel.GetHashCode();
                    if (QueueProcessingEnabled != null)
                    hashCode = hashCode * 59 + QueueProcessingEnabled.GetHashCode();
                    if (PackageExporterTarget != null)
                    hashCode = hashCode * 59 + PackageExporterTarget.GetHashCode();
                    if (PackageImporterTarget != null)
                    hashCode = hashCode * 59 + PackageImporterTarget.GetHashCode();
                    if (RequestAuthorizationStrategyTarget != null)
                    hashCode = hashCode * 59 + RequestAuthorizationStrategyTarget.GetHashCode();
                    if (TriggersTarget != null)
                    hashCode = hashCode * 59 + TriggersTarget.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties left, OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties left, OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
