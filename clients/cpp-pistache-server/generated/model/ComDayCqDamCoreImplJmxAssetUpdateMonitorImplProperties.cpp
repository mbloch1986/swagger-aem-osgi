/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties::ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties()
{
    m_Jmx_objectnameIsSet = false;
    m_ActiveIsSet = false;
    
}

ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties::~ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties()
{
}

void ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Jmx_objectnameIsSet)
    {
        val["jmx.objectname"] = ModelBase::toJson(m_Jmx_objectname);
    }
    if(m_ActiveIsSet)
    {
        val["active"] = ModelBase::toJson(m_Active);
    }
    

    return val;
}

void ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("jmx.objectname") != val.end())
    {
        if(!val["jmx.objectname"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["jmx.objectname"]);
            setJmxObjectname( newItem );
        }
        
    }
    if(val.find("active") != val.end())
    {
        if(!val["active"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["active"]);
            setActive( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties::getJmxObjectname() const
{
    return m_Jmx_objectname;
}
void ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties::setJmxObjectname(ConfigNodePropertyString const& value)
{
    m_Jmx_objectname = value;
    m_Jmx_objectnameIsSet = true;
}
bool ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties::jmxObjectnameIsSet() const
{
    return m_Jmx_objectnameIsSet;
}
void ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties::unsetJmx_objectname()
{
    m_Jmx_objectnameIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties::getActive() const
{
    return m_Active;
}
void ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties::setActive(ConfigNodePropertyBoolean const& value)
{
    m_Active = value;
    m_ActiveIsSet = true;
}
bool ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties::activeIsSet() const
{
    return m_ActiveIsSet;
}
void ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties::unsetActive()
{
    m_ActiveIsSet = false;
}

}
}
}
}

