/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties() {
    init();
}

OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::~OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties() {
    this->cleanup();
}

void
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::init() {
    event_filter = new OAIConfigNodePropertyString();
    m_event_filter_isSet = false;
    launches_eventhandler_threadpool_maxsize = new OAIConfigNodePropertyInteger();
    m_launches_eventhandler_threadpool_maxsize_isSet = false;
    launches_eventhandler_threadpool_priority = new OAIConfigNodePropertyDropDown();
    m_launches_eventhandler_threadpool_priority_isSet = false;
    launches_eventhandler_updatelastmodification = new OAIConfigNodePropertyBoolean();
    m_launches_eventhandler_updatelastmodification_isSet = false;
}

void
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::cleanup() {
    if(event_filter != nullptr) { 
        delete event_filter;
    }
    if(launches_eventhandler_threadpool_maxsize != nullptr) { 
        delete launches_eventhandler_threadpool_maxsize;
    }
    if(launches_eventhandler_threadpool_priority != nullptr) { 
        delete launches_eventhandler_threadpool_priority;
    }
    if(launches_eventhandler_updatelastmodification != nullptr) { 
        delete launches_eventhandler_updatelastmodification;
    }
}

OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties*
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&event_filter, pJson["event.filter"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&launches_eventhandler_threadpool_maxsize, pJson["launches.eventhandler.threadpool.maxsize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&launches_eventhandler_threadpool_priority, pJson["launches.eventhandler.threadpool.priority"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&launches_eventhandler_updatelastmodification, pJson["launches.eventhandler.updatelastmodification"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::asJsonObject() {
    QJsonObject obj;
    if((event_filter != nullptr) && (event_filter->isSet())){
        toJsonValue(QString("event.filter"), event_filter, obj, QString("OAIConfigNodePropertyString"));
    }
    if((launches_eventhandler_threadpool_maxsize != nullptr) && (launches_eventhandler_threadpool_maxsize->isSet())){
        toJsonValue(QString("launches.eventhandler.threadpool.maxsize"), launches_eventhandler_threadpool_maxsize, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((launches_eventhandler_threadpool_priority != nullptr) && (launches_eventhandler_threadpool_priority->isSet())){
        toJsonValue(QString("launches.eventhandler.threadpool.priority"), launches_eventhandler_threadpool_priority, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((launches_eventhandler_updatelastmodification != nullptr) && (launches_eventhandler_updatelastmodification->isSet())){
        toJsonValue(QString("launches.eventhandler.updatelastmodification"), launches_eventhandler_updatelastmodification, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::getEventFilter() {
    return event_filter;
}
void
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::setEventFilter(OAIConfigNodePropertyString* event_filter) {
    this->event_filter = event_filter;
    this->m_event_filter_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::getLaunchesEventhandlerThreadpoolMaxsize() {
    return launches_eventhandler_threadpool_maxsize;
}
void
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::setLaunchesEventhandlerThreadpoolMaxsize(OAIConfigNodePropertyInteger* launches_eventhandler_threadpool_maxsize) {
    this->launches_eventhandler_threadpool_maxsize = launches_eventhandler_threadpool_maxsize;
    this->m_launches_eventhandler_threadpool_maxsize_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::getLaunchesEventhandlerThreadpoolPriority() {
    return launches_eventhandler_threadpool_priority;
}
void
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::setLaunchesEventhandlerThreadpoolPriority(OAIConfigNodePropertyDropDown* launches_eventhandler_threadpool_priority) {
    this->launches_eventhandler_threadpool_priority = launches_eventhandler_threadpool_priority;
    this->m_launches_eventhandler_threadpool_priority_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::getLaunchesEventhandlerUpdatelastmodification() {
    return launches_eventhandler_updatelastmodification;
}
void
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::setLaunchesEventhandlerUpdatelastmodification(OAIConfigNodePropertyBoolean* launches_eventhandler_updatelastmodification) {
    this->launches_eventhandler_updatelastmodification = launches_eventhandler_updatelastmodification;
    this->m_launches_eventhandler_updatelastmodification_isSet = true;
}


bool
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(event_filter != nullptr && event_filter->isSet()){ isObjectUpdated = true; break;}
        if(launches_eventhandler_threadpool_maxsize != nullptr && launches_eventhandler_threadpool_maxsize->isSet()){ isObjectUpdated = true; break;}
        if(launches_eventhandler_threadpool_priority != nullptr && launches_eventhandler_threadpool_priority->isSet()){ isObjectUpdated = true; break;}
        if(launches_eventhandler_updatelastmodification != nullptr && launches_eventhandler_updatelastmodification->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

