/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
  #[serde(rename = "provider.name")]
  provider_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "host.name")]
  host_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "host.port")]
  host_port: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "host.ssl")]
  host_ssl: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "host.tls")]
  host_tls: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "host.noCertCheck")]
  host_no_cert_check: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "bind.dn")]
  bind_dn: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "bind.password")]
  bind_password: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "searchTimeout")]
  search_timeout: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "adminPool.maxActive")]
  admin_pool_max_active: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "adminPool.lookupOnValidate")]
  admin_pool_lookup_on_validate: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "userPool.maxActive")]
  user_pool_max_active: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "userPool.lookupOnValidate")]
  user_pool_lookup_on_validate: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "user.baseDN")]
  user_base_dn: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "user.objectclass")]
  user_objectclass: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "user.idAttribute")]
  user_id_attribute: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "user.extraFilter")]
  user_extra_filter: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "user.makeDnPath")]
  user_make_dn_path: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "group.baseDN")]
  group_base_dn: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "group.objectclass")]
  group_objectclass: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "group.nameAttribute")]
  group_name_attribute: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "group.extraFilter")]
  group_extra_filter: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "group.makeDnPath")]
  group_make_dn_path: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "group.memberAttribute")]
  group_member_attribute: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "useUidForExtId")]
  use_uid_for_ext_id: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "customattributes")]
  customattributes: Option<::models::ConfigNodePropertyArray>
}

impl OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
  pub fn new() -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
      provider_name: None,
      host_name: None,
      host_port: None,
      host_ssl: None,
      host_tls: None,
      host_no_cert_check: None,
      bind_dn: None,
      bind_password: None,
      search_timeout: None,
      admin_pool_max_active: None,
      admin_pool_lookup_on_validate: None,
      user_pool_max_active: None,
      user_pool_lookup_on_validate: None,
      user_base_dn: None,
      user_objectclass: None,
      user_id_attribute: None,
      user_extra_filter: None,
      user_make_dn_path: None,
      group_base_dn: None,
      group_objectclass: None,
      group_name_attribute: None,
      group_extra_filter: None,
      group_make_dn_path: None,
      group_member_attribute: None,
      use_uid_for_ext_id: None,
      customattributes: None
    }
  }

  pub fn set_provider_name(&mut self, provider_name: ::models::ConfigNodePropertyString) {
    self.provider_name = Some(provider_name);
  }

  pub fn with_provider_name(mut self, provider_name: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.provider_name = Some(provider_name);
    self
  }

  pub fn provider_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.provider_name.as_ref()
  }

  pub fn reset_provider_name(&mut self) {
    self.provider_name = None;
  }

  pub fn set_host_name(&mut self, host_name: ::models::ConfigNodePropertyString) {
    self.host_name = Some(host_name);
  }

  pub fn with_host_name(mut self, host_name: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.host_name = Some(host_name);
    self
  }

  pub fn host_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.host_name.as_ref()
  }

  pub fn reset_host_name(&mut self) {
    self.host_name = None;
  }

  pub fn set_host_port(&mut self, host_port: ::models::ConfigNodePropertyInteger) {
    self.host_port = Some(host_port);
  }

  pub fn with_host_port(mut self, host_port: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.host_port = Some(host_port);
    self
  }

  pub fn host_port(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.host_port.as_ref()
  }

  pub fn reset_host_port(&mut self) {
    self.host_port = None;
  }

  pub fn set_host_ssl(&mut self, host_ssl: ::models::ConfigNodePropertyBoolean) {
    self.host_ssl = Some(host_ssl);
  }

  pub fn with_host_ssl(mut self, host_ssl: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.host_ssl = Some(host_ssl);
    self
  }

  pub fn host_ssl(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.host_ssl.as_ref()
  }

  pub fn reset_host_ssl(&mut self) {
    self.host_ssl = None;
  }

  pub fn set_host_tls(&mut self, host_tls: ::models::ConfigNodePropertyBoolean) {
    self.host_tls = Some(host_tls);
  }

  pub fn with_host_tls(mut self, host_tls: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.host_tls = Some(host_tls);
    self
  }

  pub fn host_tls(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.host_tls.as_ref()
  }

  pub fn reset_host_tls(&mut self) {
    self.host_tls = None;
  }

  pub fn set_host_no_cert_check(&mut self, host_no_cert_check: ::models::ConfigNodePropertyBoolean) {
    self.host_no_cert_check = Some(host_no_cert_check);
  }

  pub fn with_host_no_cert_check(mut self, host_no_cert_check: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.host_no_cert_check = Some(host_no_cert_check);
    self
  }

  pub fn host_no_cert_check(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.host_no_cert_check.as_ref()
  }

  pub fn reset_host_no_cert_check(&mut self) {
    self.host_no_cert_check = None;
  }

  pub fn set_bind_dn(&mut self, bind_dn: ::models::ConfigNodePropertyString) {
    self.bind_dn = Some(bind_dn);
  }

  pub fn with_bind_dn(mut self, bind_dn: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.bind_dn = Some(bind_dn);
    self
  }

  pub fn bind_dn(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.bind_dn.as_ref()
  }

  pub fn reset_bind_dn(&mut self) {
    self.bind_dn = None;
  }

  pub fn set_bind_password(&mut self, bind_password: ::models::ConfigNodePropertyString) {
    self.bind_password = Some(bind_password);
  }

  pub fn with_bind_password(mut self, bind_password: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.bind_password = Some(bind_password);
    self
  }

  pub fn bind_password(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.bind_password.as_ref()
  }

  pub fn reset_bind_password(&mut self) {
    self.bind_password = None;
  }

  pub fn set_search_timeout(&mut self, search_timeout: ::models::ConfigNodePropertyString) {
    self.search_timeout = Some(search_timeout);
  }

  pub fn with_search_timeout(mut self, search_timeout: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.search_timeout = Some(search_timeout);
    self
  }

  pub fn search_timeout(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.search_timeout.as_ref()
  }

  pub fn reset_search_timeout(&mut self) {
    self.search_timeout = None;
  }

  pub fn set_admin_pool_max_active(&mut self, admin_pool_max_active: ::models::ConfigNodePropertyInteger) {
    self.admin_pool_max_active = Some(admin_pool_max_active);
  }

  pub fn with_admin_pool_max_active(mut self, admin_pool_max_active: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.admin_pool_max_active = Some(admin_pool_max_active);
    self
  }

  pub fn admin_pool_max_active(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.admin_pool_max_active.as_ref()
  }

  pub fn reset_admin_pool_max_active(&mut self) {
    self.admin_pool_max_active = None;
  }

  pub fn set_admin_pool_lookup_on_validate(&mut self, admin_pool_lookup_on_validate: ::models::ConfigNodePropertyBoolean) {
    self.admin_pool_lookup_on_validate = Some(admin_pool_lookup_on_validate);
  }

  pub fn with_admin_pool_lookup_on_validate(mut self, admin_pool_lookup_on_validate: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.admin_pool_lookup_on_validate = Some(admin_pool_lookup_on_validate);
    self
  }

  pub fn admin_pool_lookup_on_validate(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.admin_pool_lookup_on_validate.as_ref()
  }

  pub fn reset_admin_pool_lookup_on_validate(&mut self) {
    self.admin_pool_lookup_on_validate = None;
  }

  pub fn set_user_pool_max_active(&mut self, user_pool_max_active: ::models::ConfigNodePropertyInteger) {
    self.user_pool_max_active = Some(user_pool_max_active);
  }

  pub fn with_user_pool_max_active(mut self, user_pool_max_active: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.user_pool_max_active = Some(user_pool_max_active);
    self
  }

  pub fn user_pool_max_active(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.user_pool_max_active.as_ref()
  }

  pub fn reset_user_pool_max_active(&mut self) {
    self.user_pool_max_active = None;
  }

  pub fn set_user_pool_lookup_on_validate(&mut self, user_pool_lookup_on_validate: ::models::ConfigNodePropertyBoolean) {
    self.user_pool_lookup_on_validate = Some(user_pool_lookup_on_validate);
  }

  pub fn with_user_pool_lookup_on_validate(mut self, user_pool_lookup_on_validate: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.user_pool_lookup_on_validate = Some(user_pool_lookup_on_validate);
    self
  }

  pub fn user_pool_lookup_on_validate(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.user_pool_lookup_on_validate.as_ref()
  }

  pub fn reset_user_pool_lookup_on_validate(&mut self) {
    self.user_pool_lookup_on_validate = None;
  }

  pub fn set_user_base_dn(&mut self, user_base_dn: ::models::ConfigNodePropertyString) {
    self.user_base_dn = Some(user_base_dn);
  }

  pub fn with_user_base_dn(mut self, user_base_dn: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.user_base_dn = Some(user_base_dn);
    self
  }

  pub fn user_base_dn(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.user_base_dn.as_ref()
  }

  pub fn reset_user_base_dn(&mut self) {
    self.user_base_dn = None;
  }

  pub fn set_user_objectclass(&mut self, user_objectclass: ::models::ConfigNodePropertyArray) {
    self.user_objectclass = Some(user_objectclass);
  }

  pub fn with_user_objectclass(mut self, user_objectclass: ::models::ConfigNodePropertyArray) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.user_objectclass = Some(user_objectclass);
    self
  }

  pub fn user_objectclass(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.user_objectclass.as_ref()
  }

  pub fn reset_user_objectclass(&mut self) {
    self.user_objectclass = None;
  }

  pub fn set_user_id_attribute(&mut self, user_id_attribute: ::models::ConfigNodePropertyString) {
    self.user_id_attribute = Some(user_id_attribute);
  }

  pub fn with_user_id_attribute(mut self, user_id_attribute: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.user_id_attribute = Some(user_id_attribute);
    self
  }

  pub fn user_id_attribute(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.user_id_attribute.as_ref()
  }

  pub fn reset_user_id_attribute(&mut self) {
    self.user_id_attribute = None;
  }

  pub fn set_user_extra_filter(&mut self, user_extra_filter: ::models::ConfigNodePropertyString) {
    self.user_extra_filter = Some(user_extra_filter);
  }

  pub fn with_user_extra_filter(mut self, user_extra_filter: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.user_extra_filter = Some(user_extra_filter);
    self
  }

  pub fn user_extra_filter(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.user_extra_filter.as_ref()
  }

  pub fn reset_user_extra_filter(&mut self) {
    self.user_extra_filter = None;
  }

  pub fn set_user_make_dn_path(&mut self, user_make_dn_path: ::models::ConfigNodePropertyBoolean) {
    self.user_make_dn_path = Some(user_make_dn_path);
  }

  pub fn with_user_make_dn_path(mut self, user_make_dn_path: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.user_make_dn_path = Some(user_make_dn_path);
    self
  }

  pub fn user_make_dn_path(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.user_make_dn_path.as_ref()
  }

  pub fn reset_user_make_dn_path(&mut self) {
    self.user_make_dn_path = None;
  }

  pub fn set_group_base_dn(&mut self, group_base_dn: ::models::ConfigNodePropertyString) {
    self.group_base_dn = Some(group_base_dn);
  }

  pub fn with_group_base_dn(mut self, group_base_dn: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.group_base_dn = Some(group_base_dn);
    self
  }

  pub fn group_base_dn(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.group_base_dn.as_ref()
  }

  pub fn reset_group_base_dn(&mut self) {
    self.group_base_dn = None;
  }

  pub fn set_group_objectclass(&mut self, group_objectclass: ::models::ConfigNodePropertyArray) {
    self.group_objectclass = Some(group_objectclass);
  }

  pub fn with_group_objectclass(mut self, group_objectclass: ::models::ConfigNodePropertyArray) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.group_objectclass = Some(group_objectclass);
    self
  }

  pub fn group_objectclass(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.group_objectclass.as_ref()
  }

  pub fn reset_group_objectclass(&mut self) {
    self.group_objectclass = None;
  }

  pub fn set_group_name_attribute(&mut self, group_name_attribute: ::models::ConfigNodePropertyString) {
    self.group_name_attribute = Some(group_name_attribute);
  }

  pub fn with_group_name_attribute(mut self, group_name_attribute: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.group_name_attribute = Some(group_name_attribute);
    self
  }

  pub fn group_name_attribute(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.group_name_attribute.as_ref()
  }

  pub fn reset_group_name_attribute(&mut self) {
    self.group_name_attribute = None;
  }

  pub fn set_group_extra_filter(&mut self, group_extra_filter: ::models::ConfigNodePropertyString) {
    self.group_extra_filter = Some(group_extra_filter);
  }

  pub fn with_group_extra_filter(mut self, group_extra_filter: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.group_extra_filter = Some(group_extra_filter);
    self
  }

  pub fn group_extra_filter(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.group_extra_filter.as_ref()
  }

  pub fn reset_group_extra_filter(&mut self) {
    self.group_extra_filter = None;
  }

  pub fn set_group_make_dn_path(&mut self, group_make_dn_path: ::models::ConfigNodePropertyBoolean) {
    self.group_make_dn_path = Some(group_make_dn_path);
  }

  pub fn with_group_make_dn_path(mut self, group_make_dn_path: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.group_make_dn_path = Some(group_make_dn_path);
    self
  }

  pub fn group_make_dn_path(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.group_make_dn_path.as_ref()
  }

  pub fn reset_group_make_dn_path(&mut self) {
    self.group_make_dn_path = None;
  }

  pub fn set_group_member_attribute(&mut self, group_member_attribute: ::models::ConfigNodePropertyString) {
    self.group_member_attribute = Some(group_member_attribute);
  }

  pub fn with_group_member_attribute(mut self, group_member_attribute: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.group_member_attribute = Some(group_member_attribute);
    self
  }

  pub fn group_member_attribute(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.group_member_attribute.as_ref()
  }

  pub fn reset_group_member_attribute(&mut self) {
    self.group_member_attribute = None;
  }

  pub fn set_use_uid_for_ext_id(&mut self, use_uid_for_ext_id: ::models::ConfigNodePropertyBoolean) {
    self.use_uid_for_ext_id = Some(use_uid_for_ext_id);
  }

  pub fn with_use_uid_for_ext_id(mut self, use_uid_for_ext_id: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.use_uid_for_ext_id = Some(use_uid_for_ext_id);
    self
  }

  pub fn use_uid_for_ext_id(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.use_uid_for_ext_id.as_ref()
  }

  pub fn reset_use_uid_for_ext_id(&mut self) {
    self.use_uid_for_ext_id = None;
  }

  pub fn set_customattributes(&mut self, customattributes: ::models::ConfigNodePropertyArray) {
    self.customattributes = Some(customattributes);
  }

  pub fn with_customattributes(mut self, customattributes: ::models::ConfigNodePropertyArray) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    self.customattributes = Some(customattributes);
    self
  }

  pub fn customattributes(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.customattributes.as_ref()
  }

  pub fn reset_customattributes(&mut self) {
    self.customattributes = None;
  }

}



