/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheFelixScrScrServiceProperties : IEquatable<OrgApacheFelixScrScrServiceProperties>
    { 
        /// <summary>
        /// Gets or Sets DsLoglevel
        /// </summary>
        [DataMember(Name="ds.loglevel")]
        public ConfigNodePropertyDropDown DsLoglevel { get; set; }

        /// <summary>
        /// Gets or Sets DsFactoryEnabled
        /// </summary>
        [DataMember(Name="ds.factory.enabled")]
        public ConfigNodePropertyBoolean DsFactoryEnabled { get; set; }

        /// <summary>
        /// Gets or Sets DsDelayedKeepInstances
        /// </summary>
        [DataMember(Name="ds.delayed.keepInstances")]
        public ConfigNodePropertyBoolean DsDelayedKeepInstances { get; set; }

        /// <summary>
        /// Gets or Sets DsLockTimeoutMilliseconds
        /// </summary>
        [DataMember(Name="ds.lock.timeout.milliseconds")]
        public ConfigNodePropertyInteger DsLockTimeoutMilliseconds { get; set; }

        /// <summary>
        /// Gets or Sets DsStopTimeoutMilliseconds
        /// </summary>
        [DataMember(Name="ds.stop.timeout.milliseconds")]
        public ConfigNodePropertyInteger DsStopTimeoutMilliseconds { get; set; }

        /// <summary>
        /// Gets or Sets DsGlobalExtender
        /// </summary>
        [DataMember(Name="ds.global.extender")]
        public ConfigNodePropertyBoolean DsGlobalExtender { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheFelixScrScrServiceProperties {\n");
            sb.Append("  DsLoglevel: ").Append(DsLoglevel).Append("\n");
            sb.Append("  DsFactoryEnabled: ").Append(DsFactoryEnabled).Append("\n");
            sb.Append("  DsDelayedKeepInstances: ").Append(DsDelayedKeepInstances).Append("\n");
            sb.Append("  DsLockTimeoutMilliseconds: ").Append(DsLockTimeoutMilliseconds).Append("\n");
            sb.Append("  DsStopTimeoutMilliseconds: ").Append(DsStopTimeoutMilliseconds).Append("\n");
            sb.Append("  DsGlobalExtender: ").Append(DsGlobalExtender).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheFelixScrScrServiceProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheFelixScrScrServiceProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheFelixScrScrServiceProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheFelixScrScrServiceProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DsLoglevel == other.DsLoglevel ||
                    DsLoglevel != null &&
                    DsLoglevel.Equals(other.DsLoglevel)
                ) && 
                (
                    DsFactoryEnabled == other.DsFactoryEnabled ||
                    DsFactoryEnabled != null &&
                    DsFactoryEnabled.Equals(other.DsFactoryEnabled)
                ) && 
                (
                    DsDelayedKeepInstances == other.DsDelayedKeepInstances ||
                    DsDelayedKeepInstances != null &&
                    DsDelayedKeepInstances.Equals(other.DsDelayedKeepInstances)
                ) && 
                (
                    DsLockTimeoutMilliseconds == other.DsLockTimeoutMilliseconds ||
                    DsLockTimeoutMilliseconds != null &&
                    DsLockTimeoutMilliseconds.Equals(other.DsLockTimeoutMilliseconds)
                ) && 
                (
                    DsStopTimeoutMilliseconds == other.DsStopTimeoutMilliseconds ||
                    DsStopTimeoutMilliseconds != null &&
                    DsStopTimeoutMilliseconds.Equals(other.DsStopTimeoutMilliseconds)
                ) && 
                (
                    DsGlobalExtender == other.DsGlobalExtender ||
                    DsGlobalExtender != null &&
                    DsGlobalExtender.Equals(other.DsGlobalExtender)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DsLoglevel != null)
                    hashCode = hashCode * 59 + DsLoglevel.GetHashCode();
                    if (DsFactoryEnabled != null)
                    hashCode = hashCode * 59 + DsFactoryEnabled.GetHashCode();
                    if (DsDelayedKeepInstances != null)
                    hashCode = hashCode * 59 + DsDelayedKeepInstances.GetHashCode();
                    if (DsLockTimeoutMilliseconds != null)
                    hashCode = hashCode * 59 + DsLockTimeoutMilliseconds.GetHashCode();
                    if (DsStopTimeoutMilliseconds != null)
                    hashCode = hashCode * 59 + DsStopTimeoutMilliseconds.GetHashCode();
                    if (DsGlobalExtender != null)
                    hashCode = hashCode * 59 + DsGlobalExtender.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheFelixScrScrServiceProperties left, OrgApacheFelixScrScrServiceProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheFelixScrScrServiceProperties left, OrgApacheFelixScrScrServiceProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
