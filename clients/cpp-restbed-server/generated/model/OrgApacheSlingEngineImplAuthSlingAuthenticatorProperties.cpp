/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties()
{
    
}

OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::~OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties()
{
}

std::string OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	write_json(ss, pt, false);
	return ss.str();
}

void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getOsgiHttpWhiteboardContextSelect() const
{
    return m_Osgi_http_whiteboard_context_select;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setOsgiHttpWhiteboardContextSelect(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Osgi_http_whiteboard_context_select = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getOsgiHttpWhiteboardListener() const
{
    return m_Osgi_http_whiteboard_listener;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setOsgiHttpWhiteboardListener(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Osgi_http_whiteboard_listener = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getAuthSudoCookie() const
{
    return m_Auth_sudo_cookie;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setAuthSudoCookie(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Auth_sudo_cookie = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getAuthSudoParameter() const
{
    return m_Auth_sudo_parameter;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setAuthSudoParameter(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Auth_sudo_parameter = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getAuthAnnonymous() const
{
    return m_Auth_annonymous;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setAuthAnnonymous(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Auth_annonymous = value;
}
std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getSlingAuthRequirements() const
{
    return m_Sling_auth_requirements;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setSlingAuthRequirements(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Sling_auth_requirements = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getSlingAuthAnonymousUser() const
{
    return m_Sling_auth_anonymous_user;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setSlingAuthAnonymousUser(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Sling_auth_anonymous_user = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getSlingAuthAnonymousPassword() const
{
    return m_Sling_auth_anonymous_password;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setSlingAuthAnonymousPassword(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Sling_auth_anonymous_password = value;
}
std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getAuthHttp() const
{
    return m_Auth_http;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setAuthHttp(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Auth_http = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getAuthHttpRealm() const
{
    return m_Auth_http_realm;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setAuthHttpRealm(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Auth_http_realm = value;
}
std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getAuthUriSuffix() const
{
    return m_Auth_uri_suffix;
}
void OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setAuthUriSuffix(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Auth_uri_suffix = value;
}

}
}
}
}

