/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ConfigNodePropertyDropDown_type.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ConfigNodePropertyDropDown_type::ConfigNodePropertyDropDown_type()
{
    m_LabelsIsSet = false;
    m_ValuesIsSet = false;
}

ConfigNodePropertyDropDown_type::~ConfigNodePropertyDropDown_type()
{
}

void ConfigNodePropertyDropDown_type::validate()
{
    // TODO: implement validation
}

web::json::value ConfigNodePropertyDropDown_type::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_LabelsIsSet)
    {
        val[utility::conversions::to_string_t("labels")] = ModelBase::toJson(m_Labels);
    }
    if(m_ValuesIsSet)
    {
        val[utility::conversions::to_string_t("values")] = ModelBase::toJson(m_Values);
    }

    return val;
}

void ConfigNodePropertyDropDown_type::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("labels")))
    {
        if(!val[utility::conversions::to_string_t("labels")].is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(val[utility::conversions::to_string_t("labels")]);
            setLabels( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("values")))
    {
        if(!val[utility::conversions::to_string_t("values")].is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(val[utility::conversions::to_string_t("values")]);
            setValues( newItem );
        }
    }
}

void ConfigNodePropertyDropDown_type::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_LabelsIsSet)
    {
        if (m_Labels.get())
        {
            m_Labels->toMultipart(multipart, utility::conversions::to_string_t("labels."));
        }
    }
    if(m_ValuesIsSet)
    {
        if (m_Values.get())
        {
            m_Values->toMultipart(multipart, utility::conversions::to_string_t("values."));
        }
    }
}

void ConfigNodePropertyDropDown_type::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("labels")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("labels")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("labels."));
            setLabels( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("values")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("values")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("values."));
            setValues( newItem );
        }
    }
}

std::shared_ptr<Object> ConfigNodePropertyDropDown_type::getLabels() const
{
    return m_Labels;
}


void ConfigNodePropertyDropDown_type::setLabels(std::shared_ptr<Object> value)
{
    m_Labels = value;
    m_LabelsIsSet = true;
}
bool ConfigNodePropertyDropDown_type::labelsIsSet() const
{
    return m_LabelsIsSet;
}

void ConfigNodePropertyDropDown_type::unsetLabels()
{
    m_LabelsIsSet = false;
}

std::shared_ptr<Object> ConfigNodePropertyDropDown_type::getValues() const
{
    return m_Values;
}


void ConfigNodePropertyDropDown_type::setValues(std::shared_ptr<Object> value)
{
    m_Values = value;
    m_ValuesIsSet = true;
}
bool ConfigNodePropertyDropDown_type::valuesIsSet() const
{
    return m_ValuesIsSet;
}

void ConfigNodePropertyDropDown_type::unsetValues()
{
    m_ValuesIsSet = false;
}

}
}
}
}

