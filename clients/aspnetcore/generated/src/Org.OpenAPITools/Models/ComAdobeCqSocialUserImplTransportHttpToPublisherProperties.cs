/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqSocialUserImplTransportHttpToPublisherProperties : IEquatable<ComAdobeCqSocialUserImplTransportHttpToPublisherProperties>
    { 
        /// <summary>
        /// Gets or Sets Enable
        /// </summary>
        [DataMember(Name="enable")]
        public ConfigNodePropertyBoolean Enable { get; set; }

        /// <summary>
        /// Gets or Sets AgentConfiguration
        /// </summary>
        [DataMember(Name="agent.configuration")]
        public ConfigNodePropertyArray AgentConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets ContextPath
        /// </summary>
        [DataMember(Name="context.path")]
        public ConfigNodePropertyString ContextPath { get; set; }

        /// <summary>
        /// Gets or Sets DisabledCipherSuites
        /// </summary>
        [DataMember(Name="disabled.cipher.suites")]
        public ConfigNodePropertyArray DisabledCipherSuites { get; set; }

        /// <summary>
        /// Gets or Sets EnabledCipherSuites
        /// </summary>
        [DataMember(Name="enabled.cipher.suites")]
        public ConfigNodePropertyArray EnabledCipherSuites { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqSocialUserImplTransportHttpToPublisherProperties {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  AgentConfiguration: ").Append(AgentConfiguration).Append("\n");
            sb.Append("  ContextPath: ").Append(ContextPath).Append("\n");
            sb.Append("  DisabledCipherSuites: ").Append(DisabledCipherSuites).Append("\n");
            sb.Append("  EnabledCipherSuites: ").Append(EnabledCipherSuites).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeCqSocialUserImplTransportHttpToPublisherProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeCqSocialUserImplTransportHttpToPublisherProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeCqSocialUserImplTransportHttpToPublisherProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqSocialUserImplTransportHttpToPublisherProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Enable == other.Enable ||
                    Enable != null &&
                    Enable.Equals(other.Enable)
                ) && 
                (
                    AgentConfiguration == other.AgentConfiguration ||
                    AgentConfiguration != null &&
                    AgentConfiguration.Equals(other.AgentConfiguration)
                ) && 
                (
                    ContextPath == other.ContextPath ||
                    ContextPath != null &&
                    ContextPath.Equals(other.ContextPath)
                ) && 
                (
                    DisabledCipherSuites == other.DisabledCipherSuites ||
                    DisabledCipherSuites != null &&
                    DisabledCipherSuites.Equals(other.DisabledCipherSuites)
                ) && 
                (
                    EnabledCipherSuites == other.EnabledCipherSuites ||
                    EnabledCipherSuites != null &&
                    EnabledCipherSuites.Equals(other.EnabledCipherSuites)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Enable != null)
                    hashCode = hashCode * 59 + Enable.GetHashCode();
                    if (AgentConfiguration != null)
                    hashCode = hashCode * 59 + AgentConfiguration.GetHashCode();
                    if (ContextPath != null)
                    hashCode = hashCode * 59 + ContextPath.GetHashCode();
                    if (DisabledCipherSuites != null)
                    hashCode = hashCode * 59 + DisabledCipherSuites.GetHashCode();
                    if (EnabledCipherSuites != null)
                    hashCode = hashCode * 59 + EnabledCipherSuites.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeCqSocialUserImplTransportHttpToPublisherProperties left, ComAdobeCqSocialUserImplTransportHttpToPublisherProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeCqSocialUserImplTransportHttpToPublisherProperties left, ComAdobeCqSocialUserImplTransportHttpToPublisherProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
