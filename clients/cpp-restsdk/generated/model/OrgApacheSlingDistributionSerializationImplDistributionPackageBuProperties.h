/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties
    : public ModelBase
{
public:
    OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties();
    virtual ~OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getName() const;
    bool nameIsSet() const;
    void unsetName();
    void setName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getType() const;
    bool typeIsSet() const;
    void unsetType();
    void setType(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getFormatTarget() const;
    bool formatTargetIsSet() const;
    void unsetFormat_target();
    void setFormatTarget(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getTempFsFolder() const;
    bool tempFsFolderIsSet() const;
    void unsetTempFsFolder();
    void setTempFsFolder(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getFileThreshold() const;
    bool fileThresholdIsSet() const;
    void unsetFileThreshold();
    void setFileThreshold(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getMemoryUnit() const;
    bool memoryUnitIsSet() const;
    void unsetMemoryUnit();
    void setMemoryUnit(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getUseOffHeapMemory() const;
    bool useOffHeapMemoryIsSet() const;
    void unsetUseOffHeapMemory();
    void setUseOffHeapMemory(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getDigestAlgorithm() const;
    bool digestAlgorithmIsSet() const;
    void unsetDigestAlgorithm();
    void setDigestAlgorithm(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMonitoringQueueSize() const;
    bool monitoringQueueSizeIsSet() const;
    void unsetMonitoringQueueSize();
    void setMonitoringQueueSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCleanupDelay() const;
    bool cleanupDelayIsSet() const;
    void unsetCleanupDelay();
    void setCleanupDelay(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getPackageFilters() const;
    bool packageFiltersIsSet() const;
    void unsetPackage_filters();
    void setPackageFilters(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getPropertyFilters() const;
    bool propertyFiltersIsSet() const;
    void unsetProperty_filters();
    void setPropertyFilters(std::shared_ptr<ConfigNodePropertyArray> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Name;
    bool m_NameIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Type;
    bool m_TypeIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Format_target;
    bool m_Format_targetIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_TempFsFolder;
    bool m_TempFsFolderIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_FileThreshold;
    bool m_FileThresholdIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_MemoryUnit;
    bool m_MemoryUnitIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_UseOffHeapMemory;
    bool m_UseOffHeapMemoryIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_DigestAlgorithm;
    bool m_DigestAlgorithmIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_MonitoringQueueSize;
    bool m_MonitoringQueueSizeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_CleanupDelay;
    bool m_CleanupDelayIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Package_filters;
    bool m_Package_filtersIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Property_filters;
    bool m_Property_filtersIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties_H_ */
