/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteMonitoringImplScriptConfigImplProperties {
  #[serde(rename = "script.filename")]
  script_filename: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "script.display")]
  script_display: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "script.path")]
  script_path: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "script.platform")]
  script_platform: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "interval")]
  interval: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "jmxdomain")]
  jmxdomain: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeGraniteMonitoringImplScriptConfigImplProperties {
  pub fn new() -> ComAdobeGraniteMonitoringImplScriptConfigImplProperties {
    ComAdobeGraniteMonitoringImplScriptConfigImplProperties {
      script_filename: None,
      script_display: None,
      script_path: None,
      script_platform: None,
      interval: None,
      jmxdomain: None
    }
  }

  pub fn set_script_filename(&mut self, script_filename: ::models::ConfigNodePropertyString) {
    self.script_filename = Some(script_filename);
  }

  pub fn with_script_filename(mut self, script_filename: ::models::ConfigNodePropertyString) -> ComAdobeGraniteMonitoringImplScriptConfigImplProperties {
    self.script_filename = Some(script_filename);
    self
  }

  pub fn script_filename(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.script_filename.as_ref()
  }

  pub fn reset_script_filename(&mut self) {
    self.script_filename = None;
  }

  pub fn set_script_display(&mut self, script_display: ::models::ConfigNodePropertyString) {
    self.script_display = Some(script_display);
  }

  pub fn with_script_display(mut self, script_display: ::models::ConfigNodePropertyString) -> ComAdobeGraniteMonitoringImplScriptConfigImplProperties {
    self.script_display = Some(script_display);
    self
  }

  pub fn script_display(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.script_display.as_ref()
  }

  pub fn reset_script_display(&mut self) {
    self.script_display = None;
  }

  pub fn set_script_path(&mut self, script_path: ::models::ConfigNodePropertyString) {
    self.script_path = Some(script_path);
  }

  pub fn with_script_path(mut self, script_path: ::models::ConfigNodePropertyString) -> ComAdobeGraniteMonitoringImplScriptConfigImplProperties {
    self.script_path = Some(script_path);
    self
  }

  pub fn script_path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.script_path.as_ref()
  }

  pub fn reset_script_path(&mut self) {
    self.script_path = None;
  }

  pub fn set_script_platform(&mut self, script_platform: ::models::ConfigNodePropertyArray) {
    self.script_platform = Some(script_platform);
  }

  pub fn with_script_platform(mut self, script_platform: ::models::ConfigNodePropertyArray) -> ComAdobeGraniteMonitoringImplScriptConfigImplProperties {
    self.script_platform = Some(script_platform);
    self
  }

  pub fn script_platform(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.script_platform.as_ref()
  }

  pub fn reset_script_platform(&mut self) {
    self.script_platform = None;
  }

  pub fn set_interval(&mut self, interval: ::models::ConfigNodePropertyInteger) {
    self.interval = Some(interval);
  }

  pub fn with_interval(mut self, interval: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteMonitoringImplScriptConfigImplProperties {
    self.interval = Some(interval);
    self
  }

  pub fn interval(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.interval.as_ref()
  }

  pub fn reset_interval(&mut self) {
    self.interval = None;
  }

  pub fn set_jmxdomain(&mut self, jmxdomain: ::models::ConfigNodePropertyString) {
    self.jmxdomain = Some(jmxdomain);
  }

  pub fn with_jmxdomain(mut self, jmxdomain: ::models::ConfigNodePropertyString) -> ComAdobeGraniteMonitoringImplScriptConfigImplProperties {
    self.jmxdomain = Some(jmxdomain);
    self
  }

  pub fn jmxdomain(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.jmxdomain.as_ref()
  }

  pub fn reset_jmxdomain(&mut self) {
    self.jmxdomain = None;
  }

}



