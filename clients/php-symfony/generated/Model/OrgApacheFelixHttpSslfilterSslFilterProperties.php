<?php
/**
 * OrgApacheFelixHttpSslfilterSslFilterProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OrgApacheFelixHttpSslfilterSslFilterProperties model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class OrgApacheFelixHttpSslfilterSslFilterProperties 
{
        /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyString|null
     * @SerializedName("ssl-forward.header")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     */
    protected $sslForwardHeader;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyString|null
     * @SerializedName("ssl-forward.value")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     */
    protected $sslForwardValue;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyString|null
     * @SerializedName("ssl-forward-cert.header")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     */
    protected $sslForwardCertHeader;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     * @SerializedName("rewrite.absolute.urls")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     */
    protected $rewriteAbsoluteUrls;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->sslForwardHeader = isset($data['sslForwardHeader']) ? $data['sslForwardHeader'] : null;
        $this->sslForwardValue = isset($data['sslForwardValue']) ? $data['sslForwardValue'] : null;
        $this->sslForwardCertHeader = isset($data['sslForwardCertHeader']) ? $data['sslForwardCertHeader'] : null;
        $this->rewriteAbsoluteUrls = isset($data['rewriteAbsoluteUrls']) ? $data['rewriteAbsoluteUrls'] : null;
    }

    /**
     * Gets sslForwardHeader.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyString|null
     */
    public function getSslForwardHeader()
    {
        return $this->sslForwardHeader;
    }

    /**
     * Sets sslForwardHeader.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyString|null $sslForwardHeader
     *
     * @return $this
     */
    public function setSslForwardHeader(ConfigNodePropertyString $sslForwardHeader = null)
    {
        $this->sslForwardHeader = $sslForwardHeader;

        return $this;
    }

    /**
     * Gets sslForwardValue.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyString|null
     */
    public function getSslForwardValue()
    {
        return $this->sslForwardValue;
    }

    /**
     * Sets sslForwardValue.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyString|null $sslForwardValue
     *
     * @return $this
     */
    public function setSslForwardValue(ConfigNodePropertyString $sslForwardValue = null)
    {
        $this->sslForwardValue = $sslForwardValue;

        return $this;
    }

    /**
     * Gets sslForwardCertHeader.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyString|null
     */
    public function getSslForwardCertHeader()
    {
        return $this->sslForwardCertHeader;
    }

    /**
     * Sets sslForwardCertHeader.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyString|null $sslForwardCertHeader
     *
     * @return $this
     */
    public function setSslForwardCertHeader(ConfigNodePropertyString $sslForwardCertHeader = null)
    {
        $this->sslForwardCertHeader = $sslForwardCertHeader;

        return $this;
    }

    /**
     * Gets rewriteAbsoluteUrls.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     */
    public function getRewriteAbsoluteUrls()
    {
        return $this->rewriteAbsoluteUrls;
    }

    /**
     * Sets rewriteAbsoluteUrls.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyBoolean|null $rewriteAbsoluteUrls
     *
     * @return $this
     */
    public function setRewriteAbsoluteUrls(ConfigNodePropertyBoolean $rewriteAbsoluteUrls = null)
    {
        $this->rewriteAbsoluteUrls = $rewriteAbsoluteUrls;

        return $this;
    }
}


